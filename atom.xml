<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GONGGONGJOHN&#39;s Blog</title>
  
  
  <link href="http://gonggongjohn.me/atom.xml" rel="self"/>
  
  <link href="http://gonggongjohn.me/"/>
  <updated>2021-12-10T05:51:04.111Z</updated>
  <id>http://gonggongjohn.me/</id>
  
  <author>
    <name>GONGGONGJOHN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寻宝游戏(MongoDB)</title>
    <link href="http://gonggongjohn.me/2021/10/08/database/db-assignment-1/"/>
    <id>http://gonggongjohn.me/2021/10/08/database/db-assignment-1/</id>
    <published>2021-10-08T02:00:00.000Z</published>
    <updated>2021-12-10T05:51:04.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验要求">实验要求</h2><p>考虑以下游戏场景：</p><p>每个游戏玩家都有一定数量的金币、宝物。有一个市场供玩家们买卖宝物。玩家可以将宝物放到市场上挂牌，自己确定价格。其他玩家支付足够的金币，可购买宝物。</p><p>宝物分为两类:一类为工具，它决定持有玩家的工作能力;一类为配饰，它决定持有玩家的运气。</p><p>每位玩家每天可以通过寻宝获得一件宝物，宝物的价值由玩家的运气决定。每位玩家每天可以通过劳动赚取金币，赚得多少由玩家的工作能力决定。（游戏中的一天可以是现实中的 1 分钟、5 分钟、10 分钟，自主设定。）</p><p>每个宝物都有一个自己的名字（尽量不重复）。每位玩家能够佩戴的宝物是有限的（比如一个玩家只能佩戴一个工具和两个配饰）。多余的宝物被放在存储箱中，不起作用，但可以拿到市场出售。</p><p>在市场上挂牌的宝物必须在存储箱中并仍然在存储箱中，直到宝物被卖出。挂牌的宝物可以被收回，并以新的价格重新挂牌。当存储箱装不下时，运气或工作能力值最低的宝物将被系统自动回收。</p><p>假设游戏永不停止而玩家的最终目的是获得最好的宝物。</p><p>请根据以上场景构建一个假想的 Web 游戏，可供多人在线上玩耍。后台的数据库使用 MongoDB。对游戏玩家提供以下几种操作：寻宝（可以自动每天一次）、赚钱（可以自动每天一 次）、佩戴宝物、浏览市场、买宝物、挂牌宝物、收回宝物。</p><h2 id="实验过程">实验过程</h2><h3 id="网站构架">网站构架</h3><p>本次寻宝游戏网站的整体构架如下图所示。</p><figure><img src="system_structure.png" alt="system_structure" /><figcaption aria-hidden="true">system_structure</figcaption></figure><p>由于游戏平台通常会由多个不同的模块构成，且需要不断的迭代和集成，因此我们采用了前后端分离的架构来设计网站。整个网站分为 四个部分，分别为前端维生服务器、前端页面、后端请求服务器及服务器数据库。</p><p>对于前端维生服务器，我们使用了基于 NodeJS 的经典 Web 服务器维持框架 Express。这一 框架提供了一个快速的 Web 应用搭建流程，我们只需要直接将前端页面框架生成的相关资源统 一放在相应的位置，Express 就会帮我们自动托管之后的服务器维持事务。</p><p>对于前端页面，我们使用了经典的 Vue 3 框架来进行搭建。这一框架提供了一整套完善的 UI 及前后端交互流程，可以十分清晰的梳理出各个模块之间的继承及通信关系，方便后续维护。对于 UI 样式，我们使用了基于 Vue 3 的 Quasar Framework 2 框架，这一框架支持流式数据加载 及响应式的交互访问，可以吸引用户访问并使用该平台。</p><p>由于需要应对各种不同的情况，后端服务器由多个模块联合构成。首先，我们使用了 Flask 作为容器实现框架，并通过蓝图（Blueprint）功能将接口分摊至五个子接口集合上以实现业务隔离。随后，由于我们使用了前后端分离架构，自然会涉及到跨域问题。因此我们在请求处理接口 上加上了一层 CORS 包装器。最后，为了应对高并发请求，我们使用了 Gunicorn 网关容器对全 应用进行了封装，并对 Flask 开启了多线程支持。这样在面对高并发请求时系统可以较为均衡的分摊整个负载。</p><p>本次实验使用了 MongoDB 作为服务器存储数据库。作为一个文档型数据库，其类 Json 格 式的数据管理模型更贴近 Web 交互时的数据格式，这使得我们在后续在设计接口数据协议时更为方便。</p><h3 id="数据库设计">数据库设计</h3><h4 id="内嵌存储-v.s-归一化存储">内嵌存储 v.s 归一化存储</h4><p>对于当前应用，我们主要需要存储以下几种数据:系统中可用的宝物及其价值、用户的各种 基本信息、用户正在佩戴的物品、用户当前拥有的物品、市场上正在出售的宝物。</p><p>对于文档型数据库，一个最直接的想法便是将所有的用户数据全部存储在同一个集合中。因此，对于当前应用，一个可能的数据库设计如下图所示。</p><figure><img src="embed_db.png" alt="embed_db" /><figcaption aria-hidden="true">embed_db</figcaption></figure><p>其中，用户已佩戴的物品及储物箱中的物品被以数组的形式嵌入用户集合中。这样做的好处是在每次用户访问其拥有物品 时，我们始终能够以 <span class="math inline">\(O(1)\)</span> 的代价（获取到用户文档之后）完成对用户物品查询。然而，当用户想要变更物品的状态时，系统就需要遍历整个数组以找到对应的物品，此时其时间开销便会变得极为糟糕，在最坏情况下甚至能达到 <span class="math inline">\(O(n)\)</span>（获取到用户文档之后），且索引功能很难帮助优化这 一查询代价。此外，这一存储方式会带来大量的数据冗余，且由于宝物的全部信息均被存储在了用户表中，当系统要对宝物信息进行更新时，就需要对所有集合中的所有玩家的每一条宝物数据进行遍历，当用户规模较大时，这一代价将变得十分巨大，且此时可能出现数据不一致的问题， 破坏了数据库的 ACID 原则。</p><p>在数据库设计中，我们通常还会尽可能的让同一数据在所有集合中尽可能只保留一份以减少数据冗余，即所谓的存储归一化（Storage Normalization）。在这种模式下，数据库可以以下图所示的方式设计。</p><figure><img src="normalize_db.png" alt="normalize_db" /><figcaption aria-hidden="true">normalize_db</figcaption></figure><p>这样做的好处是极大的减少了数据冗余，且从灾备的角度来看， 即使发生了数据丢失，由于宝物和用户的信息是单独存储的，其数据损失的概率也相对较小。此外，当宝物状态需要发生改变时，我们只需要移动其唯一标识即可进行更改，数据移动的开销较小。然而，由于宝物与用户的信息发生了分离，对于用户的每一件物品，我们都需要至少访问两个集合才能获取到所有需要的数据，而访问不同的集合对于 MongoDB 而言开销是巨大的，因此对于本应用来说仍然不是一个合适的选择。</p><h4 id="缓存型存储">缓存型存储</h4><p>为了解决上面两种方式的问题，对于本应用，我们采用了一种称为缓存型存储（或存储反归一化， Storage Denormalization）的思想来设计本应用的数据库结构。与直接存储不同的是，缓存 型存储是先将数据进行归一化，随后再将数据以最适合访问的方式进行冗余缓存，这样既保证了数据修改时的数据一致性，又使得数据能以较高的效率被访问。 本应用的数据库集合设计如下图所示。</p><figure><img src="denormalize_db.png" alt="denormalize_db" /><figcaption aria-hidden="true">denormalize_db</figcaption></figure><p>其中，用户集合包含了用户的全部基本信息，而宝物集合则维护了当前系统中能够被提供的全部宝物信息。持有物品集合中存储了所有玩家所拥有的物品及其相关状态，其在本应用中既用作玩家存储箱信息的维护，也用作市场上物品信息的维护。此外，根据实际的查询需求，我们对宝物集合的 gain 键建立了索引，对持有物品集合的 owner 和 status 两个键分别建立了索引。</p><p>更具体的，每个集合中各个键的数据类型定义如下表所示。</p><figure><img src="table_db_structure.png" alt="table_db_structure" /><figcaption aria-hidden="true">table_db_structure</figcaption></figure><p>这里需要注意的是，对于用户的头像，我们使用了一个对象标识符类型将其指向一个外部的位置。由于 MongoDB 采用了 BSON 作为其文档存储实现，其最大单个文档的大小限制为 4MB。而若要将用户头像这样的二进制数据直接存储在单个文档中，则很容易超过这一限制导致无法存储。为了解决这一问题，MongoDB 提供了一个名为 GridFS 的存储方案。通过将二进制文件拆分为多 个小块（Chunk，通常为 256KB/个），我们便可以将图片等媒体数据存储在数据库中。因此事实上该应用一共有 5 个集合，额外的两个集合（分别名为 fs.chunks 和 fs.files）分别用于存储 大文件的二进制数据及其块索引。</p><p>作为归一化集合，当数据进行更新时，用户集合和宝物集合拥有最高的更新优先级。持有物品集合作为本应用的缓存集合，包含了玩家可能频繁访问的全部物品数据。因此无论玩家是在访问自己的装备物品、存储箱还是市场上正在出售的物品时，我们都只需要访问持有物品这一个集合，极大地提高了数据查询的效率。</p><p>此外，为了保证数据一致性，在每一次应用启动时，系统都会对缓存集合中的数据进行检查。 由于缓存集合中记录了其他集合相关条目的唯一标识符，因此这一同步是可行的。当管理员需要进行某些更新(例如对某件宝物的属性进行调整时)，系统也会先更新宝物和用户集合，再将数据同步至持有物品集合中。</p><p>可以注意到，这里我们没有单独为市场设计一个缓存集合，这是由于用户查询市场上的物品就等价于查询所有玩家中 status=3 的物品，而我们已经对持有物品集合中的 status 键建立了索引，这一查询的效率是极高的，因此无需再另设一个集合专门对市场上的物品进行缓存。此外， 若再设一个缓存集合，则需要花费更高的代价去解决数据不一致的问题，得不偿失，可见这样做是并不合适的。</p><h4 id="odm-与数据库交互实现">ODM 与数据库交互实现</h4><p>MongoDB 提供了对 Python 的原生访问接口模块 pymongo。通过这一模块，我们可以使用和 命令行中类似的类 JSON 方式对数据库中的对象进行 CRUD（Create-Retrieve-Update-Delete）操作。然而，由于其没有与 Python 中对象的直接映射关系，我们无法快速获知当前操作对数据库及 Python 对象进行了怎样的数据变化，这样很容易使得操作逻辑变得不可控（尤其是考虑到文档型数据库中可以动态加入键值的特性）。</p><p>受到 MySQL 等关系型数据库中 ORM 概念的启发，对于对象型编程语言与数据库间的交互，一个极好的办法便是实用所谓的对象-文档映射（ODM，Object Document Mapping）模型。 通过将数据库中的对象映射为 Python 中的类，我们便可以直接使用 Python 中的类操作方法对数据库中的对象进行操作。由于每一个数据库文档中的键都与对象中的一个变量有一一对应关系，我们便可以随时掌握当前操作的内容及其可能的行为，这样就使得整个系统更易于维护。</p><p>幸运的是，对于 MongoDB，Python 中已经存在了一款十分完善的 ODM 实现模块 Mongo-Engine。对于本应用，我们直接使用专门针对 Flask 框架封装的 Flask-MongoEngine 来实现对应的 ODM 模型。对于上述提出的集合结构，其 ODM 模型申明代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">db.Document</span>):</span><br>username = db.StringField(required=<span class="hljs-literal">True</span>)<br>password = db.StringField(required=<span class="hljs-literal">True</span>)<br>nickname = db.StringField()<br>permission = db.IntField(default=<span class="hljs-number">1</span>) <span class="hljs-comment"># 1 - Player; 2 - Admin</span><br>  avatar = db.FileField()<br>coin = db.IntField(default=<span class="hljs-number">10</span>)<br>power = db.IntField(default=<span class="hljs-number">1</span>)<br>luck = db.IntField(default=<span class="hljs-number">1</span>)<br>regtime = db.DateTimeField(default=datetime.now()) tool_equipped = db.IntField(default=<span class="hljs-number">0</span>)<br>accessory_equipped = db.IntField(default=<span class="hljs-number">0</span>)<br>container_usage = db.IntField(default=<span class="hljs-number">0</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Treasure</span>(<span class="hljs-params">db.Document</span>):</span><br>name = db.StringField(required=<span class="hljs-literal">True</span>)<br>type = db.IntField(required=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 1 - Tools; 2 - Accessories</span><br>  gain = db.IntField()<br>meta = &#123;<br><span class="hljs-string">&#x27;indexes&#x27;</span>: [ <span class="hljs-string">&#x27;gain&#x27;</span><br>] &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Container</span>(<span class="hljs-params">db.Document</span>):</span><br>treasure_id = db.ObjectIdField(required=<span class="hljs-literal">True</span>)<br>treasure_name = db.StringField()<br>treasure_type = db.IntField()<br>treasure_gain = db.IntField()<br>owner = db.ObjectIdField(required=<span class="hljs-literal">True</span>)<br>owner_name = db.StringField()<br>status = db.IntField() <span class="hljs-comment"># 1 - Equipped; 2 - In inventory; 3 - On sale</span><br>  price = db.IntField() <span class="hljs-comment"># Only exists when status = 3</span><br>meta = &#123;<br><span class="hljs-string">&#x27;indexes&#x27;</span>: [ <span class="hljs-string">&#x27;owner&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span><br>] &#125;<br></code></pre></td></tr></table></figure><p>在该种映射模型下，数据库的 CRUD 操作变得异常简单。下面以用户表的一次 CRUD 操作 代码为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">user_create = User(username=username, password=password) <span class="hljs-comment"># Create</span><br>user_item = User.objects(username=username).first() <span class="hljs-comment"># Retrieve</span><br>user_item.nickname = abc <span class="hljs-comment"># Update</span><br>user_item.delete() <span class="hljs-comment"># Delete</span><br>user_create.save() <span class="hljs-comment"># Save</span><br></code></pre></td></tr></table></figure><h3 id="业务实现">业务实现</h3><h4 id="账户管理">账户管理</h4><p>对于玩家来说，一款游戏的账户管理系统主要涉及用户注册及用户登录两个功能，因此我们分别设计两个接口/register 及/login 来完成这一交互逻辑。</p><p>首先我们来设计注册接口。当用户发起注册请求时，我们首先从请求中拿到用户所要注册的用户名和密码，随后使用 MongoEngine 提供的查询语句查询数据库中用户名是否已经存在。若用户名不存在，则向数据库的 User 文档集合中插入一条新的用户文档，否则则报错。为了方便后续维护，我们约定/register 接口的返回状态码如下：</p><figure><img src="register_status.png" alt="register_status" /><figcaption aria-hidden="true">register_status</figcaption></figure><p>对于登录接口，我们首先从 request 请求体中获得用户名及密码，随后使用 MongoEngine 查询数据库中用户名符合的第一条记录（由于在注册时对数据库中是否存在重名用户进行了检查， 因此这里可以保证获得的第一条记录是整个数据库中唯一符合条件的记录）。得到记录后，我们只需要对其密码进行比对，并将判断结果返回给用户（前端）即可。</p><p>同样的，这里我们约定/login 接口的返回状态码如下：</p><figure><img src="login_status.png" alt="login_status" /><figcaption aria-hidden="true">login_status</figcaption></figure><p>对于账户管理页面的前端设计，我们使用了 Layout+Page 的模式对其进行了样式统一，并使 界面尽可能的保持简洁。其效果如下图所示。</p><figure><img src="login_page.png" alt="login_page" /><figcaption aria-hidden="true">login_page</figcaption></figure><figure><img src="register_page.png" alt="register_page" /><figcaption aria-hidden="true">register_page</figcaption></figure><h4 id="session-与用户组">Session 与用户组</h4><p>由于后续的请求中大量涉及到用户验证，若每次都需要在请求体中加入用户名和密码，则后续操作将会变得十分复杂，且由于用户信息始终在端与端之间传输，会造成极大的安全隐患。因此这里我们使用会话（Session）技术来保持用户的登录状态。同时，为了保证请求安全性，我们还需要对 Session 进行加密。</p><p>Flask原生提供了对Session的支持，我们可以直接使用键值对的方式对一个应用中的Session 进行操作。对于本应用，我们对除登录注册外的所有接口都设置了 Session 验证，当检测到用户发来的请求头中没有 Session 信息的话，则会直接返回 100 状态码告诉用户无权访问。</p><p>在实际场景下，有时我们需要对游戏中的内容进行更新操作（如添加新的可用宝物），为了方便这一操作，我们将其引入前端的交互界面中。然而一旦将修改全局数据库的操作暴露在公开接口中，我们就需要开始考虑操作的权限验证问题，否则就有可能产生安全问题。得益于 Session 用户验证机制，我们可以通过设置用户组来对用户的访问权限进行限制。</p><p>对于当前应用，我们进行如下的权限组约定：</p><figure><img src="permission_table.png" alt="permission_table" /><figcaption aria-hidden="true">permission_table</figcaption></figure><p>可以看到，在前面的数据库结构设计中，我们在用户集合中设置了一个 permission 键用于标识用户所在的组。当用户注册完成后，该键默认被设置为 1，且不可通过接口请求的方式进行更改。为了方便统一管理，我们将所有的管理员操作专门放到一个/admin 蓝图中。该蓝图中的所有接口均进行了用户组认证。当用户发起请求时，系统会首先检查请求头 Session 中包含的用户信息，若用户的权限组高于 2，则继续处理用户所请求的操作，否则直接返回用户码 2 告诉用户无权修改服务器。</p><p>对于不同的用户组，前端界面的呈现也进行了一定的区分。其中当用户为管理员时，菜单中会多出一栏管理员界面可供用户进行操作，这与常规游戏中的设计也基本吻合。</p><figure><img src="normal_player_navigate.png" alt="normal_player_navigate" /><figcaption aria-hidden="true">normal_player_navigate</figcaption></figure><figure><img src="command_player_navigate.png" alt="command_player_navigate" /><figcaption aria-hidden="true">command_player_navigate</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验要求&quot;&gt;实验要求&lt;/h2&gt;
&lt;p&gt;考虑以下游戏场景：&lt;/p&gt;
&lt;p&gt;每个游戏玩家都有一定数量的金币、宝物。有一个市场供玩家们买卖宝物。玩家可以将宝物放到市场上挂牌，自己确定价格。其他玩家支付足够的金币，可购买宝物。&lt;/p&gt;
&lt;p&gt;宝物分为两类:一类为工具，它决</summary>
      
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Database" scheme="http://gonggongjohn.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>树莓派在线教学系统</title>
    <link href="http://gonggongjohn.me/2021/06/29/web/remote-teaching/"/>
    <id>http://gonggongjohn.me/2021/06/29/web/remote-teaching/</id>
    <published>2021-06-29T03:28:35.000Z</published>
    <updated>2021-07-02T16:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树莓派部署">树莓派部署</h2><p>​ <strong>树莓派（Raspberry Pi）</strong>是由英国慈善组织“Raspberry Pi基金会”开发的一款ARM微型单片机，其具备了一台标准计算机的绝大部分功能，常被用于提供各类小型服务类应用及嵌入式产品驱动。本项目基于Raspberry Pi 4B型号进行开发。</p><p>​ 树莓派官方提供了一个基于Linux内核的专为树莓派硬件设计的<strong>Raspberry Pi OS</strong>操作系统，可以直接在其官网进行镜像的下载。这里我们使用当前最新版<strong>（Kernel Version: 5.10）</strong>进行开发。</p><a id="more"></a><p><img src="raspberry_os.png" alt="raspberry_os" style="zoom:50%;" /></p><p>​ 将系统烧录至SD卡并引导进入系统后，我们首先打开系统的SSH及VNC服务，使得其可以通过远程访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">&gt; sudo raspi-config<br></code></pre></td></tr></table></figure><p>在弹出的GUI界面中选择<strong>Interfacing Options</strong>，依次打开SSH及VNC配置项即可。</p><p>​ 接下来我们来为树莓派创建一个热点，使得其他设备可以连接到树莓派的WIFI网络中以通过局域网访问后续的教学网站页面。首先我们安装在系统中安装<strong>hostapd</strong>（一个类Unix系统下可以提供热点访问的服务端工具）和<strong>dnsmasq</strong>（一个用于配置DNS和DHCP的工具）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo apt-get install hostapd<br>&gt; sudo apt install dnsmasq<br></code></pre></td></tr></table></figure><p>在<strong>/etc/hostapd/</strong>目录下创建一个<strong>hostapd.conf</strong>配置文件，并在其中指定要创建热点的相关信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">interface</span>=wlan0<br><span class="hljs-attr">driver</span>=nl80211<br><span class="hljs-attr">ssid</span>=graspberry<br><span class="hljs-attr">hw_mode</span>=g<br><span class="hljs-attr">channel</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">wmm_enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">macaddr_acl</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">auth_algs</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">ignore_broadcast_ssid</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">wpa</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">wpa_passphrase</span>=<span class="hljs-number">1029384756</span><br><span class="hljs-attr">wpa_key_mgmt</span>=WPA-PSK<br><span class="hljs-attr">wpa_pairwise</span>=TKIP<br><span class="hljs-attr">rsn_pairwise</span>=CCMP<br></code></pre></td></tr></table></figure><p>随后我们将这一配置文件添加到<strong>/etc/default/hostapd</strong>中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DAEMON_CONF</span>=<span class="hljs-string">&quot;/etc/hostapd/hostapd.conf&quot;</span><br></code></pre></td></tr></table></figure><p>重启系统后，我们打开hostapd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo systemctl unmask hostapd<br>&gt; sudo systemctl <span class="hljs-built_in">enable</span> hostapd<br>&gt; sudo systemctl start hostapd<br></code></pre></td></tr></table></figure><p>现在，我们便可以在其他设备上搜索到树莓派的热点信号了：</p><p><img src="raspberry_hotspot.png" alt="raspberry_hotspot" style="zoom:50%;" /></p><p>连接热点后，我们只需要使用SSH工具，便可以远程访问树莓派：</p><p><img src="raspberry_ssh.png" alt="raspberry_ssh" style="zoom:50%;" /></p><p>​ 由于Raspberry Pi OS是Linux系统的一种，我们可以使用与开发环境类似的方式部署网站。首先我们从官网下载并安装Node运行环境包（https://nodejs.org/zh-cn/download/），并配置相应的环境变量：<strong>（.bash_profile）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NODE_HOME=/home/pi/ node-v14.17.2-linux-armv7l<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin <br><span class="hljs-built_in">export</span> NODE_PATH=<span class="hljs-variable">$NODE_HOME</span>/lib/node_modules<br></code></pre></td></tr></table></figure><p>随后我们使用apt-get安装<strong>MariaDB-Server</strong>作为服务端数据库环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo apt-get install mariadb-server-10.0<br></code></pre></td></tr></table></figure><p>以安全模式进入数据库并修改数据库默认密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo service mysql stop<br>&gt; sudo mysqld_safe --skip-grant-tables &amp;<br>&gt; mysql -u root<br>MariaDB&gt; update mysql.user <span class="hljs-built_in">set</span> authentication_string=PASSWORD(<span class="hljs-string">&#x27;1029384756&#x27;</span>), plugin=<span class="hljs-string">&#x27;mysql_native_password&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>&gt; sudo service mysql stop<br>&gt; sudo service mysql start<br></code></pre></td></tr></table></figure><p>现在我们的树莓派系统已经可以支持网页应用的部署了。</p><h2 id="系统构架">系统构架</h2><p>​ 整个树莓派在线教学系统分为<strong>用户端（前端）</strong>及<strong>服务端（后端）</strong>，其中用户端又分为<strong>学生端</strong>和<strong>教师端</strong>，其基本系统构架如下图所示：</p><figure><img src="structure.png" alt="structure" /><figcaption aria-hidden="true">structure</figcaption></figure><p>​ 可以看到，整个系统的构架是十分清晰的。用户首先通过用户管理系统登录在线教学系统，系统会根据教师或学生身份分别跳转到教师端的课程路由界面或学生端课程路由界面。随后，系统通过请求后端的课程数据库来返回用户当前参与或教授的所有课程，用户可根据界面提示进入到相应的课程界面中。对于一个课程界面，系统提供了签到、实时聊天、文件下载、在线答题及视频推流5个基本模块，每个模块经过后端路由再传递给服务器文件系统或另一学生/教师客户端。对于学生签到机制，后端会通过深度学习模型对前端传入的照片进行人脸识别，并将相应的签到结果传给教师客户端；而对于在线答题机制，则由教师端先上传一定格式的题目描述及答题限制，再由后端的试题结构解析器进行解析分发给学生客户端，当学生完成答题后，再通过路由送到后端进行结果统计，并将统计结果发送回教师端展示。</p><p>​ 以用户视角来看，教学系统的主体界面效果如下：</p><p><img src="lesson.png" alt="lesson" style="zoom:50%;" /></p><h2 id="quasar-framework与前端整合">Quasar Framework与前端整合</h2><p>​ 由于该网站的前端元素较为繁杂，我们需要一个合适易用的前端框架来避免大量不必要的重复编码。Quasar Framework是一款基于Vue.js的前端UI框架，其开箱即用和跨平台的属性使得我们可以快速的对各类UI元素进行整合。要构架Quasar Framework开发环境是容易的，Quasar官方提供了一个基于Vuex的脚手架，我们以此为起点来进行网站前端的构建。</p><p>​ 首先我们使用npm工具全局安装Quasar-CLI最新版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install -g @quasar/cli<br></code></pre></td></tr></table></figure><p>系统会自动安装相关的必要的组建，包括Vue-CLI脚手架（如果没有自动安装的话，可以手动安装Vue-CLI最新版本）。</p><p>随后，我们在目标位置使用Quasar-CLI生成一个前端开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; quasar create frontend<br></code></pre></td></tr></table></figure><p>系统会自动解析并生成所需的相应配置文件，并会在其中询问我们若干次相关参数的设置值，这里我们直接使用默认选项即可。</p><p><img src="quasar_create.png" alt="quasar_create" style="zoom:50%;" /></p><p>生成完成后，我们进入目录安装相应的Node依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install<br></code></pre></td></tr></table></figure><p>现在，我们的前端开发环境就配置完成了。我们可以使用如下命令即时查看开发效果，也可以对整个应用进行打包送至后端进行整合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; quasar dev <span class="hljs-comment"># 开发环境测试</span><br>&gt; quasar build <span class="hljs-comment"># 打包至生产环境</span><br></code></pre></td></tr></table></figure><p><img src="quasar_build.png" alt="quasar_build" style="zoom:50%;" /></p><p>​ Vue将<strong>布局（Layout）</strong>和<strong>页面（Page）</strong>进行了分离，使得在同种布局下网站中的内容可以进行缺省替换，这正是本项目所需要的。对于本项目，我们设计了两种不同的界面布局，分别用于用户管理和授课窗口。网站的前端路由结构如下图所示：</p><p><img src="frontend_structure.png" alt="frontend_structure" style="zoom:80%;" /></p><h2 id="express与后端路由">Express与后端路由</h2><p>​ 为了与前端达到最佳的适配，我们使用<strong>NodeJS+Express框架</strong>作为服务端的实现基础。与Quasar类似，Express同样提供了一个官方脚手架用于搭建后端的开发环境。我们只需使用npm工具全局安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install -g express<br>&gt; npm install -g express-generator<br></code></pre></td></tr></table></figure><p>安装完成后，我们在目标位置生成一个新的后端项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; express backend<br></code></pre></td></tr></table></figure><p>Express脚手架会在目标位置自动生成相关的依赖文件：</p><p><img src="express_create.png" alt="express_create" style="zoom:50%;" /></p><p>生成完后端环境后，我们进入目录，使用npm安装相应的依赖包，即可使用如下命令进行后端的测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; node bin/www<br></code></pre></td></tr></table></figure><p>​ 本项目后端路由的整体结构如图所示：</p><p><img src="backend_structure.png" alt="backend_structure" style="zoom:80%;" /></p><p>可以发现，除了根目录为网页推送接口，其他接口均为前端请求响应接口，故这些接口可以向用户隐去。此外，本项目还需要额外创建一个WebSocket服务器来响应实时的前后端数据交互请求。</p><h2 id="用户管理">用户管理</h2><p>​ 我们在数据库中创建一张表<strong>user</strong>来管理用户的基本信息。对于一个用户而言，我们需要记录其<strong>用户名（username）</strong>、<strong>密码（password）</strong>、<strong>邮箱（email）</strong>和<strong>身份（identity）</strong>。此外，我们还需要记录其<strong>参加/开设的课程编号（lessons）</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user(<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;username&#96; TEXT NOT NULL,<br>    &#96;password&#96; TEXT NOT NULL,<br>    &#96;email&#96; TEXT,<br>    &#96;identity&#96; INT NOT NULL,<br>    &#96;lessons&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>​ 用户的基本管理逻辑分为注册和登录。我们将两个逻辑分别封装在两个独立的函数中，并采用<strong>回调函数</strong>的方式让路由调用。对于用户登录，我们只需要查询表中是否存在对应username键和password键的行即可。由于Node.JS中的Mysql插件为<strong>异步</strong>访问的，这里我们需要使用<strong>Promise</strong>函数来确保其执行顺序。为了向回调函数提供统一的接口，我们使用<strong>status</strong>状态字来指示查询的结果和状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> login = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, password, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT username,password FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 未确定; 1 - 成功; 2 - 用户名不存在; 3 - 密码错误 */</span><br>        <span class="hljs-keyword">if</span>(result == <span class="hljs-literal">undefined</span> || result.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>].password == password)&#123;<br>            status = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            status = <span class="hljs-number">3</span>;<br>        &#125;<br>        callback(status);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 注册的逻辑同登录类似，只需将Mysql查询语句改为插入语句即可。这里需要注意的是，为了确保用户名的唯一性，我们在插入数据之前需首先查询表中是否已经存在对应的username键值，如果存在相同用户名，我们需要返回用户一个“用户名已存在”的错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> register = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, password, email, identity, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT username FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise_query = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_query.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 未确定; 1 - 成功; 2 - 用户名已存在 */</span><br>        <span class="hljs-keyword">if</span>(result.length &gt; <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql_str = <span class="hljs-string">&quot;INSERT INTO user(username, password, email, identity) VALUES (?,?,?,?)&quot;</span>;<br>            sql_param = [username, password, email, identity];<br>            <span class="hljs-keyword">var</span> promise_insert = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_insert.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;)<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="课程管理">课程管理</h2><p>​ 为了提高整个系统的可扩展性，我们希望能够并行的同时进行多个课程的在线教学。要做到这一点，我们需要将每个课程的工作环境隔离开来。幸运的是，在Mysql数据库中，我们可以创建一个唯一的ID使得其在每次插入数据的时候进行自增，因此我们可以直接使用这一ID作为课程的唯一标识。</p><p>​ 我们首先创建一张<strong>lesson</strong>表用于维护整个系统中的全局课程信息，这张表中应当维护<strong>课程名（name）</strong>、<strong>授课教师ID（teacher）</strong>及<strong>学生列表（students）</strong>三个关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE lesson(<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;name&#96; TEXT NOT NULL,<br>    &#96;teacher&#96; TEXT,<br>    &#96;students&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>​ 随后，我们需要封装一系列函数来对这一表格内容进行维护。当教师新创建一门课程时，前端会向教师询问课程名，并请求后端的<strong>/lesson_create</strong>口进行课程创建：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; margin-top: 2%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;create_btn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 3%&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建课程&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;createLesson = true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">q-dialog</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;createLesson&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-card</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-card-section</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">q-input</span> <span class="hljs-attr">outlined</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lesson_name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-pa-sm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[val =&gt; !!val || &#x27;课程名称不能为空！&#x27;]&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;课程名称&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建课程&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onCreateLesson&quot;</span> <span class="hljs-attr">v-close-popup</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">q-card-section</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">q-card</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-dialog</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lessonList&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">                createLesson: <span class="hljs-literal">false</span>,</span><br><span class="javascript">                lesson_name: <span class="hljs-string">&quot;&quot;</span>,</span><br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            onCreateLesson()&#123;<br><span class="javascript">                <span class="hljs-keyword">var</span> full_url = <span class="hljs-string">&#x27;lesson_create?name=&#x27;</span> + <span class="hljs-built_in">this</span>.lesson_name + <span class="hljs-string">&#x27;&amp;teacher=&#x27;</span> + <span class="hljs-built_in">this</span>.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.axios.get(full_url).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> status = response.data.status;</span><br>                    if(status == 1)&#123;<br><span class="javascript">                        alert(<span class="hljs-string">&quot;创建成功！&quot;</span>);</span><br>                    &#125;<br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Error occurred!&quot;</span>);</span><br>                    &#125;<br><span class="javascript">                &#125;).catch(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response);</span><br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建课程的基本逻辑为<strong>无重名确认-&gt;创建课程-&gt;查询课程ID-&gt;将课程信息添加到教师授课列表中</strong>，我们可以快速写出相应的实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> createLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name, teacher, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT name FROM lesson WHERE name=? AND teacher=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [name, teacher];<br>    <span class="hljs-keyword">var</span> promise_check = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_check, reject_check</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_check(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_check(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_check.then(<span class="hljs-function">(<span class="hljs-params">result_check</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 课程重名; 3 - 内部错误 */</span><br>        <span class="hljs-keyword">if</span>(result_check.length &gt; <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql_str = <span class="hljs-string">&quot;INSERT INTO lesson(name, teacher) VALUES (?,?)&quot;</span>;<br>            sql_param = [name, teacher];<br>            <span class="hljs-keyword">var</span> promise_create = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_create, reject_create</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_create(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_create(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_create.then(<span class="hljs-function">(<span class="hljs-params">result_create</span>) =&gt;</span> &#123;<br>                sql_str = <span class="hljs-string">&quot;SELECT id FROM lesson WHERE name=? AND teacher=?&quot;</span>;<br>                sql_param = [name, teacher];<br>                <span class="hljs-keyword">var</span> promise_getid = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_getid, reject_getid</span>)</span>&#123;<br>                    mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                        <span class="hljs-keyword">if</span>(err)&#123;<br>                            reject_getid(err);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span>&#123;<br>                            resolve_getid(result);<br>                        &#125;<br>                    &#125;);<br>                &#125;);<br>                promise_getid.then(<span class="hljs-function">(<span class="hljs-params">result_getid</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span>(result_getid == <span class="hljs-literal">undefined</span> || result_getid.length == <span class="hljs-number">0</span>)&#123;<br>                        status = <span class="hljs-number">3</span>;<br>                        callback(status);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        appendLesson(teacher, result_getid[<span class="hljs-number">0</span>].id, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">status_append</span>)</span>&#123;<br>                            <span class="hljs-keyword">if</span>(status_append != <span class="hljs-number">1</span>)&#123;<br>                                status = <span class="hljs-number">3</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span>&#123;<br>                                status = <span class="hljs-number">1</span>;<br>                                callback(status);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> appendLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, lesson_id, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 用户名不存在 */</span><br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">undefined</span> || lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                lesson_str = <span class="hljs-built_in">String</span>(lesson_id);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                lesson_str = lesson_str + <span class="hljs-string">&quot;,&quot;</span> + lesson_id;<br>            &#125;<br>            sql_str = <span class="hljs-string">&quot;UPDATE user SET lessons=? WHERE username=?&quot;</span>;<br>            sql_param = [lesson_str, username];<br>            <span class="hljs-keyword">var</span> promise_update = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_update, reject_update</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_update(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_update(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_update.then(<span class="hljs-function">(<span class="hljs-params">resule_update</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，由于MySQL中没有“数组”这一基本数据类型，因此我们使用字符串拼接的方式将课程ID以字符串的形式存储到用户的lessons字段中，当需要查询用户的课程列表时，再通过字符串拆分的方式将其还原为ID列表。</p><p>参与已有的课程与查询用户参与的课程列表的逻辑也基本类似，基本都是对通过课程ID作为唯一的键桥梁分别在user和lesson中进行查询操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getLessons = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> errno = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 无错误; 1 - 用户名不存在; 2 - 课程不存在 */</span><br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            errno = <span class="hljs-number">1</span>;<br>            callback(errno, <span class="hljs-literal">undefined</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                callback(errno, []);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">var</span> lesson_list = lesson_str.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-keyword">var</span> fetch_total = lesson_list.length;<br>                <span class="hljs-keyword">var</span> fetched_num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">var</span> promise_loop = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_loop, reject_loop</span>)</span>&#123;<br>                    <span class="hljs-keyword">var</span> detail_list = [];<br>                    lesson_list.forEach(<span class="hljs-function">(<span class="hljs-params">lesson</span>) =&gt;</span> &#123;<br>                        sql_str = <span class="hljs-string">&quot;SELECT name,teacher FROM lesson where id=?&quot;</span>;<br>                        sql_param = [lesson];<br>                        <span class="hljs-keyword">var</span> promise_detail = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_detail, reject_detail</span>)</span>&#123;<br>                            mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                                <span class="hljs-keyword">if</span>(err)&#123;<br>                                    reject_detail(err);<br>                                &#125;<br>                                <span class="hljs-keyword">else</span>&#123;<br>                                    resolve_detail(result);<br>                                &#125;<br>                            &#125;);<br>                        &#125;);<br>                        promise_detail.then(<span class="hljs-function">(<span class="hljs-params">result_detail</span>) =&gt;</span> &#123;<br>                            <span class="hljs-keyword">if</span>(result_detail == <span class="hljs-literal">undefined</span> || result_detail.length == <span class="hljs-number">0</span>)&#123;<br>                                errno = <span class="hljs-number">2</span>;<br>                                reject_loop(<span class="hljs-string">&quot;Lesson doesn&#x27;t exist!&quot;</span>);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span>&#123;<br>                                detail_list.push(&#123;<span class="hljs-attr">id</span>: lesson, <span class="hljs-attr">name</span>: result_detail[<span class="hljs-number">0</span>].name, <span class="hljs-attr">teacher</span>: result_detail[<span class="hljs-number">0</span>].teacher&#125;);<br>                                fetched_num += <span class="hljs-number">1</span>;<br>                                <span class="hljs-keyword">if</span>(fetched_num == fetch_total)&#123;<br>                                    resolve_loop(detail_list);<br>                                &#125;<br>                            &#125;<br>                        &#125;);<br>                    &#125;);<br>                &#125;);<br>                promise_loop.then(<span class="hljs-function">(<span class="hljs-params">result_loop</span>) =&gt;</span> &#123;<br>                    callback(errno, result_loop);<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> appendLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, lesson_id, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 用户名不存在 */</span><br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">undefined</span> || lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                lesson_str = <span class="hljs-built_in">String</span>(lesson_id);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                lesson_str = lesson_str + <span class="hljs-string">&quot;,&quot;</span> + lesson_id;<br>            &#125;<br>            sql_str = <span class="hljs-string">&quot;UPDATE user SET lessons=? WHERE username=?&quot;</span>;<br>            sql_param = [lesson_str, username];<br>            <span class="hljs-keyword">var</span> promise_update = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_update, reject_update</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_update(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_update(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_update.then(<span class="hljs-function">(<span class="hljs-params">resule_update</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们可以在界面中自由创建/加入并随时查看当前参与的课程了：</p><p><img src="lesson_list_page.png" alt="lesson_list_page" style="zoom:50%;" /></p><h2 id="文件管理">文件管理</h2><p>​ 接下来我们来实现文件共享的功能。Quasar Framework提供了一个用于文件上传的UI组件，我们可以直接通过调用它来提示用户选择文件并发送至后端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">q-uploader</span></span><br><span class="hljs-tag">            <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file_upload&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:headers</span>=<span class="hljs-string">&quot;[&#123;name: &#x27;lesson_id&#x27;, value: this.lesson_id &#125;]&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">field-name</span>=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里为了方便后续的资源隔离，我们在其发送的请求头中加入了课程ID号。</p><p>​ Quasar文件上传器使用了HTTP协议进行文件上传，因此我们需要在后端实现符合这一协议的文件接受通道。这里我们使用了一个名为<strong>multer</strong>的NodeJS插件，它可以以极高的效率处理前端发来的文件数据。我们先在服务端文件系统上新建一个file_upload目录，用于专门管理课堂中的共享资源。随后，我们在后端路由中附上这一组件，并将接收到的文件统一保存至file_upload目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><span class="hljs-keyword">var</span> file_upload = multer(&#123;<span class="hljs-attr">dest</span>: <span class="hljs-string">&#x27;file_upload/&#x27;</span>&#125;);<br><br>router.post(<span class="hljs-string">&#x27;/file_upload&#x27;</span>, file_upload.single(<span class="hljs-string">&#x27;file&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>)</span>&#123;<br>  file.file_redirect(request.file.destination, request.file.path, request.headers.lesson_id, request.file.originalname, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;);<br>    response.write(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">1</span>&#125;));<br>    response.end();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于需要支持多个课堂同时进行，我们需要将每个课程的资源隔离。为此，我们在创建课程时，为每个课程创建一个相应的子目录，以课程ID作为目录名。随后，我们封装一个文件重定位函数，当multer将前端发来的文件保存到目标位置后，随即将其移动至相应的子文件夹下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> file_redirect = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">origin_path, origin_fullname, lesson_id, target_name, callback</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(origin_path, origin_fullname, lesson_id, target_name);<br>    fs.exists(origin_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>          fs.mkdir(origin_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>              <span class="hljs-built_in">console</span>.log(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>              fs.rename(origin_fullname, origin_path + lesson_id + <span class="hljs-string">&quot;/&quot;</span> + target_name, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(err)&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Rename error!&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    callback();<br>                &#125;<br>              &#125;);<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            fs.rename(origin_fullname, origin_path + lesson_id + <span class="hljs-string">&quot;/&quot;</span> + target_name, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>              <span class="hljs-keyword">if</span>(err)&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Rename error!&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">else</span>&#123;<br>                  callback();<br>              &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 现在，我们可以正常将文件上传至服务端并共享给其他用户了：</p><p><img src="file_upload.png" alt="file_upload" style="zoom:50%;" /></p><p>​ 对于学生端而言，每当学生用户进入课程时，我们只需要列出对应文件夹下的文件名，并将其发回给前端，就可以让用户随时看到课堂中的所有共享文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list_files = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">base_path, lesson_id, callback</span>)</span>&#123;<br>    fs.exists(base_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>            callback([]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            fs.readdir(base_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(err)&#123;<br>                    <span class="hljs-built_in">console</span>.log(err);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    callback(data);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 当一个客户端请求下载某个课堂中的文件时，我们可以使用NodeJS自带的fs插件中的流式传输功能，将其输出管道重定向到请求回应流中即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.get(<span class="hljs-string">&#x27;/file_download&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> lesson_id = request.query.id;<br>  <span class="hljs-keyword">var</span> filename = request.query.filename;<br>  <span class="hljs-keyword">if</span>(lesson_id == <span class="hljs-literal">undefined</span> || filename == <span class="hljs-literal">undefined</span>)&#123;<br>    response.end();<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>,<br>      <span class="hljs-string">&#x27;Content-Disposition&#x27;</span>: <span class="hljs-string">&#x27;attachment; filename=&#x27;</span> + <span class="hljs-built_in">encodeURI</span>(filename)<br>    &#125;);<br>    fs.createReadStream(<span class="hljs-string">&#x27;file_upload/&#x27;</span> + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span> + filename).pipe(response);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>至此，我们已经实现了一个基本的文件共享功能，效果如下：</p><p><img src="file_download.png" alt="file_download" style="zoom:50%;" /></p><h2 id="实时做题">实时做题</h2><p>​ 在在线课堂系统中，有时教师希望能够即时给学生分发一道课堂练习，并实时看到学生的答题状况，这就需要我们实现一套在线做题系统。</p><p>​ 在线做题首先需要教师端上传一道指定的题目。以选择题为例，为了方便结构化解析，我们要求教师上传一个固定格式的json文件作为题目（当然也可使用深度学习技术自动解析非结构化的题目信息，不过这一工程量将大幅度增长，在此我们不做讨论）：</p><p><img src="problem_upload.png" alt="problem_upload" style="zoom:50%;" /></p><p>​ 题目共享功能实现的主体思路与文件共享类似，我们只需要让教师端将题目以文件的形式发送给服务端，再通过服务端将题目分发给学生端即可。不过，为了让用户即时看到可阅读的题目信息，我们还需要在后端将题目文件解析为格式化信息，并通过json字符串的方式将结构化的题目发送给前端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> get_problem = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">problem_base, lesson_id, callback</span>)</span>&#123;<br>    fs.exists(problem_base + lesson_id + <span class="hljs-string">&#x27;/question.json&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 读取成功; 2 - 文件不存在; 3 - 读取错误 ;*/</span><br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status, <span class="hljs-literal">undefined</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> data = fs.readFileSync(problem_base + lesson_id + <span class="hljs-string">&#x27;/question.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> data == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status, data);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                status = <span class="hljs-number">3</span>;<br>                callback(status, <span class="hljs-literal">undefined</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>前端展示实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 3%; margin-left: 3%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 5%&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;上传题目&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onProblemUpload&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-form</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;onSubmitAnswer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-gutter-md&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> 实时题目 <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;problem_description&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-option-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;chosen_answer&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;answer_options&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;提交答案&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lesson&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                problem_description: <span class="hljs-string">&quot;3466645r15&quot;</span>,</span><br><span class="javascript">                chosen_answer: <span class="hljs-string">&quot;&quot;</span>,</span><br>                answer_options: [<br>                    &#123;<br><span class="javascript">                        label: <span class="hljs-string">&quot;Answer1&quot;</span>,</span><br><span class="javascript">                        value: <span class="hljs-string">&quot;A&quot;</span></span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br>        &#125;,<br>        methods: &#123;<br>            onInitLesson()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.$route.query.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.lesson_id = <span class="hljs-built_in">this</span>.$route.query.lesson_id;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.getProblem();</span><br>            &#125;,<br>            getProblem()&#123;<br><span class="javascript">                <span class="hljs-keyword">var</span> full_url = <span class="hljs-string">&#x27;problem_get?id=&#x27;</span> + <span class="hljs-built_in">this</span>.lesson_id;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.axios.get(full_url).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> problem_json = response.data;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(problem_json != <span class="hljs-literal">undefined</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.problem_description = problem_json.description;</span><br><span class="javascript">                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> problem_json.options)&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">this</span>.answer_options.push(&#123;</span><br>                                label: problem_json.options[key],<br>                                value: key<br>                            &#125;);<br>                        &#125;<br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.answer_options);</span><br>                    &#125;<br><span class="javascript">                &#125;).catch(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response);</span><br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 现在，学生用户已经可以随时接受教师下发的课堂练习并做答了。接下来，我们需要让教师端能够实时得到学生的做题反馈。为了实现这一功能，我们需要让前端实时监听后端的数据变化，并在后端产生数据变化时发送消息给前端。在NodeJS中，我们可以使用WebSocket插件来实现。</p><p>​ 首先，我们在服务端创建一个WebSocket服务器，并监听8000端口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;nodejs-websocket&#x27;</span>);<br><br><span class="hljs-keyword">var</span> ws_server = ws.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>)</span>&#123;<br>  <span class="hljs-comment">//Irrelevant codes</span><br>&#125;).listen(<span class="hljs-number">8000</span>);<br></code></pre></td></tr></table></figure><p>当学生前端点击提交答案按钮时，我们通过这一端口将回答信息通知给后端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 3%; margin-left: 3%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-form</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;onSubmitAnswer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-gutter-md&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> 实时题目 <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;problem_description&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-option-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;chosen_answer&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;answer_options&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;提交答案&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lesson&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                chosen_answer: <span class="hljs-string">&quot;&quot;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> full_path = <span class="hljs-built_in">window</span>.document.location.href;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> route_path = <span class="hljs-built_in">this</span>.$route.path;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path = full_path.substring(<span class="hljs-number">7</span>, full_path.indexOf(route_path));</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path_stripped = base_path.substring(<span class="hljs-number">0</span>, base_path.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://&quot;</span> + base_path_stripped + <span class="hljs-string">&quot;:8000&quot;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onopen = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Websocket连接成功！&quot;</span>)</span><br>            &#125;<br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onmessage = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(event.data);</span><br>            &#125;<br>        &#125;,<br><span class="javascript">        destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.close();</span><br>        &#125;,<br>        methods: &#123;<br>            onSubmitAnswer()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.web_socket.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&quot;problem_answer&quot;</span>, <span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.username, <span class="hljs-attr">lesson_id</span>: <span class="hljs-built_in">this</span>.lesson_id, <span class="hljs-attr">answer</span>: <span class="hljs-built_in">this</span>.chosen_answer&#125;));</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于每一个课程实例，服务端维护着一个当前题目的回答列表，每当后端收到前端发来的回答通知时，便将对应的计数器加一。随后，服务端会通知教师客户端更新实时统计信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws_server = ws.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> answer_status = &#123;<br>    <span class="hljs-string">&quot;6&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;B&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;D&quot;</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>  socket.on(<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> obj=<span class="hljs-built_in">JSON</span>.parse(str);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj == <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj )&#123;<br>          <span class="hljs-keyword">if</span>(obj.type == <span class="hljs-string">&quot;problem_answer&quot;</span>)&#123;<br>            <span class="hljs-keyword">var</span> lesson_id = obj.lesson_id;<br>            <span class="hljs-keyword">var</span> answer = obj.answer;<br>            <span class="hljs-keyword">if</span>(lesson_id != <span class="hljs-literal">undefined</span> &amp;&amp; answer != <span class="hljs-literal">undefined</span>)&#123;<br>              answer_status[lesson_id][answer] += <span class="hljs-number">1</span>;<br>              ws_server.connections.forEach(<span class="hljs-function">(<span class="hljs-params">connection</span>) =&gt;</span> &#123;<br>                connection.sendText(<span class="hljs-built_in">JSON</span>.stringify(answer_status));<br>              &#125;);<br>            &#125;<br>          &#125;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Error phasing json!&quot;</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125;<br>  &#125;);<br>&#125;).listen(<span class="hljs-number">8000</span>);<br></code></pre></td></tr></table></figure><p>对于前端统计信息，这里我们使用Echarts图表的形式将答题的即时情况展现给教师：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;answer_chart&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;problemStatistics&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                web_socket: <span class="hljs-literal">null</span>,</span><br><span class="javascript">                chart: <span class="hljs-literal">null</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> echarts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.chart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;answer_chart&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.chart.setOption(&#123;</span><br><span class="javascript">                title: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学生实时答题情况统计&#x27;</span> &#125;,</span><br>                tooltip: &#123;&#125;,<br>                xAxis: &#123;<br><span class="javascript">                    data: [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>]</span><br>                &#125;,<br>                yAxis: &#123;&#125;,<br>                series: [&#123;<br><span class="javascript">                    name: <span class="hljs-string">&#x27;选择人数&#x27;</span>,</span><br><span class="javascript">                    type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br>                    data: [0, 0, 0, 0]<br>                &#125;]<br>            &#125;);<br><span class="javascript">            <span class="hljs-keyword">var</span> full_path = <span class="hljs-built_in">window</span>.document.location.href;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> route_path = <span class="hljs-built_in">this</span>.$route.path;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path = full_path.substring(<span class="hljs-number">7</span>, full_path.indexOf(route_path));</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path_stripped = base_path.substring(<span class="hljs-number">0</span>, base_path.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://&quot;</span> + base_path_stripped + <span class="hljs-string">&quot;:8000&quot;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onopen = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Websocket连接成功！&quot;</span>)</span><br>            &#125;<br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onmessage = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> latest_data = <span class="hljs-built_in">JSON</span>.parse(event.data);</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(latest_data != <span class="hljs-literal">undefined</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> stat_dict = latest_data[<span class="hljs-built_in">this</span>.lesson_id];</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> x_tags = [];</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> y_values = [];</span><br><span class="javascript">                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> stat_dict)&#123;</span><br>                        x_tags.push(key);<br>                        y_values.push(stat_dict[key]);<br>                    &#125;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.refreshChart(x_tags, y_values);</span><br>                &#125;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            onInitLesson()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.$route.query.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.lesson_id = <span class="hljs-built_in">this</span>.$route.query.lesson_id;</span><br>            &#125;,<br>            refreshChart(x, y)&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.chart.setOption(&#123;</span><br><span class="javascript">                title: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学生实时答题情况统计&#x27;</span> &#125;,</span><br>                tooltip: &#123;&#125;,<br>                xAxis: &#123;<br>                    data: x<br>                &#125;,<br>                yAxis: &#123;&#125;,<br>                series: [&#123;<br><span class="javascript">                    name: <span class="hljs-string">&#x27;选择数&#x27;</span>,</span><br><span class="javascript">                    type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br>                    data: y<br>                &#125;]<br>            &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面效果如下：</p><p><img src="problem_stat.png" alt="problem_stat" style="zoom:50%;" /></p><h2 id="快速签到">快速签到</h2><h2 id="视频推流">视频推流</h2><h2 id="远程访问">远程访问</h2><p>​ 至此，我们已经实现了树莓派在线教学系统的绝大部分基本功能。我们将其通过SFTP上传至树莓派中的目标目录下，并启动服务。通过树莓派提供的热点，我们在另一台设备上远程访问树莓派的网站接口，发现其已经可以正常工作：</p><p><img src="remote_comp.png" alt="remote_comp" style="zoom:50%;" /></p><p>同样的，我们也可以使用移动端访问树莓派上的教学服务：</p><p><img src="remote_phone.PNG" alt="remote_phone" style="zoom:30%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;树莓派部署&quot;&gt;树莓派部署&lt;/h2&gt;
&lt;p&gt;​ &lt;strong&gt;树莓派（Raspberry Pi）&lt;/strong&gt;是由英国慈善组织“Raspberry Pi基金会”开发的一款ARM微型单片机，其具备了一台标准计算机的绝大部分功能，常被用于提供各类小型服务类应用及嵌入式产品驱动。本项目基于Raspberry Pi 4B型号进行开发。&lt;/p&gt;
&lt;p&gt;​ 树莓派官方提供了一个基于Linux内核的专为树莓派硬件设计的&lt;strong&gt;Raspberry Pi OS&lt;/strong&gt;操作系统，可以直接在其官网进行镜像的下载。这里我们使用当前最新版&lt;strong&gt;（Kernel Version: 5.10）&lt;/strong&gt;进行开发。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Web" scheme="http://gonggongjohn.me/tags/Web/"/>
    
    <category term="Frontend" scheme="http://gonggongjohn.me/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 内存管理</title>
    <link href="http://gonggongjohn.me/2021/06/08/os/os-exp-memory/"/>
    <id>http://gonggongjohn.me/2021/06/08/os/os-exp-memory/</id>
    <published>2021-06-08T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:33.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>修改Minix3.1.2a的内存分配机制，使得当调用brk系统调用时，系统重新给进程分配一块更大的空间并将数据复制至新空间中。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>将Minix系统中的内存分配机制由<strong>First-Fit</strong>修改为<strong>Best-Fit</strong>。</li><li>修改<strong>brk</strong>系统调用行为，使得当被调用时系统重新开辟空间并分配给进程。</li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix3.1.2a的内存管理策略">Minix3.1.2a的内存管理策略</h3><p>在较早的Minix3版本中，内存管理机制是十分固定和清晰的（Minix3.1.4引入了页式存储管理，使得分配给进程的内存空间可能实际分布在内存地址的各个地方）。系统的<strong>进程管理器（Process Manager）</strong>维护一个空闲空间列表，根据内存地址从低到高排列：</p><img src="/2021/06/08/os/os-exp-memory/free_list.png" class="" title="free_list"><p>当一个进程请求内存时，进程管理器会采用最先匹配法在空闲列表中找到第一个符合要求的空闲区，并将其分配给该进程。一旦进程被装入内存后，该片内存空间就被固定了下来，不会再被扩展。</p><p>Minix3的程序大多被编译为进程的各个部分共用一个内存块的形式以方便作为一个整体进行加载，其中，栈和数据/代码段分别位于内存空间的顶部和底部，整体结构大体如下：</p><img src="/2021/06/08/os/os-exp-memory/minix_program.png" class="" title="minix_program"><h3 id="内存分配原则修改">内存分配原则修改</h3><p>Minix系统中的空闲块由一个链接来维护其元信息，其单元结构如下：<strong>（include/minix/type.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Memory allocation by PM. */</span>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> &#123;</span>  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> *<span class="hljs-title">h_next</span>;</span>          <span class="hljs-comment">/* pointer to next entry on the list */</span>  <br>  phys_clicks h_base;           <span class="hljs-comment">/* where does the hole begin? */</span>  <br>  phys_clicks h_len;            <span class="hljs-comment">/* how big is the hole? */</span>  <br>&#125;;<br></code></pre></td></tr></table></figure><p>在Minix3.1.2a中，内存分配遵循首次<strong>适配原则（First-Fit）</strong>，即在遍历到第一个能够容纳该进程的空闲块时，便将这一空闲块分配给进程。</p><p>现在我们来将这一分配机制修改为<strong>最优适配原则（Best-Fit）</strong>。Best-Fit原则需要遍历整个空闲块链表，找出与进程所需空间最接近的空闲块。由于要保证空闲块大小大于进程所需内存大小，因此我们采用外部逼近的更新思路来实现。若在现有的空闲块中能够找到满足要求的空闲块，我们还需要更新空闲块的信息并将已被完全分配的空闲块从空闲链表中移出：<strong>（servers/pm/alloc.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC phys_clicks <span class="hljs-title">alloc_mem</span><span class="hljs-params">(clicks)</span>  </span><br><span class="hljs-function">phys_clicks clicks</span>;     <span class="hljs-comment">/* amount of memory requested */</span>  <br>&#123;  <br>    <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> *<span class="hljs-title">hp</span>, *<span class="hljs-title">prev_ptr</span>,*<span class="hljs-title">best</span>,*<span class="hljs-title">prev_best</span>;</span>  <br>    phys_clicks old_base,best_clicks;  <br>    <span class="hljs-keyword">int</span> flag= <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">do</span> &#123;  <br>        prev_ptr = NIL_HOLE;  <br>        hp = hole_head;  <br>        <span class="hljs-comment">//Procedure of finding the best-fit block  </span><br>        <span class="hljs-keyword">while</span> (hp != NIL_HOLE &amp;&amp; hp-&gt;h_base &lt; swap_base) &#123;   <br>            <span class="hljs-keyword">if</span> (hp-&gt;h_len &gt;= clicks) &#123;  <br>                <span class="hljs-keyword">if</span>(!flag)&#123;  <br>                    best = hp;  <br>                    prev_best=prev_ptr;  <br>                    flag=<span class="hljs-number">1</span>;  <br>                    best_clicks=best-&gt;h_len;  <br>                &#125;  <br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag &amp;&amp; hp-&gt;h_len&lt;best_clicks)&#123;    <br>                    best=hp;  <br>                    prev_best=prev_ptr;  <br>                    best_clicks=best-&gt;h_len;  <br>                &#125;  <br>            &#125;  <br>            prev_ptr = hp;  <br>            hp = hp-&gt;h_next;  <br>        &#125;  <br>    &#125; <span class="hljs-keyword">while</span> (swap_out());       <span class="hljs-comment">/* try to swap some other process out */</span>  <br>    <span class="hljs-comment">//Update the status of the hole  </span><br>    <span class="hljs-keyword">if</span> (flag)&#123;    <br>        old_base = best-&gt;h_base;    <br>        best-&gt;h_base += clicks;    <br>        best-&gt;h_len -= clicks;   <br>  <br>        <span class="hljs-keyword">if</span> (best-&gt;h_base &gt; high_watermark)    <br>        high_watermark = best-&gt;h_base;  <br>  <br>        <span class="hljs-keyword">if</span> (best-&gt;h_len == <span class="hljs-number">0</span>) del_slot(prev_best,best);    <br>  <br>        <span class="hljs-keyword">return</span>(old_base);  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">return</span>(NO_MEM);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存申请行为修改">内存申请行为修改</h3><p>在Minix3.1.2中，系统为进程分配的内存空间是不可变的。一旦进程使用完了分配的空间，程序便将报错退出，这可以在系统代码中直观的体现出来：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">adjust</span><span class="hljs-params">(rmp, data_clicks, sp)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">/* whose memory is being adjusted? */</span>  <br>vir_clicks data_clicks;     <span class="hljs-comment">/* how big is data segment to become? */</span>  <br>vir_bytes sp;           <span class="hljs-comment">/* new value of sp */</span>  <br>&#123;  <br>  <span class="hljs-comment">//Irrelevant code  </span><br>  <span class="hljs-keyword">if</span> (lower &lt; gap_base) <span class="hljs-keyword">return</span>(ENOMEM);  <span class="hljs-comment">/* data and stack collided */</span>  <br>  <span class="hljs-comment">//Irrelevant code  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来修改这一行为。首先我们定义一个新的局部函数用于分配新的内存：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">allocate_new_mem</span><span class="hljs-params">(rmp,old_clicks)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">//Pointer of target process  </span><br>phys_clicks old_clicks; <span class="hljs-comment">//Original space size</span><br></code></pre></td></tr></table></figure><p>并在检测到程序空间不足时调用这一函数：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0</span><br><br><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">adjust</span><span class="hljs-params">(rmp, data_clicks, sp)</span>    </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">/* whose memory is being adjusted? */</span>    <br>vir_clicks data_clicks;     <span class="hljs-comment">/* how big is data segment to become? */</span>    <br>vir_bytes sp;           <span class="hljs-comment">/* new value of sp */</span>    <br>&#123;    <br>    <span class="hljs-comment">//Irrelevant code    </span><br>    <span class="hljs-keyword">if</span> (lower &lt; gap_base) &#123;<span class="hljs-comment">/* data and stack collided */</span>  <br>      <span class="hljs-keyword">if</span> (allocate_new_mem(rmp, (phys_clicks)(mem_sp-&gt;mem_vir+mem_sp-&gt;mem_len-mem_dp-&gt;mem_vir)) == ERROR)  <br>            <span class="hljs-keyword">return</span>(ENOMEM);  <br>    &#125;     <br>    <span class="hljs-comment">//Irrelevant code    </span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来实现内存空间的更新。<strong>allocate_new_mem</strong>中需要完成以下几个任务：</p><p><strong>1)</strong> <strong>分配一块比原先更大的内存空间</strong></p><p><strong>2)</strong> <strong>将远数据段和栈段分别复制至新空间的对应位置</strong></p><p><strong>3)</strong> <strong>释放原内存空间</strong></p><p><strong>4)</strong> <strong>通知系统映射新内存段</strong></p><p>受<strong>动态表（Dynamic Table）</strong>的启发，我们在每次需要扩展空间时将空间大小扩展至原来的两倍。在Minix中，进程的栈段和数据段基地址均被存放在其进程管理表（Process Management Table）中：<strong>（servers/pm/mproc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">EXTERN <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mproc</span> &#123;</span>  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_map</span> <span class="hljs-title">mp_seg</span>[<span class="hljs-title">NR_LOCAL_SEGS</span>];</span> <span class="hljs-comment">/* points to text, data, stack */</span>  <br>  <span class="hljs-comment">//Irrelevant codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中mp_seg[1]为数据段基地址，mp_seg[2]为栈段基地址，因此我们可以直接读取这一地址并根据新分配的空间大小计算出新的基地址。对于内存内容拷贝，Minix提供了一个现成的sys_abscopy函数可供我们使用：<strong>（include/minix/syslib.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sys_abscopy(src_phys, dst_phys, bytes) \  </span><br>    sys_physcopy(NONE, PHYS_SEG, src_phys, NONE, PHYS_SEG, dst_phys, bytes)  <br>_PROTOTYPE(<span class="hljs-keyword">int</span> sys_physcopy, (<span class="hljs-keyword">int</span> src_proc, <span class="hljs-keyword">int</span> src_seg, vir_bytes src_vir,  <br>    <span class="hljs-keyword">int</span> dst_proc, <span class="hljs-keyword">int</span> dst_seg, vir_bytes dst_vir, phys_bytes bytes));<br></code></pre></td></tr></table></figure><p>同样，对于内存释放，系统也封装了相应的函数：<strong>（servers/pm/proto.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_PROTOTYPE( <span class="hljs-keyword">void</span> free_mem, (phys_clicks base, phys_clicks clicks)   );<br></code></pre></td></tr></table></figure><p>于是我们便可以快速实现这一完整逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">allocate_new_mem</span><span class="hljs-params">(rmp,old_clicks)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>;  <br>phys_clicks old_clicks;  <br>&#123;     <br>    <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_map</span> *<span class="hljs-title">mem_sp</span>, *<span class="hljs-title">mem_dp</span>;</span>  <br>    phys_clicks new_clicks, old_base,new_base;  <br>    phys_clicks  old_stack_base,new_stack_base;  <br>     <br>      <br>    phys_bytes data_bytes,stak_bytes;  <br>    phys_bytes old_base_bytes,new_base_bytes;  <br>    phys_bytes old_stack_base_bytes,new_stack_base_bytes;  <br>      <br>    <span class="hljs-keyword">int</span> x;  <br>      <br>    mem_dp = &amp;rmp-&gt;mp_seg[D];    <span class="hljs-comment">/* Pointer to data segment */</span>  <br>    mem_sp = &amp;rmp-&gt;mp_seg[S];  <span class="hljs-comment">/* Pointer to stack segment */</span>  <br>      <br>    old_base=mem_dp-&gt;mem_phys;  <br>    old_stack_base=mem_sp-&gt;mem_phys;  <br>      <br>    data_bytes=(phys_bytes) mem_dp-&gt;mem_len &lt;&lt; CLICK_SHIFT;    <br>    stak_bytes=(phys_bytes) mem_sp-&gt;mem_len &lt;&lt; CLICK_SHIFT;    <br>    old_base_bytes=old_base &lt;&lt; CLICK_SHIFT;    <br>    old_stack_base_bytes=old_stack_base &lt;&lt; CLICK_SHIFT;    <br>      <br>    new_clicks=<span class="hljs-number">2</span>*old_clicks;  <br>    new_base=alloc_mem(new_clicks);  <br>    <span class="hljs-keyword">if</span>(new_base==NO_MEM)&#123;  <br>      <span class="hljs-keyword">return</span>(ERROR);  <br>    &#125;  <br>      <br>    new_base_bytes = (phys_bytes) new_base &lt;&lt; CLICK_SHIFT;  <br>      <br>    <span class="hljs-keyword">if</span> ((x=sys_memset(<span class="hljs-number">0</span>,new_base_bytes,(new_clicks&lt;&lt;CLICK_SHIFT)))!=OK)&#123;    <br>      panic(__FILE__,<span class="hljs-string">&quot;new mem can&#x27;t be zero&quot;</span>,x);  <br>    &#125;  <br>  <br>      <br>    new_stack_base=new_base+new_clicks-mem_sp-&gt;mem_len;  <br>    new_stack_base_bytes=new_stack_base &lt;&lt; CLICK_SHIFT;  <br>      <br>      <br>      <br>    x = sys_abscopy(old_base_bytes,new_base_bytes,data_bytes);  <br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> ) panic(__FILE__,<span class="hljs-string">&quot;allocate_new_mem can&#x27;t copy&quot;</span>,x);  <br>    x = sys_abscopy( old_stack_base_bytes,new_stack_base_bytes,stak_bytes);  <br>    <span class="hljs-keyword">if</span> ( x &lt; <span class="hljs-number">0</span> ) panic(__FILE__,<span class="hljs-string">&quot;allocate_new_mem can&#x27;t copy&quot;</span>,x);  <br>      <br>     <br>    rmp-&gt;mp_seg[D].mem_phys = new_base;  <br>    rmp-&gt;mp_seg[S].mem_phys = new_stack_base;  <br>    rmp-&gt;mp_seg[S].mem_vir = mem_dp-&gt;mem_vir+new_clicks-mem_sp-&gt;mem_len;  <br>    free_mem(old_base,old_clicks);  <br>  <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="功能测试">功能测试</h3><p>现在我们可以来重编译系统并测试新实现的内存扩展功能了。由于Minix3.1.2a开发时间较早，需要手动安装新内核并将其加入开机菜单中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">/usr/src/servers&gt; make image  <br>/usr/src/tools&gt; make hdboot  <br>/usr/src/tools&gt; make install  <br>d0p0s0&gt; newminix(<span class="hljs-number">5</span>,start <span class="hljs-keyword">new</span> kernel) &#123;image=/boot/image/<span class="hljs-number">3.1</span><span class="hljs-number">.2</span>ar1;boot;&#125;<br></code></pre></td></tr></table></figure><p><strong>需要注意的是，Minix3.1.2a不支持VirtualBox的网卡配置，因此若使用VirtualBox进行调试，将无法通过主机使用SSH服务与Minix联通，需手动在虚拟机环境内修改代码。</strong></p><p>首先我们对使用sbrk调用对内存分配进行基本的测试，测试代码如下：<strong>（test1.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-keyword">int</span> inc = <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">int</span> i;  <br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> incr)</span></span>;  <br><span class="hljs-keyword">char</span> *result;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">int</span> **argv)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>        <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">int</span>)(result = sbrk(inc))) &gt; <span class="hljs-number">0</span>)  <br>        &#123;  <br>                total += inc;  <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;incremented by %d, total %d\n&quot;</span>, inc, total);  <br>                inc += inc;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后，我们实际访问新分配的内存，验证其分配空间是否能够正常使用：<strong>（test2.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-keyword">int</span> inc = <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;  <br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> incr)</span></span>;  <br><span class="hljs-keyword">char</span> *result;  <br><span class="hljs-keyword">int</span> i;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">int</span> **argv)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">int</span>)(result = sbrk(inc))) &gt; <span class="hljs-number">0</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; inc; i++)  <br>            result[i] = <span class="hljs-number">0x12</span>;  <br>        total += inc;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;incremented by: %d, total: %d , result: %d\n&quot;</span>, inc, total,   (<span class="hljs-keyword">int</span>)result);  <br>        inc += inc;  <br>    &#125;  <br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>经过测试可以发现，程序输出与预期相符，且两次分配内存大小相同，表明新实现的内存分配机制是有效的。程序输出结果如下：</p><img src="/2021/06/08/os/os-exp-memory/run_1.png" class="" title="run_1"><img src="/2021/06/08/os/os-exp-memory/run_2.png" class="" title="run_2"><h2 id="总结">总结</h2><p>在本实验中，我们在Minix3.1.2a系统下对内存分配机制进行了修改。将first-fit内存分配策略修改为best-fit策略，可以有效的提高内存的综合利用率，减少内存碎片的产生。通过对brk系统调用实现的修改，得以让程序能够得到的内存空间随着需求动态扩展，极大的增强了系统的通用性和可扩展性。这一实验也使得我们对进程内存管理和内存空间调度的相关知识有了更深刻的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;修改Minix3.1.2a的内存分配机制，使得当调用brk系统调用时，系统重新给进程分配一块更大的空间并将数据复制至新空间中。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;将</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 I/O子系统</title>
    <link href="http://gonggongjohn.me/2021/06/01/os/os-exp-io/"/>
    <id>http://gonggongjohn.me/2021/06/01/os/os-exp-io/</id>
    <published>2021-06-01T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:18.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>在Minix3中创建一块可用的RAM盘，并比较其与DISK盘在各类存取方式下的速度。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>在Minix3中安装一块 X MB大小的RAM盘<strong>（Minix中已有6块用户可用RAM盘，7块系统保留RAM盘）</strong>，可以挂载并且存取文件操作。</li><li>测试RAM盘和DISK盘的文件读写速度，分析其读写速度差异原因。</li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix3的存储管理策略">Minix3的存储管理策略</h3><p>与其整体系统构架类似，Minix3的I/O构架分为5层：用户进程层、资源调度层、设备驱动层、内核中断层及硬件层。</p><img src="/2021/06/01/os/os-exp-io/minix_io.png" class="" title="minix_io"><p>对于磁盘来说，其通常以块为单位进行存储。当一个用户程序要从一个文件读一个块时，操作系统首先在高速缓存中查找有关的块。如果需要的块不在其中，则调用设备驱动程序，向硬件发出一个请求，从磁盘读取该块，然后将进程阻塞。当磁盘操作完成时，硬件产生一个中断，中断处理器随即从设备读取状态并唤醒休眠的的用户进程使其能够继续运行。</p><h3 id="ram盘申请">RAM盘申请</h3><p>RAM盘是将主存中的部分空间当作普通磁盘来使用的一种存储模型。在许多场景下，这种使用方式是高效且重要的（尤其是在由外部设备引导的系统下）。Minix3系统中共有6块固有的RAM盘，其设备控制程序分别被挂载在<strong>/dev/ram</strong>，<strong>/dev/kmem</strong>，<strong>/dev/boot</strong>，<strong>/dev/mem</strong>，<strong>/dev/null</strong>和<strong>/dev/zero</strong>下。</p><p>为了增加一块RAM盘，我们首先修改这一RAM盘常量：<strong>（minix/drivers/storage/memory）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* ramdisks (/dev/ram*) */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RAMDISKS     7</span><br></code></pre></td></tr></table></figure><p>Minix本身提供了一个用于创建RAM盘的<strong>ramdisk</strong>指令，但其单位为<strong>KB</strong>。为了方便起见，我们实现一个单位为<strong>MB</strong>的<strong>buildmyram</strong>指令用于创建较大容量的RAM盘：<strong>（minix/commands/ramdisk）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/paths.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioc_memory.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd;  <br>    <span class="hljs-keyword">signed</span> <span class="hljs-keyword">long</span> size;  <br>    <span class="hljs-keyword">char</span> *d;  <br>  <br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span> || argc &gt; <span class="hljs-number">3</span>) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;size in MB&gt; [device]\n&quot;</span>,  <br>                argv[<span class="hljs-number">0</span>]);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    d = argc == <span class="hljs-number">2</span> ? _PATH_RAMDISK : argv[<span class="hljs-number">2</span>];  <br>    <span class="hljs-keyword">if</span>((fd=open(d, O_RDONLY)) &lt; <span class="hljs-number">0</span>) &#123;  <br>        perror(d);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KFACTOR 1024  </span><br>    size = atol(argv[<span class="hljs-number">1</span>])*KFACTOR*<span class="hljs-number">1024</span>;  <br>  <br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;size should be non-negative.\n&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span>(ioctl(fd, MIOCRAMSIZE, &amp;size) &lt; <span class="hljs-number">0</span>) &#123;  <br>        perror(<span class="hljs-string">&quot;MIOCRAMSIZE&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;size on %s set to %ldMB\n&quot;</span>, d, size/KFACTOR/<span class="hljs-number">1024</span>);  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>修改完必要的内核代码后，我们重新编译系统并重启进入。现在，我们就可以来实际在系统中申请RAM盘了。</p><p>与系统固有盘类似，我们首先使用<strong>mknod</strong>指令创建一个新申请RAM盘的设备控制节点：</p><img src="/2021/06/01/os/os-exp-io/mknod.png" class="" title="mknod"><p>随后，我们使用新实现的<strong>buildmyram</strong>指令申请一块大小为500MB的RAM盘：</p><img src="/2021/06/01/os/os-exp-io/buildmyram.png" class="" title="buildmyram"><p>最后，我们在新申请的RAM盘上创建相应的文件系统，并将其挂载到<strong>/root/myram</strong>目录下即可：</p><img src="/2021/06/01/os/os-exp-io/mkfs.png" class="" title="mkfs"><p>通过<strong>df</strong>指令可以看到，RAM盘已被成功创建。</p><h3 id="读写性能测试">读写性能测试</h3><p>接下来，我们需要编写一组用于测试和比较DISK盘和RAM盘读写性能的程序。由于DISK盘和RAM盘使用了同样的抽象模型，我们可以使用相同的逻辑来对其进行测试。</p><p>一块磁盘在使用过程中主要会遇到以下四种读写模式：<strong>顺序读取、随机读取、顺序写入、随机写入</strong>。对于读取操作，我们首先使用<strong>open</strong>系统调用打开相应的文件，随后使用<strong>read</strong>系统调用将文件中固定大小的内容读入缓存中。若为随机读取，则在读取完成后我还需要使用<strong>lseek</strong>和<strong>rand</strong>函数将文件指针重新指到一个随机的位置。此外，为了产生较为显著的运行时间以方便比较，我们在一次操作中重复读取1000轮：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ROUND 1000  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blocksize, <span class="hljs-keyword">bool</span> isrand, <span class="hljs-keyword">char</span> *filepath)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-number">0</span>;  <br>    fd = open(filepath, O_CREAT | O_RDWR | O_SYNC, S_IRWXU);  <br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Error occurred when opening file!&quot;</span>);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">char</span> *buf_ext = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * blocksize);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ROUND; i++)&#123;  <br>        read(fd, buf_ext, blocksize);  <br>        <span class="hljs-keyword">if</span>(isrand)&#123;  <br>            lseek(fd, rand() % ((blocksize - <span class="hljs-number">1</span>) * ROUND), SEEK_SET);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-built_in">free</span>(buf_ext);  <br>    lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);  <br>    close(fd);  <br>&#125;<br></code></pre></td></tr></table></figure><p>写入操作与读取操作类似。我们首先构造一个64Bytes的字符串作为写入的最小单位，随后使用<strong>strcat</strong>函数将重复拼接到指定的写入大小，并通过<strong>write</strong>系统调用将其写入文件系统即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFSIZE (64)  </span><br>  <br><span class="hljs-keyword">char</span> buffer[BUFSIZE] = <span class="hljs-string">&quot;This is a 6KB block!&quot;</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blocksize, <span class="hljs-keyword">bool</span> isrand, <span class="hljs-keyword">char</span> *filepath)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-number">0</span>;  <br>    fd = open(filepath, O_CREAT | O_RDWR | O_SYNC, S_IRWXU);  <br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Error occurred when opening file!&quot;</span>);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">char</span> *buf_ext = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * blocksize);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; blocksize / BUFSIZE; i++)&#123;  <br>        <span class="hljs-built_in">strcat</span>(buf_ext, buffer);  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ROUND; i++)&#123;  <br>        write(fd, buf_ext, blocksize);  <br>        <span class="hljs-keyword">if</span>(isrand)&#123;  <br>            lseek(fd, rand() % ((blocksize - <span class="hljs-number">1</span>) * ROUND), SEEK_SET);  <br>        &#125;  <br>    &#125;  <br>    lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);  <br>    close(fd);  <br>&#125;<br></code></pre></td></tr></table></figure><p>由于现代存储媒介大多已经可以应付较高的读写请求，为了最大程度测试DISK盘和RAM盘的性能，我们使用多线程并发读写的方式来尽可能地使磁盘吞吐达到饱和。经实测，在写入块大小为<strong>4KB</strong>时， RAM和DISK盘的吞吐在并发数为<strong>16～20</strong>左右时基本达到了饱和：</p><img src="/2021/06/01/os/os-exp-io/concur.png" class="" title="concur"><p>考虑到SSD磁盘的读写硬件特性，我们将并发数设置为<strong>15</strong>。对于读写块大小，我们以2倍为步长，以测试从64Bytes到8KB时的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSTR 100  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CONCURRENCY 15  </span><br>  <br><span class="hljs-keyword">char</span> *path_format[<span class="hljs-number">2</span>] = &#123;<span class="hljs-string">&quot;/root/myram/disk_%d.txt&quot;</span>, <span class="hljs-string">&quot;/usr/disk_%d.txt&quot;</span>&#125;;  <br>  <br><span class="hljs-comment">//Irrelevant code  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_time_left</span><span class="hljs-params">(struct timeval starttime, struct timeval endtime)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> ((endtime.tv_sec * <span class="hljs-number">1000</span> + endtime.tv_usec / <span class="hljs-number">1000</span>) - (starttime.tv_sec * <span class="hljs-number">1000</span> +  <br>                                                                starttime.tv_usec / <span class="hljs-number">1000</span>)) / <span class="hljs-number">1000.0</span>;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    srand(time(<span class="hljs-number">0</span>));  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;  <br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RAM:\n&quot;</span>);  <br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Disk:\n&quot;</span>);  <br>        <span class="hljs-keyword">int</span> block_size = <span class="hljs-number">64</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++) &#123;  <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start_time</span>, <span class="hljs-title">end_time</span>;</span>  <br>            gettimeofday(&amp;start_time, <span class="hljs-literal">NULL</span>);  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CONCURRENCY; i++) &#123;  <br>                <span class="hljs-keyword">char</span> *filepath = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAXSTR);  <br>                <span class="hljs-built_in">sprintf</span>(filepath, path_format[j], i);  <br>                <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">/* 顺序读取 */</span>  <br>                    read_file(block_size, <span class="hljs-literal">false</span>, filepath);  <br>                     <span class="hljs-comment">/* 随机读取 */</span>  <br>                    <span class="hljs-comment">//read_file(block_size, true, filepath);  </span><br>                     <span class="hljs-comment">/* 顺序写入 */</span>  <br>                    <span class="hljs-comment">//write_file(block_size, false, filepath);  </span><br>                     <span class="hljs-comment">/* 随机写入 */</span>  <br>                    <span class="hljs-comment">//write_file(block_size, true, filepath);  </span><br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CONCURRENCY; i++) &#123;  <br>                wait(<span class="hljs-literal">NULL</span>);  <br>            &#125;  <br>            gettimeofday(&amp;end_time, <span class="hljs-literal">NULL</span>);  <br>            <span class="hljs-keyword">double</span> time_cost = get_time_left(start_time, end_time);  <br>            <span class="hljs-keyword">double</span> write_size = block_size * ROUND * CONCURRENCY / <span class="hljs-number">1024.0</span> / <span class="hljs-number">1024</span>;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Blocksize: %d Bytes, Writesize: %f MB, Time: %f s\n&quot;</span>, block_size, write_size, time_cost);  <br>            block_size *= <span class="hljs-number">2</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果分析">测试结果分析</h3><p>将测试程序编译并多次运行后，我们得到了一组RAM盘和DISK盘在不同块大小下各种读写情况时的运行时间。通过<strong>数据大小/运行时间</strong>，我们就可大致得到磁盘的平均读写速度。结果如下：</p><img src="/2021/06/01/os/os-exp-io/chart_1.png" class="" title="chart_1"><img src="/2021/06/01/os/os-exp-io/chart_2.png" class="" title="chart_2"><img src="/2021/06/01/os/os-exp-io/chart_3.png" class="" title="chart_3"><img src="/2021/06/01/os/os-exp-io/chart_4.png" class="" title="chart_4"><img src="/2021/06/01/os/os-exp-io/chart_aggregate.png" class="" title="chart_aggregate"><p>可以发现，随着操作块大小的增加，RAM盘和DISK盘的吞吐量也逐渐增加。在各种读写场景下，RAM盘的读写速度显著高于Disk盘，这与其实现原理及在计算机体系结构中的层级位置相一致：</p><img src="/2021/06/01/os/os-exp-io/hierarchy.png" class="" title="hierarchy"><p>此外，由于我们使用了SSD（PCI-Express协议）作为磁盘存储媒介，可以看到当块大小为4KB时，DISK盘的吞吐量激增。这是由于在使用SSD磁盘时，系统通常会对其进行4K对齐优化以延长磁盘使用寿命，而4KB的读写块大小正好为一个磁盘块大小，因此磁盘控制器可以快速响应所需的请求。</p><img src="/2021/06/01/os/os-exp-io/4k-alignment.png" class="" title="4k-alignment"><h2 id="总结">总结</h2><p>在本实验中，我们在Minix3系统下分别划分了一块DISK盘空间与RAM盘空间，并通过一系列不同读写方式的组合测试了DISK盘和RAM盘的读写速度与特性，更加直观的认识了系统对于RAM和DISK存储媒介的不同管理方式及其在系统构架中的巨大传输速度差异，从而感受到了现代计算机系统构架的合理性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;在Minix3中创建一块可用的RAM盘，并比较其与DISK盘在各类存取方式下的速度。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;在Minix3中安装一块 X MB大小的RA</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 进程调度EDF</title>
    <link href="http://gonggongjohn.me/2021/04/27/os/os-exp-chrt/"/>
    <id>http://gonggongjohn.me/2021/04/27/os/os-exp-chrt/</id>
    <published>2021-04-27T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:47.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>修改MINIX3系统内核，增加一个系统调用<strong>chrt</strong>，并在其中实现<strong>EDF(Earlist-Deadline-First)</strong>进程调度算法。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>提供设置进程执行期限的系统调度<code>chrt(long deadline)</code>，用于将调用该系统调用的进程设为实时进程，其执行的期限为：从调用处开始deadline秒。例如：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br>...<br>chrt(<span class="hljs-number">10</span>); <span class="hljs-comment">/* 该程序将可以运行的最长时间为10秒，若没有运行结束，则强制结束 */</span>  <br>...<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>在内核进程表中需要增加一个条目，用于表示进程的实时属性；修改相关代码，新增一个系统调用<strong>chrt</strong>，用于设置其进程表中的实时属性。</p></li><li><p>修改<strong>proc.c</strong>和<strong>proc.h</strong>中相关的调度代码，实现最早deadline的用户进程相对于其它用户进程具有更高的优先级，从而被优先调度运行。</p></li><li><p>在用户程序中，可以在不同位置调用多次chrt系统调用，在未到deadline之前，调用chrt将会改变该程序的deadline。</p></li><li><p>未调用chrt的程序将以普通的用户进程(非实时进程)在系统中运行。</p></li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix系统构架">MINIX系统构架</h3><p>作为一个微内核构架系统，Minix将系统进程分为了4层：<strong>内核层</strong>、<strong>驱动管理层</strong>、<strong>服务器进程层</strong>、<strong>用户进程层</strong>，其中内核层运行在系统内核态，而后三层均运行在用户态。</p><p>在Minix中，层与层之间的消息传递通过系统调用来完成，而这又分为了<strong>System Call</strong>和<strong>Kernel Call</strong>。<strong>System Call</strong>用于应用层向服务层的消息传递，<strong>Kernel Call</strong>则用于服务层向内核层的消息传递。</p><img src="/2021/04/27/os/os-exp-chrt/minix_msgpass.png" class="" title="minix_msgpass"><p>消息传递本质上是进程间通讯，从内存角度看即为内存地址间的内容拷贝。幸运的是，Minix已经帮我们封装好了这些调用的底层实现，我们只需要传入正确的参数，系统会自动托管底层内存拷贝的相关事务：<strong>（minix/lib/libc/sys/syscall.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> _syscall(<span class="hljs-keyword">endpoint_t</span> who, <span class="hljs-keyword">int</span> syscallnr, message *msgptr)  <br>&#123;  <br>  <span class="hljs-keyword">int</span> status;  <br>  <br>  msgptr-&gt;m_type = syscallnr;  <br>  status = ipc_sendrec(who, msgptr);  <br>  <span class="hljs-keyword">if</span> (status != <span class="hljs-number">0</span>) &#123;  <br>    <span class="hljs-comment">/* &#x27;ipc_sendrec&#x27; itself failed. */</span>  <br>    <span class="hljs-comment">/* XXX - strerror doesn&#x27;t know all the codes */</span>  <br>    msgptr-&gt;m_type = status;  <br>  &#125;  <br>  <span class="hljs-keyword">if</span> (msgptr-&gt;m_type &lt; <span class="hljs-number">0</span>) &#123;  <br>    errno = -msgptr-&gt;m_type;  <br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);  <br>  &#125;  <br>  <span class="hljs-keyword">return</span>(msgptr-&gt;m_type);  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（minix/lib/libsys/kernel_call.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> _kernel_call(<span class="hljs-keyword">int</span> syscallnr, message *msgptr)  <br>&#123;  <br>  msgptr-&gt;m_type = syscallnr;  <br>  do_kernel_call(msgptr);  <br>  <span class="hljs-keyword">return</span>(msgptr-&gt;m_type);  <br>&#125;<br></code></pre></td></tr></table></figure><p>Minix系统采用了一种多级调度算法，通过维护16个进程队列并赋予其不同的队列优先级来实现进程的分级。其中，0号队列用于放置时钟及系统任务，系统会允许其持续运行直到阻塞（但如果其运行时间过长，系统会设置一个罚时将其暂时移出队列以防止其他进程发生饥饿），7号队列用于放置用户进程，15号队列用于放置闲置进程。在每个进程队列内部，系统采用了时间片轮转的方式使得进程可以公平的分配到运行时间。</p><img src="/2021/04/27/os/os-exp-chrt/proc_queue.png" class="" title="proc_queue"><h3 id="edf调度实现">EDF调度实现</h3><p>要实现EDF调度算法，需要记录每个进程的截止时间。为此，我们在<strong>进程控制块（Process Control Block）</strong>的结构定义中新增一个<strong>p_deadline</strong>项：<strong>（minix/kernel/proc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> &#123;</span>  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>  <br>    <span class="hljs-keyword">long</span> p_deadline;  <span class="hljs-comment">/* Deadline of the process */</span>  <br>  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由于Minix采用多级进程队列，我们可以选择其中的一个进程队列，并在其中使用EDF算法进行调度。由于要保证所有调用chrt系统调用的进程都使用该调度规则，所选择的进程队列的整体优先级要高于用户进程所在的队列，但同时又不能影响系统进程的运作。这里我们选择优先级为5的队列作为EDF调度队列（事实上，4号队列也可以作为要替换的目标队列，但为了防止驱动或系统进程临时调度到这一队列，在此我们将其留出作为缓冲）。</p><p>对于一般的进程，我们在进程初始化时将<strong>p_deadline</strong>置为0。这样在进程调度时，若检测到<strong>p_deadline&gt;0</strong>，即可得知其为调用了<strong>chrt</strong>系统调用的进程，我们便将其加入优先级为5的队列中：<strong>（minix/kernel/proc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(    </span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">register</span> struct proc *rp  <span class="hljs-comment">/* this process is now runnable */</span>    </span></span><br><span class="hljs-function"><span class="hljs-params">)</span>    </span><br><span class="hljs-function"></span>&#123;    <br>    <span class="hljs-comment">//Unrelated codes   </span><br>    <span class="hljs-keyword">if</span>(rp-&gt;p_deadline &gt; <span class="hljs-number">0</span>)&#123;    <br>        rp-&gt;p_priority = <span class="hljs-number">5</span>;    <br>    &#125;    <br>    <span class="hljs-comment">//Unrelated codes    </span><br>&#125;   <br>  <br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue_head</span><span class="hljs-params">(struct proc *rp)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">if</span>(rp-&gt;p_deadline &gt; <span class="hljs-number">0</span>)&#123;  <br>        rp-&gt;p_priority = <span class="hljs-number">5</span>;  <br>    &#125;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在调度时，我们要找出队列中<strong>p_deadline</strong>最小的进程并返回。一个可行的办法是维护一个优先队列，按照<strong>p_deadline</strong>对进程控制结构建立小根堆，其可以在 <span class="math inline">\(\mathcal{O}(\lg n)\)</span> 的时间内返回目标进程，但这样做需要修改整个进程队列的数据结构，操作起来过于复杂，也不符合Minix3的原始设计风格。由于进入该队列的进程是由用户指定的，其规模通常较小，因此我们可以直接遍历整个队列，其效率仍然是可以接受的。实现代码如下：<strong>（minix/kernel/proc.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> struct proc * <span class="hljs-title">pick_proc</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">for</span> (q=<span class="hljs-number">0</span>; q &lt; NR_SCHED_QUEUES; q++) &#123;      <br>        <span class="hljs-comment">//Unrelated codes  </span><br>        <span class="hljs-comment">//EDF algorithm  </span><br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-number">5</span>)&#123;  <br>            rp = rdy_head[q];  <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">cur</span> = <span class="hljs-title">rp</span>-&gt;<span class="hljs-title">p_nextready</span>;</span>  <br>            <span class="hljs-comment">//Traverse the queue  </span><br>            <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">NULL</span>) &#123;  <br>                <span class="hljs-keyword">if</span>(proc_is_runnable(cur) &amp;&amp; (cur-&gt;p_deadline &gt; <span class="hljs-number">0</span>)) &#123;  <br>                    <span class="hljs-keyword">if</span> (rp-&gt;p_deadline &gt; cur-&gt;p_deadline) &#123;  <br>                        rp = cur;  <br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rp-&gt;p_deadline == <span class="hljs-number">0</span>)&#123;  <br>                        rp = cur;  <br>                    &#125;  <br>                &#125;  <br>                cur = cur-&gt;p_nextready;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//Unrelated codes  </span><br>        <span class="hljs-keyword">return</span> rp;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用层实现">应用层实现</h3><p>在应用层中，我们需要实现面向用户的<strong>chrt函数</strong>，并将用户指定的进程和截止时间传入服务层。</p><p>首先我们在POSIX规定的操作系统API头文件中定义chrt的函数原型：<strong>（include/unistd.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>; <span class="hljs-comment">// 0 - Normal process; &gt;0 - Realtime process; &lt;0 - Unsuccessful</span><br></code></pre></td></tr></table></figure><p>用户指定的截止时间是一个相对时间，即从该语句执行时刻向后deadline秒，因此我们需要将其转为绝对时间（事实上是相对系统时钟当前时刻的时间）。Minix系统提供了一个<strong>clock_gettime</strong>函数用于获取系统的时间戳，因此我们可以直接调用该函数来算出当前进程所指定deadline对应的绝对时刻：<strong>（minix/lib/libc/sys/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/cdefs.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;namespace.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;lib.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>&#123;  <br>    message m;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">now</span>;</span>  <br>    <span class="hljs-built_in">memset</span>(&amp;m, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(m));  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">if</span>(deadline &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(deadline &gt; <span class="hljs-number">0</span>)&#123;  <br>        clock_gettime(CLOCK_REALTIME, &amp;now);  <br>        deadline = now.tv_sec + deadline;  <br>    &#125;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>此外，我们还需要对传入的deadline参数做一些边界处理，并通过<strong>alarm</strong>系统调用将超时响应的应用提前结束。随后我们便可以将其放入一个消息结构体中，并通过 **System Call（_syscall函数）** 将消息传入服务层中：<strong>（minix/lib/libc/sys/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    alarm((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) deadline);  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    m.m2_l1 = deadline;  <br>    <span class="hljs-keyword">return</span> _syscall(PM_PROC_NR, PM_CHRT, &amp;m);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务层实现">服务层实现</h3><p>对于要实现的chrt系统调用来说，服务层起到了消息传递的作用。在Minix3系统中，这需要两步来完成，先接受应用层传来的消息，再将消息重新打包并通过<strong>Kernel Call</strong>传入内核中。</p><p>首先我们来实现消息接受的功能。在应用层中，我们通过调用标识符为<strong>PM_CHRT</strong>的System Call将消息发到了服务层中，于是我们需要在服务层中申明这一System Call并将其与消息接收函数相关联：<strong>（minix/include/minix/callnr.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PM_CHRT     (PM_BASE + 48)  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NR_PM_CALLS     49  <span class="hljs-comment">/* highest number from base plus one */</span>  </span><br></code></pre></td></tr></table></figure><p><strong>（minix/servers/pm/table.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> (* <span class="hljs-keyword">const</span> call_vec[NR_PM_CALLS])(<span class="hljs-keyword">void</span>) = &#123;  <br>    CALL(PM_CHRT)       = do_chrt,      <span class="hljs-comment">/* chrt */</span>  <br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>（minix/servers/pm/proto.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* chrt.c */</span>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>至于消息接收函数的实现，我们只需要将发来消息的进程号和发来的消息传递给承接服务层向内核进行消息传递的函数即可：<strong>（minix/servers/pm/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pm.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/com.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/callnr.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mproc.h&quot;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">()</span></span>&#123;  <br>    sys_chrt(who_p, m_in.m2_l1);  <br>    <span class="hljs-keyword">return</span> OK;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们来实现服务层向内核层的消息传递。首先我们定义消息传递函数的原型：<strong>（minix/include/minix/syslib.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sys_chrt</span><span class="hljs-params">(<span class="hljs-keyword">endpoint_t</span> proc_ep, <span class="hljs-keyword">long</span> deadline)</span></span>;<br></code></pre></td></tr></table></figure><p>对于该函数我们只需要将传入的函数重新打包为一个新的消息，并通过**Kernel Call（_kernel_call函数）<strong>将其传入内核即可：</strong>（minix/lib/libsys/sys_chrt.c）**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;syslib.h&quot;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sys_chrt</span><span class="hljs-params">(<span class="hljs-keyword">endpoint_t</span> proc_ep, <span class="hljs-keyword">long</span> deadline)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    message m;  <br>    m.m2_i1 = proc_ep;  <br>    m.m2_l1 = deadline;  <br>    <span class="hljs-keyword">return</span> _kernel_call(SYS_CHRT, &amp;m);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内核层实现">内核层实现</h3><p>首先我们定义服务层中调用的<strong>SYS_CHRT</strong>内核调用，并将其与内核实现函数相关联：<strong>（minix/include/minix/com.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> SYS_CHRT (KERNEL_CALL + 58) <span class="hljs-comment">/* sys_chrt() */</span>  </span><br>  <br><span class="hljs-comment">/* Total */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NR_SYS_CALLS    59  <span class="hljs-comment">/* number of kernel calls */</span></span><br></code></pre></td></tr></table></figure><p><strong>（minix/kernel/system.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">map</span>(SYS_CHRT, do_chrt);       <span class="hljs-comment">/* chrt */</span><br></code></pre></td></tr></table></figure><p>随后我们定义实现函数的原型，并在内核中默认启用它：<strong>（minix/kernel/config.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> USE_CHRT           1    <span class="hljs-comment">/* chrt */</span></span><br></code></pre></td></tr></table></figure><p><strong>（minix/kernel/system.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">(struct proc * caller, message *m_ptr)</span></span>;  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> ! USE_CHRT  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> do_chrt NULL  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>内核的任务就是把上层传递下来的消息解包，并将目标进程的截止时间设置为用户所指定的时间：<strong>（minix/kernel/system/do_chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/system.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/vm.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/endpoint.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/u64.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> USE_CHRT  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">(struct proc *caller, message *m_ptr)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">rp</span>;</span>  <br>    <span class="hljs-keyword">long</span> deadline;  <br>    deadline = m_ptr-&gt;m2_l1;  <br>    rp = proc_addr(m_ptr-&gt;m2_i1);  <br>    rp-&gt;p_deadline = deadline;  <br>    <span class="hljs-keyword">return</span> OK;  <br>&#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_FORK */</span></span><br></code></pre></td></tr></table></figure><h3 id="功能测试">功能测试</h3><p>我们使用以下代码来对实现的功能进行测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;lib.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">proc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>  <span class="hljs-comment">//创建三个子进程，并赋予子进程id  </span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4</span>; i++)  <br>  &#123;  <br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)  <br>    &#123;  <br>      proc(i);  <br>    &#125;  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">proc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>  <span class="hljs-keyword">int</span> loop;  <br>  <span class="hljs-keyword">switch</span> (id)  <br>  &#123;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//子进程1，设置deadline=20  </span><br>    chrt(<span class="hljs-number">20</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc1 set success\n&quot;</span>);  <br>    <span class="hljs-comment">//sleep(1);  </span><br>    <span class="hljs-keyword">break</span>;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//子进程2，设置deadline=15  </span><br>    chrt(<span class="hljs-number">15</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc2 set success\n&quot;</span>);  <br>    <span class="hljs-comment">//sleep(1);  </span><br>    <span class="hljs-keyword">break</span>;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">//子进程3，普通进程  </span><br>    chrt(<span class="hljs-number">0</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc3 set success\n&quot;</span>);  <br>    <span class="hljs-keyword">break</span>;  <br>  &#125;  <br>  <span class="hljs-keyword">for</span> (loop = <span class="hljs-number">1</span>; loop &lt; <span class="hljs-number">40</span>; loop++)  <br>  &#123;  <br>    <span class="hljs-comment">//子进程1在5s后设置deadline=5  </span><br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-number">1</span> &amp;&amp; loop == <span class="hljs-number">5</span>)  <br>    &#123;  <br>      <span class="hljs-keyword">long</span> tmp;  <br>      tmp = chrt(<span class="hljs-number">5</span>);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Status of CHRT: %d\n&quot;</span>, tmp);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Change proc1 deadline to 5s\n&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-comment">//子进程3在10s后设置deadline=3  </span><br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-number">3</span> &amp;&amp; loop == <span class="hljs-number">10</span>)  <br>    &#123;  <br>      chrt(<span class="hljs-number">3</span>);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Change proc3 deadline to 3s\n&quot;</span>);  <br>    &#125;  <br>    sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">//睡眠，否则会打印很多信息  </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prc%d heart beat %d\n&quot;</span>, id, loop);  <br>  &#125;  <br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>该程序创建了3个子进程，并对其分别设置了不同的截止时间，其运行结果如下：</p><img src="/2021/04/27/os/os-exp-chrt/run_1.png" class="" title="run_1"><img src="/2021/04/27/os/os-exp-chrt/run_2.png" class="" title="run_2"><p>可以看到，程序中chrt系统调用的返回值为0，表明其成功将消息传入了内核，且程序行为与预期相符，表明了实现的正确性。</p><h2 id="总结">总结</h2><p>在本实验中，我们通过修改Minix3的系统源码，实现了一个完整的系统调用，并在进程调度中实现了EDF算法，极大的加深了我们对一个微内核操作系统的系统调用、消息传递及进程调度机制的理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;修改MINIX3系统内核，增加一个系统调用&lt;strong&gt;chrt&lt;/strong&gt;，并在其中实现&lt;strong&gt;EDF(Earlist-Deadline-First)&lt;/strong&gt;进程调度算法。&lt;/p&gt;
&lt;h2 id=&quot;内容与设</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>离散型随机变量整理</title>
    <link href="http://gonggongjohn.me/2021/04/21/math-prob-stat/prob-drv/"/>
    <id>http://gonggongjohn.me/2021/04/21/math-prob-stat/prob-drv/</id>
    <published>2021-04-21T09:56:35.000Z</published>
    <updated>2022-02-09T10:32:53.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二项分布">二项分布</h2><h3 id="定义">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math inline">\(X\)</span> 的分布列满足 <span class="math display">\[P(X=k) = \binom{n}{k} p^k (1-p)^{1-k}\]</span> 其中 <span class="math inline">\(n \in \mathbb{N}^+, k \in \{0,1,2,...,n\}, p \in [0,1]\)</span>，则称随机变量 <span class="math inline">\(X\)</span> 满足二项分布，记为 <span class="math inline">\(X \sim B(n, p)\)</span></p></blockquote><a id="more"></a><p><strong>适用场景：</strong>在 <span class="math inline">\(n\)</span> 次伯努利试验中，若每次成功的概率均为 <span class="math inline">\(p\)</span>，求成功 <span class="math inline">\(k\)</span> 次的概率</p><p>二项分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X \leq k)=\left\{\begin{aligned}\sum_\limits{i=0}^{\lfloor k \rfloor} \binom{n}{k}p^k(1-p)^{1-k}&amp;,&amp;k \geq 0  \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>不完全Beta函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= I_{1-p} (n-k, k+1) \\&amp;= \frac{\textrm{B} (1-p;n-k,k+1)}{\textrm{B} (n-k,k+1)} \\&amp;=\frac{\int_0^{1-p} t^{n-k-1}(1-t)^k dt}{\int_0^1 t^{n-k-1}(1-t)^k dt} \ , k \geq 0\end{aligned}\]</span></p><h3 id="期望和方差">期望和方差</h3><p>由于每一次伯努利试验均为独立的，因此我们可以将 <span class="math inline">\(n\)</span> 次试验分解为 <span class="math inline">\(n\)</span> 个单次试验，即若定义 <span class="math display">\[Y_i = \left\{\begin{aligned}1,&amp; Succeed \ \ in \ \ i^{th} \ \ exp \\0,&amp; Fail \ \ in \ \ i^{th} \ \ exp\end{aligned}\right.\]</span> 则 <span class="math inline">\(X=\sum\limits_{i = 1}^n Y_i\)</span> （此时 <span class="math inline">\(Y_i\)</span> 服从的分布即 <span class="math inline">\(B(1,p)\)</span> 也被称为<strong>二点分布</strong>或<strong>0-1分布</strong>）</p><p>于是我们可以快速求出二项分布的期望 <span class="math display">\[\begin{aligned}E(X) &amp;= E \left( \sum_{i = 1}^n Y_i \right) \\&amp;= \sum_{i = 1}^n E(Y_i) \\&amp;= \sum_{i = 1}^n p \\&amp;=np\end{aligned}\]</span></p><p>同理，由 <span class="math display">\[Var(Y_i) = (1-p)^2 p + (0-p)^2(1-p)=p(1-p)\]</span> 可知二项分布的方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= Var(\sum_\limits{i=1}^n Y_i) \\&amp;= \sum_\limits{i=1}^n Var(Y_i) \\&amp;= \sum_\limits{i=1}^n p(1-p) \\&amp;= np(1-p)\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求二项分布期望及方差）：</strong> <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_\limits{k = 0}^n k \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= \sum_\limits{k = 1}^n k \binom{n}{k} p^k (1-p)^{n-k} \\\end{aligned}\]</span> 由于 <span class="math display">\[\begin{aligned}k\binom{n}{k} &amp;= k \cdot \frac{n!}{k!(n-k)!} \\&amp;=\frac{n!}{(k-1)!(n-k)!} \\&amp;=n \cdot \frac{(n-1)!}{(k-1)!(n-k)!} \\&amp;=n \binom{n-1}{k-1}\end{aligned}\]</span> 因此 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_\limits{k = 1}^n n \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;=np \sum_\limits{k = 1}^n \binom{n-1}{k-1} p^{k-1} (1-p)^{n-k} \\&amp;=np \sum_\limits{m = 0}^{n-1} \binom{n-1}{m} p^m (1-p)^{n-1-m} \\&amp;=np \cdot (p+1-p)^{n-1} \\&amp;=np\end{aligned}\]</span> 又由 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_\limits{k = 0}^n k^2 \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n k \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n (k - 1 + 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \left[ \sum_\limits{k = 1}^n (k - 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} + \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \right] \\&amp;=n \cdot \sum_\limits{k = 2}^n (n - 1) \binom{n-2}{k-2} p^k (1-p)^{n-k} + n \cdot \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n(n-1)p^2 + np\end{aligned}\]</span> 可知 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=n(n-1)p^2 + np - n^2p^2 \\&amp;=n^2p^2-np^2+ np - n^2p^2 \\&amp;=np(1-p)\end{aligned}\]</span></p></blockquote><h2 id="泊松分布">泊松分布</h2><h3 id="定义-1">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> 其中 <span class="math display">\[k \in \{0,1,2,3,...\}, \lambda&gt;0\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足泊松分布，记为 <span class="math display">\[X \sim P(\lambda)\]</span></p></blockquote><p><strong>适用场景：</strong>求一段固定长度的时间中事件发生了 <span class="math display">\[k\]</span> 次的概率</p><p>泊松分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X \leq k) = \left\{\begin{aligned}\sum_{i = 0}^{\lfloor k \rfloor} \frac{\lambda^i}{i!}e^{-\lambda}&amp;,&amp; k \geq 0 \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>不完全伽马函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= \frac{\Gamma(\lfloor k + 1\rfloor, \lambda)}{\Gamma(\lfloor k +1 \rfloor)} \\&amp;=Q(\lfloor k + 1\rfloor, \lambda)\end{aligned}\]</span></p><h3 id="期望和方差-1">期望和方差</h3><p>利用 <span class="math display">\[e^x = \sum_\limits{k = 0}^\infty \frac{x^k}{k!}\]</span> 可快速求出泊松分布的期望 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 0}^\infty k \cdot \frac{\lambda^k}{k!} e^{-\lambda} \\&amp;=e^{-\lambda} \cdot \sum_{k = 1}^\infty k \cdot \frac{\lambda^k}{k!} \\&amp;=\lambda e^{-\lambda} \cdot \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} e^\lambda \\&amp;=\lambda\end{aligned}\]</span> 又由 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 0}^\infty k^2 \cdot \frac{\lambda^k}{k!} e^{-\lambda} \\&amp;=e^{-\lambda} \sum_{k = 1}^\infty k^2 \cdot \frac{\lambda^k}{k!} \\&amp;=\lambda e^{-\lambda} \sum_{k = 1}^\infty k \cdot \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} \sum_{k = 1}^\infty (k-1+1) \cdot \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} \left( \sum_{k = 2}^\infty (k-1) \cdot \frac{\lambda^{k-1}}{(k-1)!} + \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \right) \\&amp;=\lambda e^{-\lambda} \left( \lambda \sum_{k = 2}^\infty \frac{\lambda^{k-2}}{(k-2)!} + \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \right) \\&amp;=\lambda e^{-\lambda} \left( \lambda e^\lambda + e^\lambda \right) \\&amp;=\lambda^2 + \lambda\end{aligned}\]</span> 可知其方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \lambda^2 + \lambda - \lambda^2 \\&amp;=\lambda\end{aligned}\]</span></p><h3 id="泊松分布与二项分布">泊松分布与二项分布</h3><p>泊松分布与二项分布有如下定理成立：</p><blockquote><p><strong>Theorem(Poisson):</strong> 设 <span class="math display">\[k \leq n \in N, \lambda &gt; 0\]</span>，<span class="math display">\[\{p_n\}\]</span> 是一个与 <span class="math display">\[n\]</span> 有关的序列且 <span class="math display">\[0 \leq p_n \leq 1\]</span>，<span class="math display">\[np_n \to \lambda (n \to \infty)\]</span>，则 <span class="math display">\[\lim_{n \to \infty} \binom{n}{k} p_n^k(1-p_n)^{n-k} = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> <strong>Proof:</strong> 令 <span class="math display">\[np_n = \lambda_n\]</span></p><p>故由 <span class="math display">\[np_n \to \lambda(n \to \infty)\]</span> 可知 <span class="math display">\[\lambda_n \to \lambda(n \to \infty)\]</span></p><p>故 <span class="math display">\[\begin{aligned}\binom{n}{k} p_n^k(1-p_n)^{n-k} &amp;= \binom{n}{k} (\frac{\lambda_n}{n})^k \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;= \frac{n(n-1) \cdots (n-k-1)}{k!} \cdot \frac{\lambda_n^k}{n^k} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;=\frac{\lambda_n^k}{k!} \cdot \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k}\end{aligned}\]</span> 又 <span class="math display">\[\lim_{n \to \infty} \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} = 1^k = 1 \\\lim_{n \to \infty} \left( 1-\frac{\lambda_n}{n} \right)^{n-k} = e^{-\lambda}\]</span> 因此 <span class="math display">\[\begin{aligned}\lim_{n \to \infty} \binom{n}{k} p_n^k(1-p_n)^{n-k} &amp;= \lim_{n \to \infty} \frac{\lambda_n^k}{k!} \cdot \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;=\frac{\lambda^k}{k!} e^{-\lambda}\end{aligned}\]</span></p></blockquote><p>由上面的定理可以看出，泊松分布可以看作是一个二项分布当 <span class="math display">\[n\]</span> 趋于无穷时的极限情况（此时泊松分布中的参数 <span class="math display">\[\lambda\]</span> 即为二项分布的期望 <span class="math display">\[np\]</span>），因此对于一个二项分布 <span class="math display">\[B(n,p)\]</span> 来说，当 <strong><span class="math display">\[n\]</span> 充分大且 <span class="math display">\[p\]</span> 充分小</strong>时，其对应点的值可使用泊松分布的值来近似。即若随机变量 <span class="math display">\[X \sim B(n,p)\]</span>，则 <span class="math display">\[P(X=k) \approx \frac{n^kp^k}{k!} e^{-np}\]</span> 一般来说，当 <span class="math display">\[n \geq 20, p \leq 0.05\]</span> 时，泊松分布就可作为二项分布的一个可用的近似；当 <span class="math display">\[n \geq 100, np \leq 10\]</span> 时，泊松分布就是二项分布的一个较为精准的近似了。</p><h2 id="几何分布">几何分布</h2><h3 id="定义-2">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = (1-p)^{k-1} p\]</span> 其中 <span class="math display">\[k \in \{1,2,3,...\}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足几何分布，记为 <span class="math display">\[X \sim Ge(p)\]</span></p></blockquote><p><strong>适用场景：</strong>在一组伯努利实验中，若每次成功的概率为 <span class="math display">\[p\]</span>，求当进行到第 <span class="math display">\[k\]</span> 次试验时才第一次成功的概率</p><p>几何分布的<strong>累积分布函数</strong>为 <span class="math display">\[\begin{aligned}F(k) &amp;= P(X \leq k) \\&amp;= \sum_{i =1}^{\lfloor k \rfloor} (1-p)^{i-1}p \\&amp;=p \cdot \frac{1-(1-p)^{\lfloor k \rfloor}}{p} \\&amp;=1-(1-p)^{\lfloor k \rfloor}, k \geq 1\end{aligned}\]</span></p><h3 id="无记忆性">无记忆性</h3><p>几何分布有如下的性质成立：</p><blockquote><p><strong>Theorem:</strong> 若 <span class="math display">\[X \sim Ge(p)\]</span>，则对任意 <span class="math display">\[m,n \geq 1\]</span>，有 <span class="math display">\[P(X &gt; m+n | X &gt; m) = P(X &gt; n)\]</span> <strong>Proof:</strong> 由于 <span class="math display">\[\begin{aligned}P(X &gt; m) &amp;= \sum_{k = m+1}^\infty (1-p)^{k-1} p \\&amp;= p \cdot \frac{(1-p)^m}{p} \\&amp;=(1-p)^m\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}P(X &gt; m+n | X &gt; m) &amp;= \frac{P(X&gt;m+n,X&gt;m)}{P(X&gt;m)} \\&amp;=\frac{P(X&gt;(m+n))}{P(X&gt;m)} \\&amp;=\frac{(1-p)^{m+n}}{(1-p)^m} \\&amp;=(1-p)^{n} \\&amp;=P(X&gt;n)\end{aligned}\]</span></p></blockquote><p>该定理表明，在一串伯努利试验中若前 <span class="math display">\[m\]</span> 次试验均不成功，则后续试验每一次成功的概率与重新从第一次开始计数试验成功的概率相同，即前 <span class="math display">\[m\]</span> 次试验并不对接下来的结果造成任何影响。</p><p>事实上，几何分布是离散型分布中<strong>唯一</strong>具有无记忆性的分布：</p><blockquote><p><strong>Theorem:</strong> 设 <span class="math display">\[X\]</span> 为一个离散随机变量，其取值范围为 <span class="math display">\[\{1,2,3,...\}\]</span>，若对任意 <span class="math display">\[m,n \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[P(X&gt;m+n | X&gt;m) = P(X&gt;n)\]</span>，则存在 <span class="math display">\[0 \leq p \leq 1\]</span>，使得 <span class="math display">\[X \sim Ge(p)\]</span></p><p><strong>Proof:</strong> 令 <span class="math display">\[F(x) = P(X&gt;x)\]</span></p><p>则原条件可写为对任意 <span class="math display">\[m,n \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[\frac{F(m+n)}{F(m)} = F(n)\]</span> 即 <span class="math display">\[F(m+n) = F(m)F(n)\]</span></p><p>令 <span class="math display">\[m = n = 1\]</span>，则 <span class="math display">\[F(2) = F^2(1)\]</span></p><p>再令 <span class="math display">\[m=2, n =1\]</span>，则 <span class="math display">\[F(3) = F^3(1)\]</span></p><p>如此递推，可得 <span class="math display">\[F(m) = F^m(1)\]</span></p><p>令 <span class="math display">\[P(X=1) = p\]</span></p><p>则 <span class="math display">\[\begin{aligned}F(1) &amp;= P(X&gt;1) \\&amp;=1-P(X=1) \\&amp;=1-p\end{aligned}\]</span> 由此可知对任意 <span class="math display">\[m \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[\begin{aligned}P(X=m) &amp;= P(X&gt;m-1) - P(X&gt;m) \\&amp;=F(m-1) - F(m) \\&amp;=F^{m-1}(1) - F^m(1) \\&amp;=(1-p)^{m-1} - (1-p)^m \\&amp;=(1-p)^{m-1}p\end{aligned}\]</span> 即 <span class="math display">\[X \sim Ge(p)\]</span></p></blockquote><h3 id="期望和方差-2">期望和方差</h3><p>利用几何分布的无记忆性，我们可以快速求出几何分布的期望和方差。</p><p>易见 <span class="math display">\[E(X|X=1) = 1\]</span></p><p>而 <span class="math display">\[\begin{aligned}E(X|X&gt;1) &amp;= \sum_{k = 2}^\infty k \cdot P(X=k|X&gt;1) \\&amp;= \sum_{k = 2}^\infty k \cdot P(X=k-1) \\&amp;= \sum_{k = 2}^\infty (k-1) \cdot P(X=k-1) + \sum_{k = 2}^\infty P(X=k-1) \\&amp;=E(X) + 1\end{aligned}\]</span> 故由<strong>全期望公式</strong>可知 <span class="math display">\[\begin{aligned}E(X) &amp;= P(X=1)E(X|X=1) + P(X&gt;1)E(X|X&gt;1) \\&amp;=p + (1-p) (E(X) + 1) \\&amp;=(1-p) \cdot E(X) + 1\end{aligned}\]</span> 即几何分布的期望 <span class="math display">\[E(X) = \frac{1}{p}\]</span></p><p>同理，<span class="math display">\[E(X^2|X = 1) = 1\]</span> <span class="math display">\[\begin{aligned}E(X^2|X&gt;1) &amp;= \sum_{k = 2}^\infty k^2 \cdot P(X=k|X&gt;1) \\&amp;= \sum_{k = 2}^\infty k^2 \cdot P(X=k-1) \\&amp;= \sum_{k = 2}^\infty (k-1)^2 \cdot P(X=k-1) + 2 \cdot \sum_{k = 2}^\infty (k-1) \cdot P(X=k-1) + \sum_{k = 2}^\infty P(X=k-1) \\&amp;=E(X^2) + 2E(X) + 1\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}E(X^2) &amp;= P(X = 1)E(X^2|X=1) + P(X&gt;1)E(X^2|X&gt;1) \\&amp;= p + (1-p)(E(X^2) + 2E(X) + 1) \\&amp;= (1-p)E(X^2) + 2(1-p)E(X) + 1 \\&amp;=(1-p)E(X^2) + \frac{2}{p} - 1\end{aligned}\]</span> 于是 <span class="math display">\[E(X^2) = \frac{2-p}{p^2}\]</span></p><p>因此几何分布的方差 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=\frac{2-p}{p^2} - \frac{1}{p^2} \\&amp;=\frac{1-p}{p^2}\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求几何分布期望和方差）：</strong></p><p>首先我们对其表达式进行化简： <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 1}^\infty k(1-p)^{k-1} p \\&amp;=p \cdot \sum_{k = 1}^\infty k(1-p)^{k-1} \\&amp;=p \cdot \sum_{k = 1}^\infty \left( -\frac{d}{dp} (1-p)^k \right)\end{aligned}\]</span> 由于几何级数<strong>一致收敛</strong>于其极限值，故 <span class="math display">\[\sum_{k = 1}^\infty \frac{d}{dp} \left( (1-p)^k \right)  = \frac{d}{dp} \sum_{k = 1}^\infty \left( (1-p)^k \right)\]</span> 因此几何分布的期望为 <span class="math display">\[\begin{aligned}E(X) &amp;=-p \cdot \frac{d}{dp} \left( \sum_{k = 1}^\infty (1-p)^k \right) \\&amp;= -p \cdot \left( - \frac{1}{p^2}\right) \\&amp;=\frac{1}{p}\end{aligned}\]</span> 同理可知 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 1}^\infty k^2 (1-p)^{k-1} p \\&amp;=p \sum_{k = 1}^\infty k(k+1-1) (1-p)^{k-1} \\&amp;=p \left( \sum_{k = 1}^\infty \left(\frac{d^2}{dp^2} \left( (1-p)^{k+1} \right) \right) - \sum_{k = 1}^\infty \left( \frac{d}{dp} \left( (1-p)^k \right) \right) \right) \\&amp;=p \left( \frac{d^2}{dp^2} \left( \sum_{k = 1}^\infty \left( (1-p)^{k+1} \right) \right) - \frac{d}{dp} \left( \sum_{k = 1}^\infty \left( (1-p)^k \right) \right) \right) \\&amp;=p \left(\frac{d^2}{dp^2} \left( \frac{1}{p}-2+p \right) - \frac{d}{dp} \left( \frac{1}{p} - 1 \right) \right) \\&amp;=\frac{2}{p^2} - \frac{1}{p}\end{aligned}\]</span> 因此其方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=\frac{2}{p^2} - \frac{1}{p} - \frac{1}{p^2} \\&amp;=\frac{1-p}{p^2}\end{aligned}\]</span></p></blockquote><h2 id="负二项分布">负二项分布</h2><h3 id="定义-3">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \binom{k-1}{r-1} p^r (1-p)^{k-r}\]</span> 其中 <span class="math display">\[r \leq k \in \{1,2,3,...\}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足负二项分布，记为 <span class="math display">\[X \sim Nb(r, p)\]</span></p></blockquote><p><strong>适用场景：</strong>在一组伯努利实验中，若每次成功的概率为 <span class="math display">\[p\]</span>，求第 <span class="math display">\[r\]</span> 次成功时总共进行的试验次数 <span class="math display">\[k\]</span></p><p>负二项分布的累积分布函数 <span class="math display">\[F(k) = P(X \leq k) = \left\{\begin{aligned}\sum_{i = 1}^k \binom{i-1}{r-1} p^r (1-p)^{i-r}&amp;,&amp; k \geq r \\0&amp;,&amp; k &lt; r\end{aligned}\right.\]</span> 若引入<strong>不完全Beta函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= I_{1-p}(r, k-r+1) \\&amp;=\frac{B(1-p;r,k-r+1)}{B(r,k-r+1)}\end{aligned}\]</span></p><h3 id="负二项分布与几何分布">负二项分布与几何分布</h3><p>从直观上来看，几何分布描述的是一组伯努利实验中<strong>第一次</strong>成功的实验次数，而负二项分布描述的是一组伯努利实验中<strong>第 <span class="math display">\[r\]</span> 次</strong>成功的实验次数，自然的，几何分布可以被负二项分布所包含。事实上，对于一个负二项分布，当 <span class="math display">\[r = 1\]</span> 时，其分布列退化为 <span class="math display">\[P(X=k)=(1-p)^{k - 1}p\]</span> 此即为几何分布的分布列。由此可知 <span class="math display">\[Ge(p) = Nb(1,p)\]</span></p><h3 id="期望和方差-3">期望和方差</h3><p>与二项分布类似，我们可将负二项分布拆分成一系列相互独立的事件以简化期望和方差的计算。注意到负二项分布与几何分布的关系，我们可将一个负二项分布中的实验拆分为 <span class="math display">\[r\]</span> 个独立成功的实验，而每次实验服从一个几何分布。</p><p>令 <span class="math display">\[X_i\]</span> 为第 <span class="math display">\[i\]</span> 次实验成功所用次数的随机变量 <span class="math display">\[(1 \leq i \leq r)\]</span>，<span class="math display">\[X\]</span> 为前 <span class="math display">\[r\]</span> 次实验成功所用次数的随机变量</p><p>此时 <span class="math display">\[1 \leq \forall i \neq j \leq r\]</span>，<span class="math display">\[X_i\]</span> 与 <span class="math display">\[X_j\]</span> 独立，且 <span class="math display">\[X_i \sim Ge(p), X \sim Nb(r, p), X = \sum_\limits{i = 1}^r X_i\]</span></p><p>于是由几何分布的期望可知 <span class="math display">\[\begin{aligned}E(X) &amp;= E(\sum_{i = 1}^r X_i) \\&amp;=\sum_{i = 1}^r E(X_i) \\&amp;=\sum_{i = 1}^r \frac{1}{p} \\&amp;=\frac{r}{p}\end{aligned}\]</span></p><p>同理 <span class="math display">\[\begin{aligned}Var(X) &amp;= Var(\sum_{i = 1}^r X_i) \\&amp;=\sum_{i = 1}^r Var(X_i) \\&amp;=\sum_{i = 1}^r \frac{1-p}{p^2} \\&amp;=\frac{r(1-p)}{p^2}\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求负二项分布的期望和方差）：</strong> <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = r}^{\infty} k \binom{k-1}{r-1} p^r (1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;=\frac{r}{p} \sum_{k = r}^{\infty} \frac{k!}{r!(k-r)!} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r}{p} \sum_{k = r}^{\infty} \binom{k}{r} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r}{p}\end{aligned}\]</span> 又 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = r}^{\infty} k^2 \binom{k-1}{r-1} p^r (1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} (k+1-1) \cdot \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} \frac{(k+1)!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} - \sum_{k = r}^{\infty} \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;= \frac{r(r+1)}{p^2} \sum_{k = r}^{\infty} \frac{(k+1)!}{(r+1)!(k-r)!} p^{r+2} (1-p)^{k-r} - \frac{r}{p} \sum_{k = r}^{\infty} \frac{k!}{r!(k-r)!} p^{r+1}(1-p)^{k-r} \\&amp;= \frac{r(r+1)}{p^2} \sum_{k = r}^{\infty} \binom{k+1}{r+1} p^{r+2} (1-p)^{k-r} - \frac{r}{p} \sum_{k = r}^{\infty} \binom{k}{r} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r^2+r}{p^2} - \frac{r}{p} \\\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \frac{r^2+r}{p^2} - \frac{r}{p} - \frac{r^2}{p^2} \\&amp;=\frac{r(1-p)}{p^2}\end{aligned}\]</span></p></blockquote><h3 id="广义负二项分布与泊松分布">广义负二项分布与泊松分布</h3><p>在负二项分布中，参数 <span class="math display">\[r\]</span> 的取值范围要求为正整数，而在某些情况下，我们需要将负二项分布中的 <span class="math display">\[r\]</span> 的取值范围拓展到一切正实数。为了做到这一点，我们需要借助<strong>Gamma函数</strong>对其中的组合式进行拓展。</p><p>由于有 <span class="math display">\[\Gamma(n) = (n-1)!\]</span>，故 <span class="math display">\[\binom{k-1}{r-1} = \frac{(k-1)!}{(r-1)!(k-r)!} = \frac{(k-1)!}{\Gamma(r)\Gamma(k-r+1)}\]</span> 因此我们可以将广义负二项分布的分布列定义为： <span class="math display">\[P(X=k)=\frac{(k-1)!}{\Gamma(r)\Gamma(k-r+1)}p^r(1-p)^{k-r}, k \in \{1,2,...\},r \in \mathbb{R}\]</span> 事实上，在实际使用中，一个更常用的负二项分布的分布列定义为 <span class="math display">\[P(X=k) = \binom{k+r-1}{r-1}p^r(1-p)^k, k \in \{0,1,2,...\}\]</span> 这里的 <span class="math display">\[k\]</span> 代表第 <span class="math display">\[r\]</span> 次实验成功前实验失败的次数。</p><p>基于该定义进行拓展，我们就能得到广义负二项分布的标准定义：（该分布也被称为<strong>Polya分布</strong>）</p><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\Gamma(k+r)}{k!\Gamma(r)}p^r (1-p)^k\]</span> 其中 <span class="math display">\[k \in \{0,1,2,...\}, r \in \mathbb{R}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 服从广义负二项分布</p></blockquote><p>广义负二项分布与泊松分布有如下定理成立：</p><blockquote><p><strong>Theorem:</strong> 设 <span class="math display">\[k \in \mathbb{N}, \lambda &gt; 0, r \in \mathbb{R}\]</span>，则有 <span class="math display">\[\lim_{r \to \infty} \frac{\Gamma(k+r)}{k!\Gamma(r)} \left( \frac{\lambda}{r+\lambda} \right)^r \left(\frac{r}{r+\lambda} \right)^{k} = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> <strong>Proof:</strong> //待补全</p></blockquote><p>由上述定理可知，当 <span class="math display">\[r\]</span> 很大时，广义负二项分布可以作为泊松分布的一个很好的近似。</p><h3 id="ab-分布类"><span class="math display">\[(a,b)\]</span> 分布类</h3><p>事实上，<strong>二项分布、负二项分布、泊松分布</strong>的概率密度函数均满足以下的递推关系： <span class="math display">\[p_n = p_{n-1} \left(a + \frac{b}{n} \right), n \geq 1\]</span> 其中，<span class="math display">\[a,b \in \mathbb{R}\]</span> 为常数（该递推式被称为<strong>Panjer递推式</strong>）</p><p>我们称概率密度函数满足上述递推关系的离散分布为 <strong><span class="math display">\[(a,b)\]</span> 分布</strong>，所有<span class="math display">\[(a,b)\]</span> 分布构成的集合被称为 <strong><span class="math display">\[(a,b)\]</span> 分布类</strong> 。</p><p><span class="math display">\[(a,b)\]</span> 分布类在精算领域的损失模型中有着十分重要的应用。</p><p>事实上，二项分布、负二项分布、泊松分布是 <strong><span class="math display">\[(a,b)\]</span> 分布类</strong>中的所有分布，这是因为有如下定理：</p><blockquote><p><strong>Theorem:</strong> 若一个 <span class="math display">\[(a,b)\]</span> 分布为非退化分布，则其必为二项分布、负二项分布、泊松分布中的一种</p><p><strong>Proof:</strong> //待补全</p></blockquote><h2 id="超几何分布">超几何分布</h2><h3 id="定义-4">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}}\]</span> 其中 <span class="math display">\[k \leq n,N_1 \leq N \in \{0,1,2,...\}\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足超几何分布，记为 <span class="math display">\[X \sim H(N, N_1, n)\]</span></p></blockquote><p><strong>适用场景：</strong>在一个袋子中有两种共 <span class="math display">\[N\]</span> 个物品，其中物品 <span class="math display">\[A\]</span> 有 <span class="math display">\[N_1\]</span> 个，物品 <span class="math display">\[B\]</span> 有 <span class="math display">\[N-N_1\]</span> 个，现从袋子中抽出 <span class="math display">\[n\]</span> 个物品，求抽出的物品中 <span class="math display">\[A\]</span> 的个数 <span class="math display">\[k\]</span></p><p>超几何分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X=k) = \left\{\begin{aligned}\sum_{i = 0}^k \frac{\binom{N_1}{i} \binom{N-N_1}{n-i}}{\binom{N}{n}}&amp;,&amp; k \geq 0 \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>广义超几何函数</strong>，则其非负部分还可表示为 <span class="math display">\[F(k) = 1 - \frac{\binom{n}{k+1}\binom{N-n}{N_1-k-1}}{\binom{N}{N_1}} \cdot _3F_2 \left(\begin{aligned}1, k+1-N_1, k+1-n \\k+2, N+k+2-N_1-n\end{aligned};1\right), k \geq 0\]</span></p><h3 id="期望和方差-4">期望和方差</h3><p>我们可以用与负二项分布类似的分析技巧导出超几何分布的期望和方差 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 0}^{N_1} k \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \frac{n}{N} \sum_{k = 1}^{N_1} \frac{k \binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N-1}{n-1}} \\&amp;= \frac{n \cdot N_1}{N} \sum_{k = 1}^{N_1} \frac{\binom{N_1 - 1}{k - 1} \binom{N-N_1}{n-k}}{\binom{N-1}{n-1}} \\&amp;=\frac{n \cdot N_1}{N}\end{aligned}\]</span></p><p>又 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 0}^{N_1} k^2 \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \sum_{k = 1}^{N_1} k(k-1) \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} + \sum_{k = 1}^{N_1} k \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} \cdot \sum_{k = 2}^{N_1} \frac{\binom{N_1-2}{k-2} \binom{N-N_1}{n-k}}{\binom{N-2}{n-2}} + \frac{n \cdot N_1}{N} \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} + \frac{n \cdot N_1}{N}\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} + \frac{n \cdot N_1}{N} - \frac{n^2N_1^2}{N^2} \\&amp;= \frac{n(N-n)(N-N_1)}{N^2(N-1)}\end{aligned}\]</span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二项分布&quot;&gt;二项分布&lt;/h2&gt;
&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; 若一个离散型随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的分布列满足 &lt;span class=&quot;math display&quot;&gt;\[
P(X=k) = \binom{n}{k} p^k (1-p)^{1-k}
\]&lt;/span&gt; 其中 &lt;span class=&quot;math inline&quot;&gt;\(n \in \mathbb{N}^+, k \in \{0,1,2,...,n\}, p \in [0,1]\)&lt;/span&gt;，则称随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 满足二项分布，记为 &lt;span class=&quot;math inline&quot;&gt;\(X \sim B(n, p)\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="概率论" scheme="http://gonggongjohn.me/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="Probability" scheme="http://gonggongjohn.me/tags/Probability/"/>
    
  </entry>
  
  <entry>
    <title>新闻搜索网站构建记录</title>
    <link href="http://gonggongjohn.me/2021/04/18/web/search-site/"/>
    <id>http://gonggongjohn.me/2021/04/18/web/search-site/</id>
    <published>2021-04-18T10:26:25.000Z</published>
    <updated>2021-04-30T06:30:39.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务部署">服务部署</h2><p>请按照如下流程部署本项目：</p><ol type="1"><li>在<strong>news_search</strong>目录下安装所需的依赖插件：<strong>（国内请使用淘宝源安装nodejieba）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> npm install request iconv-lite cheerio mysql jschardet moment</span><br><span class="hljs-meta">&gt;</span><span class="bash"> npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba</span><br></code></pre></td></tr></table></figure><a id="more"></a><ol start="2" type="1"><li>启动本地MySQL服务，修改<strong>news_search/mysql.js</strong>中的相关信息为数据库登录信息：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pool = mysql.createPool(&#123;<br>    host: <span class="hljs-string">&#x27;#数据库地址&#x27;</span>,<br>    user: <span class="hljs-string">&#x27;#本地数据库连接用户名&#x27;</span>, <br>    password: <span class="hljs-string">&#x27;#本地数据库连接密码&#x27;</span>,<br>    database: <span class="hljs-string">&#x27;#目标数据库名&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>登陆数据库管理系统，在控制台中设置相关变量以防止后续连接池堵塞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; set global wait_timeout&#x3D;10;<br>&gt; set global max_connections&#x3D;5000;<br>&gt; set session wait_timeout&#x3D;10;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>在数据库管理系统中创建所需的表结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; CREATE TABLE &#96;news&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;origin&#96; TEXT NOT NULL,<br>    &#96;category&#96; TEXT NOT NULL,<br>    &#96;title&#96; TEXT NOT NULL,<br>    &#96;time&#96; TEXT,<br>    &#96;source&#96; TEXT,<br>    &#96;abstract&#96; TEXT,<br>    &#96;content&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br>&gt; CREATE TABLE &#96;indices&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;word&#96; TEXT,<br>    &#96;docs&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>执行爬虫脚本爬取新闻内容：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> node crawler.js</span><br><span class="hljs-meta">&gt;</span><span class="bash"> node create_indices.js</span><br></code></pre></td></tr></table></figure><p><strong>P.S:</strong> 在测试环境下，若希望快速得到效果，可打开news_research/crawler.js文件，并将如下行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> total_pages = <span class="hljs-number">8</span>; <span class="hljs-comment">//Modify to a smaller number to speed up in demo environment</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> total_pages = <span class="hljs-number">1</span>; <span class="hljs-comment">//Modify to a smaller number to speed up in demo environment</span><br></code></pre></td></tr></table></figure><p>保存后再执行上述代码。</p><ol start="6" type="1"><li>在<strong>news_site</strong>目录下安装所需的依赖：<strong>（国内请使用淘宝源安装nodejieba）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> npm install express moment</span><br><span class="hljs-meta">&gt;</span><span class="bash"> npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba</span><br></code></pre></td></tr></table></figure><ol start="7" type="1"><li>启动网站后端服务：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> node bin/www</span><br></code></pre></td></tr></table></figure><ol start="8" type="1"><li>使用浏览器访问网站前端：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs web-idl">http:&#x2F;&#x2F;localhost:3000<br></code></pre></td></tr></table></figure><h2 id="源内容抓取">源内容抓取</h2><h3 id="新闻网站解析">新闻网站解析</h3><h4 id="网易新闻">网易新闻</h4><p>网易新闻的主体分为国内和国际两个模块，其网站结构大体相同，因此我们集中针对这两个板块进行内容爬取。</p><p>分析新闻索引页面的HTML结构我们可以发现，新闻条目被放在了类名为<strong>newsdata_wrap</strong>的<strong>div</strong>标签下。然而由于网易新闻使用了动态加载新闻条目的方式，若我们使用GET请求直接获取页面的HTML时，该标签下的内容为空，因此我们无法直接通过解析网站的HTML数据获得具体的新闻信息。</p><p>继续分析访问网站时的文件传输流我们会发现网站的新闻条目是由一个叫<strong>cm_guonei.js</strong>（<strong>cm_guoji.js</strong>）的文件动态装载的，其原始路径为<code>https://temp.163.com/special/00804KVA/cm_guonei.js</code>。跟踪页面我们发现同级目录下还有<strong>cm_guonei_02.js<sub>cm_guonei_08.js<strong>（</strong>cm_guoji_02.js</sub>cm_guoji_08.js</strong>）共8个文件用于流式加载所有需要加载的新闻条目。打开文件发现其为一个类JSON结构，其中按条目存储了新闻页面的标题、网址、关键字、时间等基本信息。由此我们可以通过直接解析这些文件来获得所有需要爬取的新闻页面。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>:<span class="hljs-string">&quot;“港独”周竖峰出逃加拿大，曾辱骂内地生为“支那人”&quot;</span>,<br>        <span class="hljs-attr">&quot;digest&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;docurl&quot;</span>:<span class="hljs-string">&quot;https://www.163.com/news/article/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;commenturl&quot;</span>:<span class="hljs-string">&quot;https://comment.tie.163.com/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;tienum&quot;</span>:<span class="hljs-number">5276</span>,<br>        <span class="hljs-attr">&quot;tlastid&quot;</span>:<span class="hljs-string">&quot;&lt;a href=&#x27;http://news.163.com/&#x27;&gt;新闻&lt;/a&gt;&quot;</span>,<br>        <span class="hljs-attr">&quot;tlink&quot;</span>:<span class="hljs-string">&quot;https://www.163.com/news/article/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;label&quot;</span>:<span class="hljs-string">&quot;其它&quot;</span>,<br>        <span class="hljs-attr">&quot;keywords&quot;</span>:[<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/5/6/54687ad65cf0/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;周竖峰&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/6/2/6e2f72ec/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;港独&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/5/a/52a062ff5927/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;加拿大&quot;</span>&#125;],<br>        <span class="hljs-attr">&quot;time&quot;</span>:<span class="hljs-string">&quot;04/26/2021 10:19:15&quot;</span>,<br>        <span class="hljs-attr">&quot;newstype&quot;</span>:<span class="hljs-string">&quot;article&quot;</span>,<br>        <span class="hljs-attr">&quot;pics3&quot;</span>:[],<br>        <span class="hljs-attr">&quot;channelname&quot;</span>:<span class="hljs-string">&quot;guonei&quot;</span>,<br>        <span class="hljs-attr">&quot;source&quot;</span>:<span class="hljs-string">&quot;观察者网&quot;</span>,<br>        <span class="hljs-attr">&quot;point&quot;</span>:<span class="hljs-string">&quot;60&quot;</span>,<br>        <span class="hljs-attr">&quot;imgurl&quot;</span>:<span class="hljs-string">&quot;http://cms-bucket.ws.126.net/2021/0426/bc6435dep00qs5fri00kkc000s600e3c.png&quot;</span>,<br>        <span class="hljs-attr">&quot;add1&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;add2&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;add3&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>接下来我们分析新闻内容页面。该页面的具体内容是静态加载的，因此我们可以直接对其HTML内容进行抽取。然而随着进一步的分析我们会发现新闻页面的编码并不统一，分为UTF-8和GBK两种。为了得到网站的编码方式，我们使用了一个名为<strong>jschardet</strong>的插件。该插件可以通过分析文本的二进制编码给出其最可能的编码方法。由于目标网站只有两种编码方式，因此我们可以保证使用该插件检测得到的结果是可靠的。</p><img src="/2021/04/18/web/search-site/coding.png" class="" title="coding"><p>分析页面的HTML结构我们可以发现新闻内容被封装在了类名为<strong>post_main</strong>的<strong>div</strong>标签下，其中新闻标题类名为<strong>post_title</strong>，时间、来源的类名为<strong>post_info</strong>，正文的类名为<strong>post_body</strong>。我们首先使用<strong>iconv-lite</strong>插件对页面进行解码，随后利用<strong>Cheerio</strong>模块即可快速从网站的DOM结构中抽取出所需的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> coding = chardet.detect(body)[<span class="hljs-string">&#x27;encoding&#x27;</span>]<br><span class="hljs-keyword">var</span> $ = cheerio.load(iconv.decode(body, coding).toString());<br><span class="hljs-keyword">var</span> title = $(<span class="hljs-string">&#x27;.post_title&#x27;</span>).text();<br><span class="hljs-keyword">if</span>(title != <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-keyword">var</span> body_text = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.content.all-txt&quot;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.content.all-txt &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($(<span class="hljs-string">&#x27;.newscontents&#x27;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.newscontents &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.post_body &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;&quot;</span>;<br>    body_text.each(<span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>($(item).text() != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>            content = content + $(item).text() + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环球网">环球网</h4><p>与网易新闻类似，环球网同样分为国内和国际两个模块，且采用了动态装载新闻条目的方式。通过追踪其文件传输流，我们发现其新闻源数据地址分别为<code>https://china.huanqiu.com/api/list?offset=0&amp;limit=20</code>和<code>https://world.huanqiu.com/api/list?offset=0&amp;limit=20</code>，其基本结构为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;list&quot;</span>:[<br>        &#123;<br>            <span class="hljs-attr">&quot;aid&quot;</span>:<span class="hljs-string">&quot;42vOMMYVUm3&quot;</span>,<br>            <span class="hljs-attr">&quot;title&quot;</span>:<span class="hljs-string">&quot;前国脚张恩华去世，享年48周岁&quot;</span>,<br>            <span class="hljs-attr">&quot;summary&quot;</span>:<span class="hljs-string">&quot;张恩华的职业生涯大部分时间是在大连实德以及前身大连万达队度过的，是大连实德队主力后卫，也是大连夺得联赛“七冠王”和多次杯赛冠军的主要功臣之一&quot;</span>,<br>            <span class="hljs-attr">&quot;addltype&quot;</span>:<span class="hljs-string">&quot;normal&quot;</span>,<br>            <span class="hljs-attr">&quot;typedata&quot;</span>:&#123;<br>                <span class="hljs-attr">&quot;audio&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;,<br>                <span class="hljs-attr">&quot;video&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;,<br>                <span class="hljs-attr">&quot;gallery&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">&quot;source&quot;</span>:&#123;<br>                <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;环球时报&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;ext_displaytime&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;ext_defertime&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;ctime&quot;</span>:<span class="hljs-string">&quot;1619721799662&quot;</span>,<br>            <span class="hljs-attr">&quot;xtime&quot;</span>:<span class="hljs-string">&quot;1619721799662&quot;</span>,<br>            <span class="hljs-attr">&quot;cover&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;host&quot;</span>:<span class="hljs-string">&quot;china.huanqiu.com&quot;</span>,<br>            <span class="hljs-attr">&quot;ext-serious&quot;</span>:<span class="hljs-string">&quot;1&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>环球网的新闻内容页根路径分别为<code>https://china.huanqiu.com/article/</code>和<code>https://world.huanqiu.com/article/</code>，因此我们只需使用该路径加上索引数据中的<strong>aid</strong>号，即可得到新闻页的完整网址。</p><p>分析其新闻内容页的HTML结构我们可以发现其正文的外层包裹分别有一个类名为<strong>l-con clear</strong>的<strong>div</strong>标签，一个<strong>article</strong>标签以及一个<strong>section</strong>标签，于是我们同样可以使用Cheerio插件快速将其内容从结构中抽取出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> coding = chardet.detect(body)[<span class="hljs-string">&#x27;encoding&#x27;</span>]<br><span class="hljs-keyword">var</span> $ = cheerio.load(iconv.decode(body, coding).toString());<br><span class="hljs-keyword">var</span> title = $(<span class="hljs-string">&#x27;.t-container-title&#x27;</span>).text();<br><span class="hljs-keyword">if</span>(title != <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-keyword">var</span> body_text = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.l-con.clear&quot;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.l-con.clear &gt; article &gt; section &gt; p&#x27;</span>);<br>        <span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;&quot;</span>;<br>        body_text.each(<span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>($(item).text() != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                <span class="hljs-keyword">var</span> para = $(item).text();<br>                content = content + para + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库构建">数据库构建</h3><p>提取出网站的内容后，我们需要将其以一定结构存放在一个可外部访问的空间内。为此，我们首先创建一个名为<strong>netease_news</strong>的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE netease_news;<br></code></pre></td></tr></table></figure><p>并在其中构建一张名为<strong>news</strong>的表用于结构化存储新闻的各种信息。对于本项目，我们设计了8个表项，分别为：<strong>id（新闻的唯一标识符）、origin（新闻源网址）、category（分类：国内/国外）、title（标题）、time（创建时间）、source（来源）、abstract（内容摘要）、content（新闻内容）</strong>。我们将<strong>id</strong>设为主键，并设置其在每次插入时自增，这样在实际插入时我们只需插入其他7项即可，并能自动分配到一个唯一的id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE &#96;news&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;origin&#96; TEXT NOT NULL,<br>    &#96;category&#96; TEXT NOT NULL,<br>    &#96;title&#96; TEXT NOT NULL,<br>    &#96;time&#96; TEXT,<br>    &#96;source&#96; TEXT,<br>    &#96;keyword&#96; TEXT,<br>    &#96;heat&#96; INT,<br>    &#96;content&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><h3 id="基本爬虫逻辑">基本爬虫逻辑</h3><p>根据上面的分析，我们可以快速设计出爬虫的基本逻辑，其基本流程如下：</p><img src="/2021/04/18/web/search-site/crawl.png" class="" title="crawl"><p>在实际实现中，我们首先封装了一套mysql的读写工具：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">var</span> pool = mysql.createPool(&#123;<br>    host: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    user: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    password: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    database: <span class="hljs-string">&#x27;netease_news&#x27;</span><br>&#125;);<br><span class="hljs-keyword">var</span> query = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sql, sqlparam, callback</span>) </span>&#123;<br>    pool.getConnection(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, conn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            callback(err, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            conn.query(sql, sqlparam, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">qerr, vals, fields</span>) </span>&#123;<br>                conn.release();<br>                callback(qerr, vals, fields); <br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;;<br><span class="hljs-keyword">var</span> query_noparam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sql, callback</span>) </span>&#123;<br>    pool.getConnection(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, conn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            callback(err, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            conn.query(sql, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">qerr, vals, fields</span>) </span>&#123;<br>                conn.release();<br>                callback(qerr, vals, fields); <br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;;<br><span class="hljs-built_in">exports</span>.query = query;<br><span class="hljs-built_in">exports</span>.query_noparam = query_noparam;<br></code></pre></td></tr></table></figure><p>对于爬虫任务，我们将其封装为了六个函数，其中<strong>traverseNeteaseIndices</strong>用于遍历网易新闻的索引文件，<strong>phaseNeteaseLinkList</strong>用于解析网易新闻列表，<strong>phaseNeteaseNews</strong>用于解析网易新闻页的具体内容，另外三个函数<strong>traverseHQWIndices</strong>、<strong>phaseHQWLinkList</strong>和<strong>phaseHQWNews</strong>用于获取环球网新闻数据时的对应行为<strong>（具体实现见crawler.js）</strong>。</p><p>这里需要注意的是，由于<strong>request请求</strong>和<strong>mysql操作</strong>均为<strong>异步操作</strong>，程序执行的顺序无法确定，在同一时刻内，mysql服务器中可能同时有上千个连接，且当连接释放后，<strong>连接池不会立即关闭相应连接</strong>，这样就会造成<strong>连接池堵塞</strong>。为解决这一问题，我们首先在数据库控制台中缩小闲置连接回收间隔，并增大连接限制数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; set global wait_timeout&#x3D;10;<br>&gt; set global max_connections&#x3D;5000;<br>&gt; set session wait_timeout&#x3D;10;<br></code></pre></td></tr></table></figure><p>随后我们通过在爬虫逻辑中使用<strong>setTimeout</strong>函数延迟发送数据库请求，将数据库操作任务平摊到多个时间戳上，这样就有效避免了连接池堵死的情况发生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= pages; i++)&#123;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            phaseNeteaseLinkList(url, category, i, pages);<br>        &#125;, <span class="hljs-number">3000</span> * (i - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= pages; i++)&#123;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            phaseHQWLinkList(url, pred, category, i, pages, last_flag);<br>        &#125;, <span class="hljs-number">5000</span> * i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布隆过滤器与去重">布隆过滤器与去重</h3><p>当我们需要多次执行爬虫任务时，就可能会遇到重复爬取同一网站的情况。为此，我们需要一套快速判断是否已经爬取过一个网址的方法。通常情况下，我们可以使用以下两种办法做到这一点：</p><ul><li>每次爬取一个页面前，在数据库中使用<strong>SELECT</strong>命令查询该网址是否已经存在</li><li>对新闻网址建立<strong>哈希表</strong>，每次爬取前查询该表以判断网址是否已经存在</li></ul><p>若使用第一种方法，根据不同数据库的存储及查询方法，其单次查询的时间复杂度在 <span class="math display">\[\mathcal{O}(\lg n)\]</span> 和 <span class="math display">\[\mathcal{O(n)}\]</span> 之间，<span class="math display">\[k\]</span> 次查询的时间复杂度最坏可能退化到 <span class="math display">\[O(kn)\]</span>；若使用第二种方法，尽管其单次查询的时间复杂度可以保证为 <span class="math display">\[\mathcal{O}(1)\]</span>，但对于一个含有 <span class="math display">\[n\]</span> 个网址的数据库，其空间复杂度为 <span class="math display">\[O(n)\]</span>。由此可见，随着爬虫规模的扩大，两种去重方法均有着一定的弊端，不利于任务的扩展。</p><p>为解决此问题，我们引入一种名为<strong>布隆过滤器（Bloom Filter）</strong>的数据结构<strong>（见filter.js）</strong>。布隆过滤器的核心思想为通过一串哈希函数将关键字映射到一个比特位串。查询时，先将目标关键字通过同样的哈希函数找到对应的索引位，若索引位存在映射，则表明目标关键字<strong>可能存在</strong>；若所有索引位均不存在映射，则表明目标关键字<strong>一定不存在</strong>。</p><img src="/2021/04/18/web/search-site/filter.png" class="" title="filter"><p>布隆过滤器是一种概率型数据结构，其误判率约为 <span class="math display">\[\left(1 - e^{-\frac{kn}{m}}\right)^k\]</span>。在实际使用场景下，只要当我们选择合适的 <span class="math display">\[k\]</span> 和 <span class="math display">\[m\]</span> 值，就可以让误判率几乎不影响业务逻辑。这可以由如下公式给出： <span class="math display">\[k = \frac{m}{n} \ln 2 , m = - \frac{n \ln p}{\ln^2 2}\]</span> 其中 <span class="math display">\[k\]</span> 为哈希函数的个数，<span class="math display">\[m\]</span> 为位串长度，<span class="math display">\[p\]</span> 为预期的误报率。</p><p>布隆过滤器增加和查询时间复杂度均为 <span class="math display">\[\mathcal{O}(k)\]</span>（ <span class="math display">\[k\]</span> 为哈希函数的个数），空间复杂度为 <span class="math display">\[\mathcal{O}(m)\]</span>（<span class="math display">\[m\]</span> 为比特位长度），相比前两种方法可以很好的平衡存储空间和查询效率。</p><h3 id="分词与倒排索引">分词与倒排索引</h3><p>当用户发起搜索请求时，我们需要从数据库中<strong>快速找出所有内容含有用户所请求关键字的新闻条目</strong>。若使用全文搜索的方法，随着数据规模增大，会造成极大的延迟。为解决此问题，我们在爬取文章的时候，对文章内容进行<strong>分词</strong>，并使用词关键字对文章建立<strong>倒排索引</strong>，在搜索时，只需要将关键字使用同样的方法进行分词，并在倒排索引表中查询对应的文档编号即可。</p><img src="/2021/04/18/web/search-site/inverted_index.jpg" class="" title="inverted_index"><p>为此，我们首先在数据库中再建立一张索引表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE &#96;indices&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;word&#96; TEXT,<br>    &#96;docs&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>随后我们读取news表中的新闻内容，并使用<strong>nodejieba</strong>插件对其进行分词。由于文章中还有部分特殊符号及无意义词，我们通过一个<strong>停用词表</strong>来将其去除。为保证词关键字的唯一性，我们维护一个<strong>集合</strong>，将每个文档分词后的结果依次插入该集合，并将结果插入数据库中：<strong>（见create_indices.js）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> word_set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><span class="hljs-keyword">var</span> para = item.content;<br><span class="hljs-comment">//Cut word</span><br><span class="hljs-keyword">var</span> para_filtered = para.replace(<span class="hljs-string">&quot;　&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>para_filtered = para_filtered.replace(<span class="hljs-string">&quot;，&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;。&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">var</span> word_list = jieba.cut(para_filtered);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; word_list.length; i++)&#123;<br>    word_set.add(word_list[i]);<br>&#125;<br>word_set.forEach(<span class="hljs-function">(<span class="hljs-params">word</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(!stop_list.includes(word))&#123;<br>        <span class="hljs-comment">//Insert the result to the database</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="网站构建">网站构建</h2><h3 id="基本构架">基本构架</h3><p>接下来我们来构建新闻搜索网站。新闻搜索网站的主要行为是提供一个可供用户输入的界面，当用户输入关键字后，系统从数据库中检索出带有用户所指定关键字的新闻条目，并将结果以一定的顺序生成相应的内容页面返回给用户。我们使用<strong>Express脚手架</strong>来构建网站的后端。对于网站路由，我们共设计了4个入口，其中根目录为浏览器访问入口，用于呈现相应的HTML页面，其他三个入口<strong>/query</strong>、<strong>/qcontent</strong>和<strong>/qheat</strong>分别用于前端请求<strong>关键字结果</strong>、<strong>完整正文内容</strong>及<strong>关键字热度分析结果</strong>。</p><p>对于网站前端，我们使用了<strong>Bootstrap框架</strong>来生成所需的样式。搜索引擎页面设计的一个核心宗旨即为简洁，因此在搜索界面，我们参考了百度和Google的设计样式，通过卡片的方式将目标条目呈现给用户。在一张卡片中，我们呈现了新闻条目的<strong>标题、事件、来源、摘要及类别</strong>，以方便用户初步预览新闻的大致内容。</p><img src="/2021/04/18/web/search-site/search_page.png" class="" title="search_page"><p>由于卡片的内容是由后端返回的结果动态决定的，因此我们不能直接将其写死在HTML中，而需要通过Javascript脚本动态生成并将其添加至HTML的DOM结构中：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendCard</span>(<span class="hljs-params">father, title, id, time, source, abstract, cat</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> card = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    card.class = <span class="hljs-string">&#x27;card&#x27;</span>;<br>    <span class="hljs-keyword">var</span> card_body = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    card_body.class = <span class="hljs-string">&#x27;card-body&#x27;</span>;<br>    <span class="hljs-keyword">var</span> card_link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    card_link.class = <span class="hljs-string">&#x27;card-link&#x27;</span>;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    card_link.innerText = title;<br>    card_link.style.fontSize = <span class="hljs-string">&quot;large&quot;</span>;<br>    card_body.appendChild(card_link);<br>    <span class="hljs-keyword">var</span> card_info = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    <span class="hljs-keyword">if</span>(source != <span class="hljs-literal">null</span>)&#123;<br>        card_info.innerText = time + <span class="hljs-string">&quot; &quot;</span> + source;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        card_info.innerText = time;<br>    &#125;<br>    card_body.appendChild(card_info);<br>    <span class="hljs-keyword">var</span> card_abstract = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    card_abstract.innerText = abstract;<br>    card_abstract.style.fontSize = <span class="hljs-string">&quot;small&quot;</span>;<br>    card_body.appendChild(card_abstract);<br>    <span class="hljs-keyword">var</span> card_cat = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cat == <span class="hljs-string">&quot;domestic&quot;</span>)&#123;<br>        card_cat.innerText = <span class="hljs-string">&quot;类别：国内&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cat == <span class="hljs-string">&quot;world&quot;</span>)&#123;<br>        card_cat.innerText = <span class="hljs-string">&quot;类别：国外&quot;</span>;<br>    &#125;<br>    card_body.appendChild(card_cat);<br>    card.appendChild(card_body);<br>    <span class="hljs-keyword">var</span> page_elem = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;page-list&#x27;</span>);<br>    page_elem.appendChild(card);<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户点击一个条目后，将跳转到一个新的页面，页面将向后端请求该新闻条目的完整内容。我们可以通过URL含参跳转的方法来实现这一跳转请求操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.html</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendCard</span>(<span class="hljs-params">father, title, id, time, source, abstract, cat</span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    card_link.href = <span class="hljs-string">&#x27;/content.html?id=&#x27;</span> + id;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//content.html</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetUrlParam</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span>+ name +<span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>    <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">window</span>.location.search.substr(<span class="hljs-number">1</span>).match(reg);<br>    <span class="hljs-keyword">if</span>(r!=<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> r[<span class="hljs-number">2</span>]; <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> id = GetUrlParam(<span class="hljs-string">&quot;id&quot;</span>);<br>$.get(<span class="hljs-string">&quot;/qcontent?id=&quot;</span> + id, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>对于内容的呈现，我们同样使用了动态方法将正文添加至页面上：<strong>（见public/content.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h1&#x27;</span>);<br>title.align = <span class="hljs-string">&quot;center&quot;</span>;<br>title.innerText = data.title;<br><span class="hljs-keyword">var</span> info = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h5&#x27;</span>);<br>info.style.color = <span class="hljs-string">&quot;#808080&quot;</span>;<br>info.innerText = data.time + <span class="hljs-string">&quot; 来源：&quot;</span> + data.source;<br><span class="hljs-keyword">var</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>); <br>para.innerText = data.content;<br><span class="hljs-keyword">var</span> page_elem = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;news-content&#x27;</span>);<br>page_elem.appendChild(title);<br>page_elem.appendChild(info);<br>page_elem.appendChild(para);<br></code></pre></td></tr></table></figure><h3 id="搜索提示">搜索提示</h3><p>在现代搜索引擎中，我们希望系统能够即时根据当前的输入智能推测用户想要搜索的完整内容。为实现这一功能，我们需要监听输入框的内容变化事件，并在每次这一事件发生时向后端发送搜索请求：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">callback, mode</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> keywords = $(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).val();<br>    $.get(<span class="hljs-string">&quot;/query?keywords=&quot;</span> + keywords + <span class="hljs-string">&quot;&amp;mode=&quot;</span> + mode, callback);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">middleSearch</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    search(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> recList = [];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">10</span>, data.length); i++)&#123;<br>            recList.push(data[i].title);<br>        &#125;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>    &#125;, <span class="hljs-string">&quot;middle&quot;</span>);<br>&#125;<br><br>$(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).on(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    middleSearch();<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于搜索提示要求即时响应，因此我们通过向后端传入一个<strong>mode</strong>参数来决定搜索的响应精度和速度。对于<strong>提示用搜索请求（mode=middle）</strong>，后端将只扫描数据库<strong>新闻标题（title）</strong>列中含有目标关键字的条目，并只返回前10条结果。<strong>（事实上，若使用预训练的关键词关联库，我们可以引入更为智能的搜索提示，不过由于本项目为新闻搜索网站，这一功能并不实用）</strong></p><img src="/2021/04/18/web/search-site/auto_complete.png" class="" title="auto-complete"><p>对于前端，我们使用了<strong>JQuery-UI框架</strong>实现了补全列表的界面。通过JQuery语句在搜索框后附加<strong>autocomplete</strong>属性，即可使得列表中的内容随着用户的输入自动改变：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).autocomplete(&#123;<br>    source: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query, response</span>)</span>&#123;<br>        search(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> recList = [];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">10</span>, data.length); i++)&#123;<br>                recList.push(data[i].title);<br>            &#125;<br>            <span class="hljs-keyword">return</span> response(recList);<br>        &#125;, <span class="hljs-string">&quot;middle&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="关键词热度分析">关键词热度分析</h3><p>最后，我们来实现对用户的搜索关键词进行时间热度分析的逻辑。由于在爬虫过程中我们抓取了文章的创建时间，并对正文内容进行了倒排索引，我们可以快速实现这一功能。</p><p>与显示新闻正文时的逻辑类似，当用户选择热度分析后，页面将含参跳转到一个新的页面，并向后端的<strong>/qheat</strong>入口请求热度分析结果。后端首先从<strong>news</strong>和<strong>indices</strong>表中分别找出包含目标关键词的新闻条目，并抽取出它们的时间信息。随后，我们按月份对其进行统计，并将其按时间排序，最终将结果封装为JSON字符串传回给前端：<strong>（见routes/index.js）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Irrelevant code omitted</span><br><span class="hljs-keyword">var</span> seq = &#123;&#125;;<br>result.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(seq.hasOwnProperty(item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)))&#123;<br>        seq[item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        seq[item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">var</span> sortedKeys = <span class="hljs-built_in">Object</span>.keys(seq).sort();<br><span class="hljs-keyword">var</span> seq_sort = &#123;&#125;;<br>sortedKeys.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    seq_sort[item] = seq[item];<br>&#125;);<br><span class="hljs-comment">//Irrelevant code omitted</span><br></code></pre></td></tr></table></figure><p>对于分析类功能，图表是一个较为直观的呈现形式。在这里我们使用了<strong>HighCharts</strong>图表框架来根据后端返回的数据快速生成这一样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Highcharts.chart(<span class="hljs-string">&#x27;chart&#x27;</span>, &#123;<br>    title: &#123;<br>        text: <span class="hljs-string">&quot;关键词时间热度分布&quot;</span><br>    &#125;,<br>    xAxis: &#123;<br>        categories: <span class="hljs-built_in">Object</span>.keys(data)<br>    &#125;,<br>    series: [&#123;<br>        data: value_list,<br>        type: <span class="hljs-string">&quot;line&quot;</span>,<br>        name: <span class="hljs-string">&quot;关键词：&quot;</span> + sdecodeURI(keyword)<br>    &#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终的显示效果如下：</p><img src="/2021/04/18/web/search-site/heat_analysis.png" class="" title="heat_analysis">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;服务部署&quot;&gt;服务部署&lt;/h2&gt;
&lt;p&gt;请按照如下流程部署本项目：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;在&lt;strong&gt;news_search&lt;/strong&gt;目录下安装所需的依赖插件：&lt;strong&gt;（国内请使用淘宝源安装nodejieba）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install request iconv-lite cheerio mysql jschardet moment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Web" scheme="http://gonggongjohn.me/tags/Web/"/>
    
    <category term="Frontend" scheme="http://gonggongjohn.me/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业2</title>
    <link href="http://gonggongjohn.me/2021/03/16/dase-math/dase-math-assignment-2/"/>
    <id>http://gonggongjohn.me/2021/03/16/dase-math/dase-math-assignment-2/</id>
    <published>2021-03-16T02:00:00.000Z</published>
    <updated>2022-02-09T15:43:05.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><ol type="1"><li>设 <span class="math inline">\(A, B\)</span> 为两可逆矩阵，令 <span class="math inline">\(X=\begin{pmatrix} O &amp; A \\ B &amp; O \end{pmatrix}\)</span> 求 <span class="math inline">\(X^{-1}\)</span>。</li></ol></blockquote><p>由 <span class="math inline">\(A,B\)</span> 为两可逆矩阵可知 <span class="math inline">\(A, B\)</span> 均为方阵</p><p>设 <span class="math inline">\(A \in M^{m \times m}, B \in M_{n \times n}\)</span></p><p>故由 <span class="math display">\[\begin{pmatrix}O &amp; A \\B &amp; O\end{pmatrix}\begin{pmatrix}O &amp; B^{-1} \\A^{-1} &amp; O\end{pmatrix}= I_{(m+n) \times (m+n)}\]</span></p><p>可知 <span class="math display">\[X^{-1} = \begin{pmatrix}O &amp; B^{-1} \\A^{-1} &amp; O\end{pmatrix}\]</span></p><h2 id="二">二</h2><blockquote><p>求解线性方程组 <span class="math display">\[\begin{pmatrix}1 &amp; 2 &amp; 3 \\2 &amp; -2 &amp; 1 \\3 &amp; -1 &amp; -1\end{pmatrix}\begin{pmatrix}x_1 \\x_2 \\x_3\end{pmatrix}=\begin{pmatrix}6 \\1 \\1\end{pmatrix}\]</span></p></blockquote><p>对原方程组的增广矩阵做行初等变换 <span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\2 &amp; -2 &amp; 1 &amp; 1 \\3 &amp; -1 &amp; -1 &amp; 1\end{pmatrix}\xrightarrow[r_3-3r_1]{r_2-2r_1}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; -7 &amp; -10 &amp; -17\end{pmatrix}\xrightarrow{r_3-2r_2}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; 5 &amp; 0 &amp; 5\end{pmatrix}\xrightarrow{\frac{1}{5}r_3}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; 1 &amp; 0 &amp; 1\end{pmatrix} \\\xrightarrow{r_2 \leftrightarrow r_3}&amp;\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; -6 &amp; -5 &amp; -11\end{pmatrix}\xrightarrow[r_3+6r_2]{r_1-2r_2}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; -5 &amp; -5\end{pmatrix}\xrightarrow{-\frac{1}{5}r_3}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow{r_1-3r_3}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 1 &amp; 1\end{pmatrix}\end{aligned}\]</span></p><p>故原方程组的解为 <span class="math inline">\(\begin{pmatrix}x_1 \\ x_2 \\ x_3 \end{pmatrix} = \begin{pmatrix} 1 \\ 1 \\ 1 \end{pmatrix}\)</span></p><h2 id="三">三</h2><blockquote><p>证明：<span class="math inline">\(\mathbb{R}^{m \times m}\)</span> 中的对称矩阵按照矩阵的加法与数乘在数域 <span class="math inline">\(\mathbb{R}\)</span> 上构成一个线性空间。(如果矩阵 <span class="math inline">\(A\)</span> 是对称矩阵，则有 <span class="math inline">\(A^T = A\)</span>。)</p></blockquote><p>记 <span class="math inline">\(R^{m \times m}\)</span> 上对称矩阵的全体为 <span class="math inline">\(S^{m \times m}\)</span></p><p>由 <span class="math inline">\((R^{m \times m}, +, \cdot)\)</span> 为一个 <span class="math inline">\(\mathbb{R}\)</span> 上的线性空间可知</p><p>任取 <span class="math inline">\(M, N, P \in R^{m \times m}, k_1, k_2 \in \mathbb{R}\)</span>，有</p><ul><li><span class="math inline">\(M + N = N + M\)</span></li><li><span class="math inline">\((M + N) + P = M + (N + P)\)</span></li><li>存在 <span class="math inline">\(\textbf{0} \in R^{m \times m}\)</span> 使得 <span class="math inline">\(M + \textbf{0} = M\)</span></li><li>对于任一个 <span class="math inline">\(M\)</span>，存在 <span class="math inline">\(Q \in R^{m \times m}\)</span> 使得 <span class="math inline">\(M + Q = \textbf{0}\)</span></li><li>存在 <span class="math inline">\(1 \in \mathbb{R}\)</span>，使得 <span class="math inline">\(1 \cdot M = M\)</span></li><li><span class="math inline">\((k_1 \cdot k_2) \cdot M = k_1 \cdot (k_2 \cdot M)\)</span></li><li><span class="math inline">\((k_1 + k_2) \cdot M = k_1 \cdot M + k_2 \cdot M\)</span></li><li><span class="math inline">\(k_1 \cdot (M + N) = k_1 \cdot M + k_1 \cdot N\)</span></li></ul><p>由于 <span class="math inline">\(S^{m \times m} \subset R^{m \times m}\)</span>，故 <span class="math inline">\(S^{m \times m}\)</span> 对于矩阵加法及 <span class="math inline">\(\mathbb{R}\)</span> 上的数乘运算同样满足以上性质</p><p>又 <span class="math inline">\(\textbf{0} \in S^{m \times m}\)</span>，且任取 <span class="math inline">\(A = (a_{ij})_{m \times m} \in S^{m \times m}\)</span>，显然 <span class="math inline">\(-A = (-a_{ij})_{m \times m}\in S^{m \times m}\)</span></p><p>因此我们仅需证明 <span class="math inline">\(S^{m \times m}\)</span> 对矩阵加法和数乘封闭即可</p><p>任取 <span class="math inline">\(A, B \in S^{m \times m}, k \in \mathbb{R}\)</span>，其中 <span class="math display">\[A = \begin{pmatrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\a_{12} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nn}\end{pmatrix},B = \begin{pmatrix}b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n} \\b_{12} &amp; b_{22} &amp; \cdots &amp; b_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\b_{1n} &amp; b_{2n} &amp; \cdots &amp; b_{nn}\end{pmatrix}\]</span> 则 <span class="math display">\[A+B = \begin{pmatrix}a_{11} + b_{11} &amp; a_{12} + b_{12} &amp; \cdots &amp; a_{1n} + b_{1n} \\a_{12} + b_{12} &amp; b_{22} + b_{22} &amp; \cdots &amp; a_{2n} + b_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\a_{1n} + b_{1n} &amp; a_{1n} + b_{2n} &amp; \cdots &amp; a_{nn} + b_{nn}\end{pmatrix} \\kA = \begin{pmatrix}ka_{11} &amp; ka_{12} &amp; \cdots &amp; ka_{1n} \\ka_{12} &amp; ka_{22} &amp; \cdots &amp; ka_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ka_{1n} &amp; ka_{2n} &amp; \cdots &amp; ka_{nn}\end{pmatrix}\]</span> 易见 <span class="math inline">\(A+B, kA \in S^{m \times m}\)</span></p><p>故 <span class="math inline">\(R^{m \times m}\)</span> 中的对称矩阵按照矩阵的加法和数乘在数域 <span class="math inline">\(\mathbb{R}\)</span> 上构成一个线性空间</p><h2 id="四">四</h2><blockquote><p>令 <span class="math inline">\(\beta = (1,2,1,1)^T, \alpha_1 = (1,1,1,1)^T, \alpha_2 = (1,1,-1,-1)^T, \alpha_3 = (1,-1,1,-1)^T, \alpha_4 = (1,-1,-1,1)^T\)</span>，试将向量 <span class="math inline">\(\beta\)</span> 表示成 <span class="math inline">\(\alpha_1, \alpha_2, \alpha_3, \alpha_4\)</span> 的线性组合。</p></blockquote><p><span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\1 &amp; 1 &amp; -1 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 1 &amp; -1 &amp; 1 \\1 &amp; -1 &amp; -1 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow[\begin{array} .r_3 - r_1 \\ r_4 -r_1 \end{array}]{r_2 - r_1}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; -2 &amp; -2 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_2 \leftrightarrow r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; -2 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[r_4 - r_3]{r_4 - r_2}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 4 &amp; -1\end{pmatrix} \\&amp;\xrightarrow{\frac{1}{4} \cdot r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow[\begin{array} .r_3 + 2 \cdot r_4 \\ r_2 + 2 \cdot r_4 \end{array}]{r_1 - r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{5}{4} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; -2 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{5}{4} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{r_1 - r_3} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_2}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{r_1 - r_2}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 0 &amp; \frac{5}{4} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\end{aligned}\]</span></p><p>故 <span class="math display">\[\beta = \frac{5}{4} \alpha_1 + \frac{1}{4} \alpha_2 - \frac{1}{4} \alpha_3 - \frac{1}{4} \alpha_4\]</span></p><h2 id="五">五</h2><blockquote><p>设 <span class="math inline">\(\epsilon_{1}=\left(\begin{array}{l} 1 \\ 1 \\ 1 \\ 1 \end{array}\right), \epsilon_{2}=\left(\begin{array}{c} 1 \\ 1 \\ -1 \\ -1 \end{array}\right), \epsilon_{3}=\left(\begin{array}{c} 1 \\ -1 \\ 1 \\ -1 \end{array}\right), \epsilon_{1}=\left(\begin{array}{c} 1 \\ -1 \\ -1 \\ -1 \end{array}\right), a=\left(\begin{array}{c} 1 \\ 2 \\ -1 \\ 1 \end{array}\right)\)</span>，试求 <span class="math inline">\(a\)</span> 在基 <span class="math inline">\(\epsilon_1, \epsilon_2, \epsilon_3, \epsilon_4\)</span> 下的坐标。</p></blockquote><p><span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\1 &amp; 1 &amp; -1 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 1 &amp; -1 &amp; -1 \\1 &amp; -1 &amp; -1 &amp; -1 &amp; 1\end{pmatrix}\xrightarrow[\begin{array} .r_3 - r_1 \\ r_4 -r_1 \end{array}]{r_2 - r_1}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; -2 &amp; -2 &amp; -2 &amp; 0\end{pmatrix}\xrightarrow{r_2 \leftrightarrow r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; -2 &amp; -2 &amp; 0\end{pmatrix}\xrightarrow[r_4 - r_3]{r_4 - r_2} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 2 &amp; 1\end{pmatrix}\xrightarrow{\frac{1}{2} \cdot r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow[\begin{array} .r_2 + 2 \cdot r_4 \\ r_3 + 2 \cdot r_4 \end{array}]{r_1 - r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{1}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; -2 &amp; 0 &amp; 2 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_3} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{1}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{r_1 - r_3}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_2}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{r_1 - r_2}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\end{aligned}\]</span></p><p>故 <span class="math display">\[a = \epsilon_1 + \frac{1}{2} \epsilon_2 - \epsilon_3 + \frac{1}{2} \epsilon_4\]</span> 即 <span class="math inline">\(a\)</span> 在基 <span class="math inline">\(\epsilon_1, \epsilon_2, \epsilon_3, \epsilon_4\)</span> 下的坐标为 <span class="math display">\[(1, \frac{1}{2}, -1, \frac{1}{2})\]</span></p><h2 id="六">六</h2><blockquote><p>记数域 <span class="math inline">\(\mathbb{R}\)</span> 上的对称矩阵按照矩阵的加法与数乘构成的线性空间为 <span class="math inline">\(V\)</span>。证明：映射 <span class="math inline">\(\sigma_{Q}: V \rightarrow V, \sigma_{Q}(A)=Q^{T} A Q\)</span> 为线性映射。其中 <span class="math inline">\(Q\)</span> 为正交矩阵，即 <span class="math inline">\(Q^T Q = I\)</span>。</p></blockquote><p>任取 <span class="math inline">\(A,B \in V, k_1, k_2 \in \mathbb{R}\)</span> <span class="math display">\[\begin{aligned}\sigma_Q(k_1 \cdot A + k_2 \cdot B) &amp;= Q^T (k_1 \cdot A + K_2 \cdot B) Q \\&amp;=k_1 \cdot Q^TAQ + k_2 \cdot Q^TBQ \\&amp;=k_1 \cdot \sigma_Q(A) + k_2 \cdot \sigma_Q(B)\end{aligned}\]</span> 故映射 <span class="math inline">\(\sigma_Q\)</span> 对 <span class="math inline">\(V\)</span> 中的两种运算保持不变</p><p>由此可知，<span class="math inline">\(\sigma_Q: V \to V, \sigma_Q(A)=Q^TAQ\)</span> 为线性映射</p><h2 id="七">七</h2><blockquote><p>求矩阵 <span class="math inline">\(A=\left(\begin{array}{ccc} 1 &amp; 1 &amp; -1 \\ 1 &amp; 0 &amp; 1 \\ -1 &amp; 1 &amp; 0 \end{array}\right)\)</span> 对应二次型的标准型。</p></blockquote><p>矩阵 <span class="math inline">\(A\)</span> 对应的二次型为 <span class="math inline">\(f = x_1^2 + 2x_1x_2 -2x_1x_3+2x_2x_3\)</span></p><p>下用配方法将其化为标准型 <span class="math display">\[\begin{aligned}f(x_1,x_2,x_3) &amp;= x_1^2 + 2x_1x_2 -2x_1x_3+2x_2x_3 \\&amp;=(x_1+x_2-x_3)^2 - 4x_2x_3-x_2^2-x_3^2 \\&amp;=(x_1+x_2-x_3)^2-(x_2+2x_3)^2+3x_3^2\end{aligned}\]</span> 令 <span class="math display">\[\left\{\begin{aligned}&amp;y_1 = x_1+x_2-x_3 \\&amp;y_2 = x_2+2x_3 \\&amp;y_3 = x_3\end{aligned}\right.\]</span> 解得 <span class="math display">\[\left\{\begin{aligned}&amp;x_1 = y_1-y_2+3y_3 \\&amp;x_2 = y_2-2y_3 \\&amp;x_3 = y_3\end{aligned}\right.\]</span> 由此可得标准型为 <span class="math inline">\(f = y_1^2-y_2^2+3y_3^2\)</span>，所用变换矩阵为 <span class="math display">\[C=\begin{pmatrix}1 &amp; -1 &amp; 3 \\0 &amp; 1 &amp; -2 \\0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p><h2 id="八">八</h2><blockquote><p>试判断下列哪些矩阵是正定矩阵。 <span class="math display">\[A_{1}=\left(\begin{array}{ll}2 &amp; 1 \\1 &amp; 1\end{array}\right) \quad A_{2}=\left(\begin{array}{llll}5 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 4 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 7 &amp; 2 \\0 &amp; 0 &amp; 2 &amp; 4\end{array}\right) \quad A_{3}=\left(\begin{array}{ll}2 &amp; 3 \\3 &amp; 1\end{array}\right) \quad A_{4}=\left(\begin{array}{lll}2 &amp; 3 &amp; 1 \\3 &amp; 1 &amp; 2 \\1 &amp; 2 &amp; 1\end{array}\right)\]</span></p></blockquote><p>由 <span class="math display">\[D_{11} = 2 &gt;0,D_{12} = \begin{vmatrix}2 &amp; 1 \\1 &amp; 1\end{vmatrix}=1 &gt; 0\]</span> 可知 <span class="math inline">\(A_1 = \begin{pmatrix} 2 &amp; 1 \\ 1 &amp; 1\end{pmatrix}\)</span> 的顺序主子式均大于0，因此 <span class="math inline">\(A_1\)</span> 是正定矩阵</p><p>由 <span class="math display">\[D_{21} = 5 &gt; 0,D_{22} = \begin{vmatrix}5 &amp; 1 \\1 &amp; 4\end{vmatrix} = 19 &gt; 0,D_{23} = \begin{vmatrix}5 &amp; 1 &amp; 0 \\1 &amp; 4 &amp; 0 \\0 &amp; 0 &amp; 7\end{vmatrix} = 133 &gt; 0,D_{24} = \begin{vmatrix}5 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 4 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 7 &amp; 2 \\0 &amp; 0 &amp; 2 &amp; 4\end{vmatrix} = 456 &gt; 0\]</span> 可知 <span class="math inline">\(A_2 = \begin{pmatrix} 5 &amp; 1 &amp; 0 &amp; 0 \\ 1 &amp; 4 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 7 &amp; 2 \\ 0 &amp; 0 &amp; 2 &amp; 4 \end{pmatrix}\)</span> 的顺序主子式均大于0，因此 <span class="math inline">\(A_2\)</span> 是正定矩阵</p><p>由 <span class="math display">\[D_{32} = \begin{vmatrix}2 &amp; 3 \\3 &amp; 1\end{vmatrix}=-7 &lt; 0\]</span> 可知 <span class="math inline">\(A_3 = \begin{pmatrix} 2 &amp; 3 \\ 3 &amp; 1 \end{pmatrix}\)</span> 的顺序主子式不全大于0，因此 <span class="math inline">\(A_3\)</span> 不是正定矩阵</p><p>由 <span class="math display">\[D_{42} = \begin{vmatrix}2 &amp; 3 \\3 &amp; 1\end{vmatrix}=-7 &lt; 0\]</span> 可知 <span class="math inline">\(A_4 = \begin{pmatrix} 2 &amp; 3 &amp; 1\\ 3 &amp; 1 &amp; 2 \\ 1 &amp; 2 &amp; 1\end{pmatrix}\)</span> 的顺序主子式不全不大于0，因此 <span class="math inline">\(A_4\)</span> 不是正定矩阵</p><h2 id="九">九</h2><blockquote><p>求矩阵 <span class="math inline">\(A = \begin{pmatrix} 1 &amp; 4 &amp; 2 \\ 0 &amp; -3 &amp; 4 \\ 0 &amp; 4 &amp; 3 \end{pmatrix}\)</span> 的特征值与对应的特征向量。</p></blockquote><p>由 <span class="math display">\[\begin{aligned}|\lambda I - A | &amp;= \begin{vmatrix}\lambda -1  &amp; -4 &amp; -2 \\0 &amp; \lambda + 3 &amp; -4 \\0 &amp; -4 &amp; \lambda - 3\end{vmatrix} \\&amp;= (\lambda - 1)(\lambda + 3)(\lambda - 3) - 16(\lambda - 1) \\&amp;=(\lambda-1)(\lambda-5)(\lambda+5) = 0\end{aligned}\]</span> 解得 <span class="math inline">\(\lambda_1 = 1, \lambda_2 = 5, \lambda_3 = -5\)</span></p><p>对于 <span class="math inline">\(\lambda_1 = 1\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 4 &amp; -4 \\0 &amp; -4 &amp; -2\end{pmatrix}\xrightarrow[r_3-r_1]{r_2+r_1}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 0 &amp; -6 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{-\frac{1}{6} \cdot r_2}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_1+2 \cdot r_2}\begin{pmatrix}0 &amp; -4 &amp; 0 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{-\frac{1}{4} \cdot r_1}\begin{pmatrix}0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_1 = (1,0,0)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_1\)</span> 的特征向量全体为 <span class="math inline">\(k_1 \alpha_1 (k_1 \neq 0\in \mathbb{R})\)</span></p><p>对于 <span class="math inline">\(\lambda_2 = 5\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}4 &amp; -4 &amp; -2 \\0 &amp; 8 &amp; -4 \\0 &amp; -4 &amp; 2\end{pmatrix}\xrightarrow{\frac{1}{4} \cdot r_2}\begin{pmatrix}4 &amp; -4 &amp; -2 \\0 &amp; 2 &amp; -1 \\0 &amp; -4 &amp; 2\end{pmatrix}\xrightarrow[r_3+2 \cdot r_2]{r_1 + 2 \cdot r_2}\begin{pmatrix}4 &amp; 0 &amp; -4 \\0 &amp; 2 &amp; -1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[\frac{1}{2} \cdot r_2]{\frac{1}{4} \cdot r_1}\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_2 = (2,1,2)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_2\)</span> 的特征向量全体为 <span class="math inline">\(k_2\alpha_2(k_2 \neq 0 \in \mathbb{R})\)</span></p><p>对于 <span class="math inline">\(\lambda_3 = -5\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}-6 &amp; -4 &amp; -2 \\0 &amp; -2 &amp; -4 \\0 &amp; -4 &amp; -8\end{pmatrix}\xrightarrow[r_3 - 2 \cdot r_2]{r_1 - 2 \cdot r_2}\begin{pmatrix}-6 &amp; 0 &amp; 6 \\0 &amp; -2 &amp; -4 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[-\frac{1}{2} \cdot r_2]{-\frac{1}{6} r_1}\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; 2 \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_3 = (1,-2,1)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_3\)</span> 的特征向量全体为 <span class="math inline">\(k_3\alpha_3 (k_3 \neq 0 \in \mathbb{R})\)</span></p><h2 id="十">十</h2><blockquote><p>设已知 <span class="math inline">\(A = \begin{pmatrix} 2 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 1 &amp; 1 &amp; 2 \end{pmatrix}\)</span>，且 <span class="math inline">\(x = \begin{pmatrix} 1 \\ k \\ 1 \end{pmatrix}\)</span>是矩阵 <span class="math inline">\(A^{-1}\)</span> 的一个特征向量，求 <span class="math inline">\(k\)</span>。</p></blockquote><p>设 <span class="math inline">\(x = (1,k,1)^T\)</span> 为 <span class="math inline">\(A^{-1}\)</span> 属于 <span class="math inline">\(\lambda_0\)</span> 的一个特征向量</p><p>则 <span class="math inline">\(x\)</span> 为 <span class="math inline">\(A\)</span> 属于 <span class="math inline">\(\frac{1}{\lambda_0}\)</span> 的一个特征向量</p><p>由 <span class="math display">\[\begin{aligned}|\lambda I - A | &amp;= \begin{vmatrix}\lambda -2  &amp; -1 &amp; -1 \\-1 &amp; \lambda -2 &amp; -1 \\-1 &amp; -1 &amp; \lambda - 2\end{vmatrix} =(\lambda-4)(\lambda-1)^2\end{aligned}\]</span> 可知 <span class="math inline">\(\lambda_1 = 4\)</span>，<span class="math inline">\(\lambda_2 = 1\)</span>（二重根）</p><p>对于 <span class="math inline">\(\lambda_1 = 4\)</span> <span class="math display">\[\begin{pmatrix}2 &amp; -1 &amp; -1 \\-1 &amp; 2 &amp; -1 \\-1 &amp; -1 &amp; 2\end{pmatrix}\rightarrow\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; -1 \\0 &amp; 0 &amp; 0\end{pmatrix}\]</span> 解得 <span class="math inline">\(\alpha_1 = (1, 1, 1)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_1\)</span> 的特征向量的全体构成的集合为 <span class="math inline">\(E_1 = \{k_1 \alpha_1 : k_1 \neq 0 \in \mathbb{R} \}\)</span></p><p>若 <span class="math inline">\(x \in E_1\)</span>，则 <span class="math inline">\(k=1\)</span></p><p>对于 <span class="math inline">\(\lambda_2 = 1\)</span> <span class="math display">\[\begin{pmatrix}-1 &amp; -1 &amp; -1 \\-1 &amp; -1 &amp; -1 \\-1 &amp; -1 &amp; -1\end{pmatrix}\rightarrow\begin{pmatrix}1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0\end{pmatrix}\]</span> 解得 <span class="math inline">\(\alpha_2 = (-1,0,1)^T, \alpha_3 = (-1,1,0)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_2\)</span> 的特征向量的全体构成的集合为 <span class="math inline">\(E_2 = \{k_2\alpha_2 + k_3 \alpha_3 : k_2,k_3 \in \mathbb{R} \land (k_2\neq 0 \lor k_3 \neq 0)\}\)</span></p><p>若 <span class="math inline">\(x \in E_2\)</span>，则 <span class="math inline">\(k=-2\)</span></p><h2 id="十一">十一</h2><blockquote><p>使用Python将一张图片旋转一定⻆度。 提交时需要提交原来的图片和旋转后的图片以及补全的代码。</p></blockquote><p>原图片：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/origin.jpg" class="" title="origin"><p>逆时针旋转：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/fig1.jpg" class="" title="fig1"><p>顺时针旋转：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/fig2.jpg" class="" title="fig2"><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>matplotlib.use(<span class="hljs-string">&quot;TkAgg&quot;</span>)<br>img_origin = Image.open(<span class="hljs-string">&#x27;origin.jpg&#x27;</span>)<br>img_origin = img_origin.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>img = np.array(img_origin)<br>theta = <span class="hljs-number">30</span>/<span class="hljs-number">180</span>*np.pi<br>cos_theta = np.cos(theta)<br>sin_theta = np.sin(theta)<br>center_i = len(img)/<span class="hljs-number">2</span><br>center_j = len(img[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span><br>imgr = np.zeros_like(img)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(img)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(img[<span class="hljs-number">0</span>])):<br>        yi = int(cos_theta * (i - center_i) - sin_theta * (j - center_j) + center_i)<br>        yj = int(sin_theta * (i - center_i) + cos_theta * (j - center_j) + center_j)<br>        <span class="hljs-keyword">if</span> yi &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> yj &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> yi &gt;= len(img) <span class="hljs-keyword">or</span> yj &gt;= len(img[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>            imgr[yi][yj][k] = img[i][j][k]<br>plt.imshow(imgr)<br>plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;fig1.jpg&#x27;</span>)<br>plt.clf()<br>imgR = np.zeros_like(img)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(img)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(img[<span class="hljs-number">0</span>])):<br>        xi = int(cos_theta * (i - center_i) + sin_theta * (j - center_j) + center_i)<br>        xj = int(-sin_theta * (i - center_i) + cos_theta * (j - center_j) + center_j)<br>        <span class="hljs-keyword">if</span> xi &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xj &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xi &gt;= len(img) <span class="hljs-keyword">or</span> xj &gt;= len(img[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>            imgR[xi][xj][k] = img[i][j][k]<br>plt.imshow(imgR)<br>plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;fig2.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;设 &lt;span class=&quot;math inline&quot;&gt;\(A, B\)&lt;/span&gt; 为两可逆矩阵，令 &lt;span class=&quot;math inline&quot;&gt;\(X=\begin{p</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业1</title>
    <link href="http://gonggongjohn.me/2021/03/12/dase-math/dase-math-assignment-1/"/>
    <id>http://gonggongjohn.me/2021/03/12/dase-math/dase-math-assignment-1/</id>
    <published>2021-03-12T02:00:00.000Z</published>
    <updated>2022-02-09T14:55:19.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>卷积神经网络是一类典型的处理图像的模型，其中卷积是其中一种非常重要的函数操作。试计算下列输入和卷积核做卷积的结果。（注意：此处卷积操作无需旋转180度） <span class="math display">\[\textrm{Input} =\begin{pmatrix}1 &amp; 3 &amp; 0 &amp; -1 \\3 &amp; 0 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 2 &amp; 0\end{pmatrix},\textrm{Kernel} = \begin{pmatrix}-1 &amp; 1 \\-1 &amp; 1\end{pmatrix}\]</span></p></blockquote><p>由卷积运算公式可知 <span class="math display">\[\begin{aligned}output_{11} &amp;= 1 \cdot (-1) + 3 \cdot 1 + 3 \cdot (-1) + 0 \cdot 1 = -1 \\output_{12} &amp;= 3 \cdot (-1) + 0 \cdot 1 + 0 \cdot (-1) + (-1) \cdot 1 = -4 \\output_{13} &amp;= 0 \cdot (-1) + (-1) \cdot 1 + (-1) \cdot (-1) + 2 \cdot 1 = 2 \\output_{21} &amp;= 3 \cdot (-1) + 0 \cdot 1 + 1 \cdot (-1) + (-1) \cdot 1 = -5 \\output_{22} &amp;= 0 \cdot (-1) + (-1) \cdot 1 + (-1) \cdot (-1) + 2 \cdot 1 = 2 \\output_{23} &amp;= (-1) \cdot (-1) + 2 \cdot 1 + 2 \cdot (-1) + 0 \cdot 1 = 1 \\\end{aligned}\]</span></p><p>故 <span class="math display">\[\textrm{Output} = \begin{pmatrix}-1 &amp; -4 &amp; 2 \\-5 &amp; 2 &amp; 1\end{pmatrix}\]</span></p><h2 id="二">二</h2><blockquote><p>现有一组图片数据集，任务目标是将这些图片分类。其中图片中包含的类别有：猫、狗、鹦鹉、人。试用One-Hot向量将类别表示为向量。</p></blockquote><p><span class="math display">\[\begin{aligned}猫 &amp;\xlongequal{def} [1,0,0,0]^T \\狗 &amp;\xlongequal{def} [0,1,0,0]^T \\鹦鹉 &amp;\xlongequal{def} [0,0,1,0]^T \\人 &amp;\xlongequal{def} [0,0,0,1]^T\end{aligned}\]</span></p><h2 id="三">三</h2><blockquote><p>现有文本集（一行为一个文本）如下。试计算，该文本集中各个单词（不区分大小写）在各文本中的TF-IDF值。</p><figure class="highlight erlang"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs erlang">I know.<br>You know.<br>I know that you know.<br>I know that you know that I know.<br></code></pre></td></tr></table></figure></blockquote><p>首先计算整个文档中各个词语的IDF值 <span class="math display">\[\begin{aligned}IDF_{(I)} &amp;= \ln \frac{4}{3} \\IDF_{(know)} &amp;= \ln \frac{4}{4} = 0 \\IDF_{(you)} &amp;= \ln \frac{4}{3} \\IDF_{(that)} &amp;= \ln \frac{4}{2} = \ln 2\end{aligned}\]</span></p><p>随后分别计算各个文档中各个词语的TF值 <span class="math display">\[TF_{(I,1)} = \frac{1}{2} , TF_{(know,1)} = \frac{1}{2} \\TF_{(you,2)} = \frac{1}{2} , TF_{(know,2)} = \frac{1}{2} \\TF_{(I,3)} = \frac{1}{5} , TF_{(you,3)} = \frac{1}{5},TF_{(know,3)} = \frac{2}{5} , TF_{(that,2)} = \frac{1}{5} \\TF_{(I,4)} = \frac{1}{4} , TF_{(you,4)} = \frac{1}{8},TF_{(know,4)} = \frac{3}{8} , TF_{(that,4)} = \frac{1}{4}\]</span> 由此可得各个单词在各文本中的TF-IDF值 <span class="math display">\[TF-IDF_{(I,1)} = \frac{1}{2} \cdot \ln \frac{4}{3} \approx 0.1438 \\TF-IDF_{(know,1)} = \frac{1}{2} \cdot 0 = 0 \\TF-IDF_{(you,2)} = \frac{1}{2} \cdot \ln \frac{4}{3} \approx 0.1438 \\TF-IDF_{(know,2)} = \frac{1}{2} \cdot 0 = 0 \\TF-IDF_{(I,3)} = \frac{1}{5} \cdot \ln \frac{4}{3} \approx 0.0575 \\TF-IDF_{(you,3)} = \frac{1}{5} \cdot \ln \frac{4}{3} \approx 0.0575 \\TF-IDF_{(know,3)} = \frac{2}{5} \cdot 0 = 0 \\TF-IDF_{(that,3)} = \frac{1}{5} \cdot \ln 2 \approx 0.1386 \\TF-IDF_{(I,4)} = \frac{1}{4} \cdot \ln \frac{4}{3} \approx 0.0719 \\TF-IDF_{(you,4)} = \frac{1}{8} \cdot \ln \frac{4}{3} \approx 0.0360 \\TF-IDF_{(know,4)} = \frac{3}{8} \cdot 0 = 0 \\TF-IDF_{(that,4)} = \frac{1}{4} \cdot \ln 2 \approx 0.1733 \\\]</span></p><h2 id="四">四</h2><blockquote><p>现有一个数据集有5个数据，分别被分类在 <span class="math inline">\((0,1)^T, (0,1)^T, (0,1)^T, (1,0)^T, (1,0)^T\)</span>，而一个模型给出的评分分别为 <span class="math inline">\((2,8)^T, (1,9)^T, (3,2)^T, (1,5)^T, (2,0)^T\)</span>，试给出此时模型给各个数据的概率评分以及交叉熵损失的值。</p></blockquote><p>由 <span class="math display">\[Softmax(x_i) = \frac{e^{x_i}}{\sum_\limits{j=1}^n e^{x_j}}\]</span></p><p>可知各个数据的概率评分为 <span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}e^2/(e^2+e^8) \\e^8/(e^2+e^8)\end{pmatrix},\begin{pmatrix}e^1/(e^1+e^9) \\e^9/(e^1+e^9)\end{pmatrix},\begin{pmatrix}e^3/(e^3+e^2) \\e^2/(e^3+e^2)\end{pmatrix},\begin{pmatrix}e^1/(e^1+e^5) \\e^5/(e^1+e^5)\end{pmatrix},\begin{pmatrix}e^2/(e^2+e^0) \\e^0/(e^2+e^0)\end{pmatrix} \\\approx&amp;\begin{pmatrix}0.0025 \\0.9975\end{pmatrix},\begin{pmatrix}0.0003 \\0.9997\end{pmatrix},\begin{pmatrix}0.7311 \\0.2689\end{pmatrix},\begin{pmatrix}0.0180 \\0.9820\end{pmatrix},\begin{pmatrix}0.8808 \\0.1192\end{pmatrix}\end{aligned}\]</span></p><p>又由交叉熵损失计算公式 <span class="math display">\[L=-\sum_{c=1}^K y_c \log (p_c)\]</span> 可知各个数据的交叉熵损失为 <span class="math display">\[L_1 = - (0 \cdot \log 0.0025 + 1 \cdot \log 0.9975) \approx 0.0036 \\L_2 = - (0 \cdot \log 0.0003 + 1 \cdot \log 0.9997) \approx 0.0004 \\L_3 = - (0 \cdot \log 0.7311 + 1 \cdot \log 0.2689) \approx 1.8949 \\L_4 = - (1 \cdot \log 0.0180 + 0 \cdot \log 0.9820) \approx 5.7959 \\L_5 = - (1 \cdot \log 0.8808 + 0 \cdot \log 0.1192) \approx 0.1831\]</span></p><h2 id="五">五</h2><blockquote><p>设数据集为 <span class="math inline">\(x_1, x_2, \cdots, x_n\)</span> 其中被分为两类 <span class="math inline">\(y_1, y_2\)</span>。如果使用线性分类器，试给出一个考虑结构风险的损失函数的公式。</p></blockquote><p>线性分类器的评分函数可表示为（使用<strong>Softmax</strong>作为概率评分函数） <span class="math display">\[f(W,b,\textbf{x}) = Softmax(W \textbf{x} + b)\]</span></p><p>若使用交叉熵作为基础损失函数，使用 <span class="math inline">\(L_2\)</span> 范数作为正则化项，则最终的损失函数可以定义为 <span class="math display">\[J =-  \sum_{i = 1}^2 y_c \log (p_c) + \lambda ||\textbf{W}||_2^2\]</span> 其中 <span class="math inline">\(y_c\)</span> 为分类结果指示函数，<span class="math inline">\(p_c\)</span> 为模型给出当前分类的概率评分</p><h2 id="六">六</h2><blockquote><p>利用Python将一张黑白图片或彩色图片转化为矩阵或张量，并使图片水平翻转。</p></blockquote><p>翻转结果：</p><img src="/2021/03/12/dase-math/dase-math-assignment-1/merged.png" class="" title="merged"><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>origin_path = <span class="hljs-string">&#x27;origin.jpg&#x27;</span><br>image = Image.open(origin_path)<br>tensor = np.asarray(image)<br>tensor_flipped = np.flip(tensor, <span class="hljs-number">1</span>)<br>image_flipped = Image.fromarray(tensor_flipped)<br>image_flipped = image_flipped.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>image_flipped.save(<span class="hljs-string">&#x27;flipped.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;卷积神经网络是一类典型的处理图像的模型，其中卷积是其中一种非常重要的函数操作。试计算下列输入和卷积核做卷积的结果。（注意：此处卷积操作无需旋转180度） &lt;span class=&quot;math display&quot;&gt;\[</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 Shell及系统调用</title>
    <link href="http://gonggongjohn.me/2021/03/02/os/os-exp-shell/"/>
    <id>http://gonggongjohn.me/2021/03/02/os/os-exp-shell/</id>
    <published>2021-03-02T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:55.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>在MINIX环境下通过系统调用实现一个基本的Shell。</p><h2 id="内容与设计思想">内容与设计思想</h2><p>Shell能解析的命令行如下:</p><ol type="1"><li>带参数的程序运行功能。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>重定向功能，将文件作为程序的输入/输出。</li></ol><ol type="1"><li>“&gt;”表示覆盖写</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &gt; output-file<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>“&gt;&gt;”表示追加写</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &gt;&gt; output-file<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>“&lt;”表示文件输入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &lt; input-file<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>管道符号“|”，在程序间传递数据。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">programA arg1 ... argN | programB arg1 ... argN<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>后台符号&amp;，表示此命令将以后台运行的方式执行。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &amp;<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><p>工作路径移动命令：<code>cd</code>。</p></li><li><p>程序运行统计：<code>mytop</code>。</p></li><li><p>shell退出命令：<code>exit</code>。</p></li><li><p>显示最近执行的n条指令：<code>history n</code>。</p></li></ol><h2 id="实验过程">实验过程</h2><h3 id="shell主体">Shell主体</h3><p>首先我们来实现Shell的基本结构。一个Shell的基本行为是不断接收用户的输入，并根据指令执行相应的操作。因此我们可以快速写出其main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXCMD 1024 <span class="hljs-comment">//Max number of commands that can be recorded  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLINE 1024 <span class="hljs-comment">//Max number of characters a command line can have  </span></span><br>  <br><span class="hljs-keyword">char</span> cmd_list[MAXCMD][MAXLINE];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> cmdline[MAXLINE]; <span class="hljs-comment">//Command line string  </span><br>  <br>    cmd_cnt = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shell: %s %% &quot;</span>, getcwd(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));  <br>        <span class="hljs-comment">//Read the command line from stdin  </span><br>        <span class="hljs-keyword">if</span>(fgets(cmdline, MAXLINE, <span class="hljs-built_in">stdin</span>) == <span class="hljs-literal">NULL</span>) &#123;  <br>            print_message(<span class="hljs-string">&quot;Error occurred when reading command line!&quot;</span>);  <br>            <span class="hljs-keyword">continue</span>;  <br>        &#125;  <br>          <br>        <span class="hljs-built_in">strcpy</span>(cmd_list[cmd_cnt], cmdline);  <br>        cmd_cnt++;  <br>        <span class="hljs-comment">//Evaluate the command line  </span><br>        eval(cmdline);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>由于后续需要通过history指令查询用户输入过的指令，这里我们设置了一个全局变量来记录用户每次输入的指令字符串。</p><h3 id="指令输入解析">指令输入解析</h3><p>接下来我们对用户输入的指令进行结构化解析。我们使用一个二维字符串数组来存储用户输入的指令及参数流，这个数组的结构如下：</p><img src="/2021/03/02/os/os-exp-shell/arg_store.png" class="" title="arg_store"><p>随后我们通过一个结构体来存储每行指令的全局特性（输入输出重定向，是否后台运行等）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXPROG 16 <span class="hljs-comment">//Max program that can be connected by pipe  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXARGS 128 <span class="hljs-comment">//Max number of arguments a command can have  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parseline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline, <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS], struct cmd_feature *feature)</span></span>;<br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> is_error; <span class="hljs-comment">//Error flag, 0 - No error, 1 - Error in cmdline  </span><br>    <span class="hljs-keyword">int</span> bg; <span class="hljs-comment">//Background flag, 1 - Background, 0 - Foreground  </span><br>    <span class="hljs-keyword">int</span> prog_num; <span class="hljs-comment">//Number of program connected by pipe (0 means no pipe feature)  </span><br>    <span class="hljs-keyword">int</span> input_mode; <span class="hljs-comment">//Overall input mode, 0 - Standard Input, 1 - File Input  </span><br>    <span class="hljs-keyword">int</span> output_mode; <span class="hljs-comment">//Overall output mode, 0 - Standard Output, 1 - File Output (Overrride), 2 - File Output (Append)  </span><br>    <span class="hljs-keyword">char</span> *infile; <span class="hljs-comment">//Path of input file  </span><br>    <span class="hljs-keyword">char</span> *outfile; <span class="hljs-comment">//Path of output file  </span><br>&#125;;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS]; <span class="hljs-comment">//Argument strings  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>  <br>    <span class="hljs-comment">//Parse the command line  </span><br>    parseline(cmdline, argv, &amp;line_feature);  <br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来实现具体的指令解析逻辑。由于用户的指令是一次性输入的，因此我们需要考虑所有可能的情况。总的来说，对于一行指令，可能出现的内容有如下几个：</p><p><strong>(1)</strong> <strong>由管道连接符相连接的一组待执行的程序</strong></p><p><strong>(2)</strong> <strong>每个待执行程序附带的若干参数</strong></p><p><strong>(3)</strong> <strong>输入重定向</strong></p><p><strong>(4)</strong> <strong>输出重定向</strong></p><p><strong>(5)</strong> <strong>后台运行标识符</strong></p><p>我们分情况讨论所有的这些情况，并将它们结构化存储到相应的数组和结构体中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parseline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline, <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS], struct cmd_feature *feature)</span></span>&#123; <br>    <span class="hljs-keyword">char</span> *delim; <span class="hljs-comment">// Points to first space delimiter  </span><br>    <span class="hljs-keyword">int</span> argc; <span class="hljs-comment">// Number of arguments  </span><br>    <span class="hljs-keyword">int</span> prog_cnt; <span class="hljs-comment">//Counter of programs  </span><br>  <br>    cmdline[<span class="hljs-built_in">strlen</span>(cmdline) - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// Replace trailing &#x27;\n&#x27; with space  </span><br>    <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore leading spaces  </span><br>        cmdline++;  <br>  <br>    <span class="hljs-comment">// Build the argv list  </span><br>    feature-&gt;is_error = <span class="hljs-number">0</span>;  <br>    feature-&gt;input_mode = <span class="hljs-number">0</span>;  <br>    feature-&gt;output_mode = <span class="hljs-number">0</span>;  <br>    prog_cnt = <span class="hljs-number">0</span>;  <br>    argc = <span class="hljs-number">0</span>;  <br>    delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>    <span class="hljs-keyword">while</span> (delim) &#123;  <br>        <span class="hljs-keyword">char</span> *arg_tmp = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&lt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;input_mode = <span class="hljs-number">1</span>;  <br>            feature-&gt;infile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&gt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;output_mode = <span class="hljs-number">1</span>;  <br>            feature-&gt;outfile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;output_mode = <span class="hljs-number">2</span>;  <br>            feature-&gt;outfile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;|&quot;</span>))&#123;  <br>            argc++;  <br>            argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>            prog_cnt++;  <br>            argc = <span class="hljs-number">0</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            argv[prog_cnt][argc] = arg_tmp;  <br>            argc++;  <br>        &#125;  <br>        *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>        cmdline = delim + <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>            cmdline++;  <br>        delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>    &#125;  <br>    argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>    feature-&gt;prog_num = prog_cnt + <span class="hljs-number">1</span>;  <br>  <br>    <span class="hljs-comment">// Figure out whether the job should be run in foreground or background  </span><br>    <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">0</span>)&#123;  <br>        feature-&gt;bg = <span class="hljs-number">0</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[prog_cnt][argc - <span class="hljs-number">1</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))  <br>        feature-&gt;bg = <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">else</span>  <br>        feature-&gt;bg = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (feature-&gt;bg != <span class="hljs-number">0</span>) &#123;  <br>        argc--;  <br>        argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内置指令">内置指令</h3><p>我们的Shell中包含4条内置指令，当检测到用户输入这四条指令时，我们需要立即执行并给出相应的反馈。这里我们分别使用函数对4条内置指令的实现进行封装，并将判断是否为内置指令的过程封装为另一个函数以供主函数调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Judge whether the command is a builtin command, 1 - Builtin command, 0 - Other command  </span><br> builtin_cmd(<span class="hljs-keyword">char</span> **argv)&#123;  <br> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;cd&quot;</span>))&#123;  <br>     change_dir(argv);  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;history&quot;</span>))&#123;  <br>     print_history();  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;mytop&quot;</span>))&#123;  <br>     perform_top();  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;exit&quot;</span>))&#123;  <br>     <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br> &#125;  <br> <span class="hljs-keyword">else</span>  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于exit指令，我们只需要直接退出程序即可。</p><p>对于cd指令，我们可以通过使用chdir系统调用来更改工作目录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_dir</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span></span>&#123;  <br>    <span class="hljs-keyword">if</span>(chdir(argv[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">0</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error when changing working directory!&quot;</span>);  <br>    &#125;;  <br>&#125;<br></code></pre></td></tr></table></figure><p>对于history指令，由于前面我们已经通过cmd_list全局变量保存了每次输入的指令，这里我们只需要遍历这一数组打印指令即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_history</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cmd_cnt; i++)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;%s&quot;</span>, cmd_list[i]);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>对于mytop指令，由于逻辑相对较为复杂，我们放在后文中讨论。</p><h3 id="任务流管理">任务流管理</h3><p>若用户输入的不为内置指令，则Shell需要执行相应的任务序列。由于允许后台程序，Shell中可能会同时存在多个子任务，因此我们需要将每个任务相互隔离开来。考虑到后续管道的建立，我们将使用如下的进程结构图：</p><img src="/2021/03/02/os/os-exp-shell/proc_structure.png" class="" title="proc_structure"><p>首先我们使用fork函数创建一个子进程用于托管当前指令流的任务，随后对于任务序列中的每条指令，我们再分别fork一个单独的进程用于执行程序。由于任务序列中的任务为顺序执行的，因此我们需要使用waitpid函数等待上一任务执行完毕再新建下一任务进程。<strong>这里需要注意的是，由于我们是在托管进程中再新开子进程执行程序的，托管进程在子任务全部结束后并不会自动退出，这样父进程中的后续代码同样会被托管进程执行，造成无限嵌套，因此我们必须在子任务结束后手动结束托管进程。</strong>相关代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> state;  <br>    waitpid(pid, &amp;state, <span class="hljs-number">0</span>);  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS]; <span class="hljs-comment">//Argument strings  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>  <br>    <span class="hljs-comment">//Parse the command line  </span><br>    parseline(cmdline, argv, &amp;line_feature);  <br>  <br>    <span class="hljs-comment">//Command line error  </span><br>    <span class="hljs-keyword">if</span>(line_feature.is_error == <span class="hljs-number">1</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-comment">//Blank space  </span><br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Subsequent logic goes here  </span><br>  <br>                    <span class="hljs-keyword">if</span> (execvp(argv[i][<span class="hljs-number">0</span>], argv[i]) &lt; <span class="hljs-number">0</span>) &#123;  <br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;%s: Program not found.\n&quot;</span>, argv[i][<span class="hljs-number">0</span>]);  <br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br>                    &#125;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    waitfg(pid);  <br>                &#125;  <br>            &#125;  <br>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//Subsequent logic goes here  </span><br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当用户输入的指令带有&lt;、&gt;或&gt;&gt;时，则需要将程序的输入输出流重定向到用户指定的文件中。由于在前面的解析中我们已经将需要的参数记录了下来，这里我们只需要根据结构化的信息打开文件，并利用dup函数将其文件描述符赋给标准输入/输出即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                <span class="hljs-comment">//Other codes omitted  </span><br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Input redirection  </span><br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; line_feature.input_mode == <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.infile, O_RDONLY);  <br>                        close(STDIN_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Output redirection(Override file)  </span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.output_mode == <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.outfile, O_CREAT | O_WRONLY | O_TRUNC, S_IREAD | S_IWRITE);  <br>                        close(STDOUT_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Output redirection(Append to the end of file)  </span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.output_mode == <span class="hljs-number">2</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.outfile, O_CREAT | O_WRONLY | O_APPEND, S_IREAD | S_IWRITE);  <br>                        close(STDOUT_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                &#125;  <br>                <span class="hljs-comment">//Other codes omitted  </span><br>            &#125;  <br>            <span class="hljs-comment">//Other codes omitted  </span><br>        &#125;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="管道连接">管道连接</h3><p>当用户输入的指令中包含多于一个程序时，我们需要通过管道将前一个程序的输出与后一个程序的输入相连接。我们可以使用pipe函数来创建管道。对于一根管道，我们需要传入一个大小为2的一维数组作为管道的输入和输出端文件描述符，由于一条指令中可能含有多个程序，因此我们使用一个二维数组来为每两个程序间分别开辟一根管道以实现程序通讯的隔离：</p><img src="/2021/03/02/os/os-exp-shell/pipe_illustrate.png" class="" title="pipe_illustrate"><p>现在，我们只需要使用上文中输入输出重定向的方式将程序的输入输出分别重定向到管道的入口和出口即可。需要注意的是，在任务托管进程中，我们需要关闭管道的输入端，以防止父子进程间的管道交互：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXPROG 16 <span class="hljs-comment">//Max program that can be connected by pipe  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>    <span class="hljs-keyword">int</span> pipe_gate[MAXPROG][<span class="hljs-number">2</span>];  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                pipe(pipe_gate[i]);  <br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                    <span class="hljs-comment">//Pipe connection  </span><br>                    <span class="hljs-keyword">if</span> (line_feature.prog_num &gt; <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;  <br>                            close(STDOUT_FILENO);  <br>                            close(pipe_gate[i][<span class="hljs-number">0</span>]);  <br>                            dup(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == line_feature.prog_num - <span class="hljs-number">1</span>) &#123;  <br>                            close(STDIN_FILENO);  <br>                            close(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);  <br>                            dup(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);  <br>                        &#125; <span class="hljs-keyword">else</span> &#123;  <br>                            close(STDIN_FILENO);  <br>                            close(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);  <br>                            dup(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);  <br>                            close(STDOUT_FILENO);  <br>                            close(pipe_gate[i][<span class="hljs-number">0</span>]);  <br>                            dup(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                        &#125;  <br>                    &#125;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    close(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                    waitfg(pid);  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-comment">//Other codes omitted  </span><br>        &#125;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="后台运行">后台运行</h3><p>当用户输入的指令最后含有&amp;时，表明用户希望该任务流在后台执行。对于Shell主进程来说，我们只需要让其不等待子进程结束直接进入下一轮循环即可。但若直接这样做，则当子进程运行结束后将成为僵尸进程占用系统资源，因此我们需要使用信号系统将其交给MINIX系统托管。此外，为了防止子进程受到终端输入输出的影响，我们需要将其输入输出流重定向到/dev/null下。同样的，由于前面我们已经保存了当前指令是否要后台执行的信息，这里我们只需要直接读取前文结构体中的相关字段即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br> <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br> <span class="hljs-comment">//Other codes omitted  </span><br> <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>     <span class="hljs-keyword">if</span>(line_feature.bg)&#123;  <br>         signal(SIGCHLD, SIG_IGN);  <br>     &#125;  <br>     <span class="hljs-keyword">else</span>&#123;  <br>         signal(SIGCHLD, SIG_DFL);  <br>     &#125;  <br>     <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>             <span class="hljs-comment">//Other codes omitted  </span><br>             <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                 <span class="hljs-comment">//Other codes omitted  </span><br>                 <span class="hljs-comment">//Background command  </span><br>                 <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.bg) &#123;  <br>                     <span class="hljs-keyword">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);  <br>                     close(STDIN_FILENO);  <br>                     dup(fd);  <br>                     close(STDOUT_FILENO);  <br>                     dup(fd);  <br>                 &#125;  <br>                 <span class="hljs-comment">//Other codes omitted  </span><br>             &#125;  <br>             <span class="hljs-comment">//Other codes omitted  </span><br>         &#125;  <br>         <span class="hljs-comment">//Other codes omitted  </span><br>     &#125; <span class="hljs-keyword">else</span> &#123;  <br>         <span class="hljs-keyword">if</span> (!line_feature.bg) &#123;  <br>             waitfg(pid);  <br>         &#125;  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><h3 id="系统资源查看">系统资源查看</h3><p>现在我们来实现mytop指令的逻辑。当用户输入mytop指令时，Shell需要打印出当前系统的内存使用情况及CPU占用率。我们可以在MINIX系统的/proc目录下查询到这些信息。</p><p>对于内存使用情况，我们需要打开proc目录下的meminfo文件。该文件中共有5个参数，分别对应页面大小、总页数量、空闲页数量、最大页数量以及缓存页数量。我们只需将其依次读入，并将页面大小与其他几个参数依次向乘，即可得到内存的相应使用情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXBUF 1024 <span class="hljs-comment">//Max buffer size for an file read operation  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_memory</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *total_size, <span class="hljs-keyword">int</span> *free_size, <span class="hljs-keyword">int</span> *cached_size)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> mem_f; <span class="hljs-comment">//File descriptor of memory info  </span><br>    <span class="hljs-keyword">int</span> bufsize; <span class="hljs-comment">//Actual size of bytes read  </span><br>    <span class="hljs-keyword">char</span> buf[MAXBUF]; <span class="hljs-comment">//Buffer for reading from file  </span><br>    <span class="hljs-keyword">int</span> page_size, total_page, free_page, largest_page, cached_page;  <br>  <br>    mem_f = open(MEMPATH, O_RDONLY); <span class="hljs-comment">//Open memory info file  </span><br>    bufsize = read(mem_f, buf, <span class="hljs-keyword">sizeof</span>(buf)); <span class="hljs-comment">//Read memory info  </span><br>    <span class="hljs-keyword">if</span>(bufsize == <span class="hljs-number">-1</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error reading memory info!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">else</span>&#123;  <br>        page_size = atoi(strtok(buf, <span class="hljs-string">&quot; &quot;</span>));  <br>        total_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        free_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        largest_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        cached_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        *total_size = (page_size * total_page) / <span class="hljs-number">1024</span>;  <br>        *free_size = (page_size * free_page) / <span class="hljs-number">1024</span>;  <br>        *cached_size = (page_size * cached_page) / <span class="hljs-number">1024</span>;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> total_size, free_size, cached_size; <span class="hljs-comment">//Info of memory  </span><br>  <br>    get_memory(&amp;total_size, &amp;free_size, &amp;cached_size);  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Total: %dK, Free: %dK, Cached: %dK\n&quot;</span>, total_size, free_size, cached_size);  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>CPU占用率的获取方式相对较为复杂。首先我们需要从proc目录下的kinfo文件中获取进程和任务的总数量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PROCPATH <span class="hljs-meta-string">&quot;/proc/kinfo&quot;</span></span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nr_procs, nr_tasks;  <br><span class="hljs-keyword">int</span> nr_total; <span class="hljs-comment">//Number of process + task  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getkinfo</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd; <span class="hljs-comment">//File descriptor of kinfo  </span><br>    <span class="hljs-keyword">int</span> bufsize; <span class="hljs-comment">//Actual buffer size  </span><br>    <span class="hljs-keyword">char</span> buf[MAXBUF], pathbuf[MAXBUF]; <span class="hljs-comment">//Buffer for file reading  </span><br>  <br>    fd = open(PROCPATH, O_RDONLY);  <br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;  <br>        print_message(<span class="hljs-string">&quot;Reading kinfo file error!&quot;</span>);  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>    bufsize = read(fd, buf, <span class="hljs-keyword">sizeof</span>(buf)); <span class="hljs-comment">//Read process info  </span><br>    <span class="hljs-keyword">if</span>(bufsize == <span class="hljs-number">-1</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error reading total process info!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">else</span> &#123;  <br>        nr_procs = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) atoi(strtok(buf, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//Number of process  </span><br>        nr_tasks = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//Number of tasks  </span><br>        close(fd);  <br>        nr_total = (<span class="hljs-keyword">int</span>) (nr_procs + nr_tasks);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们需要遍历整个proc目录以获取各个进程的具体信息。对于一个进程号为PID的进程，其信息被保存在/proc/PID/psinfo的文件下，该文件中的前13个参数分别为版本号、类型<strong>（T - Task，S - System，U - User）</strong>、端点、进程名字、进程状态<strong>（S - Sleep，W - Wait，Zombie - Z，R - Run，T - Stop）</strong>、阻塞状态、动态优先级、滴答、高周期、低周期、内存、有效用户和静态优先级。为了方便起见我们定义一个结构体用于保存每个进程的各项参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cputimenames[] = &#123; <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;ipc&quot;</span>, <span class="hljs-string">&quot;kernelcall&quot;</span> &#125;; <span class="hljs-comment">//CPU cycle types  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CPUTIMENAMES (sizeof(cputimenames)/sizeof(cputimenames[0]))  </span><br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> &#123;</span>  <br>    <span class="hljs-keyword">int</span> p_flags;  <br>    <span class="hljs-keyword">int</span> p_endpoint;  <br>    <span class="hljs-keyword">pid_t</span> p_pid;  <br>    <span class="hljs-keyword">uint64_t</span> p_cpucycles[CPUTIMENAMES];  <br>    <span class="hljs-keyword">int</span> p_priority;  <br>    <span class="hljs-keyword">int</span> p_blocked;  <br>    <span class="hljs-keyword">time_t</span> p_user_time;  <br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> p_memory;  <br>    <span class="hljs-keyword">uid_t</span> p_effuid;  <br>    <span class="hljs-keyword">int</span> p_nice;  <br>    <span class="hljs-keyword">char</span> p_name[<span class="hljs-number">17</span>];  <br>&#125;;<br></code></pre></td></tr></table></figure><p>并定义一组宏方便后续对各项参数的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFOPATH <span class="hljs-meta-string">&quot;/proc&quot;</span>  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CPUTIME(m, i) (m &amp; (1L &lt;&lt; (i)))  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  USED       0x1  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  IS_TASK    0x2  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  IS_SYSTEM  0x4  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  BLOCKED    0x8  </span><br>  <br><span class="hljs-comment">/* Process types. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_TASK   <span class="hljs-meta-string">&#x27;T&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_SYSTEM <span class="hljs-meta-string">&#x27;S&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_USER   <span class="hljs-meta-string">&#x27;U&#x27;</span>  </span><br>  <br><span class="hljs-comment">/* General process states. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_SLEEP <span class="hljs-meta-string">&#x27;S&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_WAIT  <span class="hljs-meta-string">&#x27;W&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_ZOMBIE    <span class="hljs-meta-string">&#x27;Z&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_RUN   <span class="hljs-meta-string">&#x27;R&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_STOP  <span class="hljs-meta-string">&#x27;T&#x27;</span>  </span><br>  <br><span class="hljs-comment">/* Kernel tasks. These all run in the same address space. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ASYNCM  ((int) -5) <span class="hljs-comment">/* notifies about finished async sends */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IDLE    ((int) -4) <span class="hljs-comment">/* runs when no one else can run */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLOCK   ((int) -3) <span class="hljs-comment">/* alarms and other clock functions */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYSTEM  ((int) -2) <span class="hljs-comment">/* request system functionality */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KERNEL  ((int) -1) <span class="hljs-comment">/* pseudo-process for IPC and scheduling */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HARDWARE     KERNEL <span class="hljs-comment">/* for hardware interrupt handlers */</span></span><br></code></pre></td></tr></table></figure><p>由于每个进程中保存的信息均为自该程序启动之时到当前时间戳的统计信息，因此为了获取即时的占用信息，我们需要在极短的时间内对每个进程信息文件读取两次，并通过计算差值的方式来获得即时的占用信息。为此我们分别申明两个结构体用于存储两次读取到的信息，并在主函数中读取两次进程信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">proc</span> = <span class="hljs-title">NULL</span>, *<span class="hljs-title">prev_proc</span> = <span class="hljs-title">NULL</span>;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_file</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span>;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_dir</span><span class="hljs-params">()</span></span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_procs</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span>  <br>    <span class="hljs-keyword">int</span> i;  <br>  <br>    p = prev_proc;  <br>    prev_proc = proc;  <br>    proc = p;  <br>  <br>    <span class="hljs-keyword">if</span> (proc == <span class="hljs-literal">NULL</span>) &#123;  <br>        proc = <span class="hljs-built_in">malloc</span>(nr_total * <span class="hljs-keyword">sizeof</span>(proc[<span class="hljs-number">0</span>])); <span class="hljs-comment">//Allocate a new process structure  </span><br>        <span class="hljs-comment">//Allocate failed  </span><br>        <span class="hljs-keyword">if</span> (proc == <span class="hljs-literal">NULL</span>) &#123;  <br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Out of memory!\n&quot;</span>);  <br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//Initialize all the entry ranging in the total process+task num  </span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nr_total; i++)  <br>        proc[i].p_flags = <span class="hljs-number">0</span>;  <br>  <br>    parse_dir();  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    getkinfo();  <br>    get_procs();  <br>    <span class="hljs-keyword">if</span> (prev_proc == <span class="hljs-literal">NULL</span>)  <br>        get_procs();  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>一个进程的CPU占用时间可以从两次读取到的CPU周期之差得到，不过需要注意的是，MINIX进程信息文件中保存的分别是周期的高32位及低32位，我们需要首先将他们拼接成一个完整的64位整数才能进行后续的计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">uint64_t</span> <span class="hljs-title">make_cycle</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> lo, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> hi)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">uint64_t</span>)hi &lt;&lt; <span class="hljs-number">32</span>) | (<span class="hljs-keyword">uint64_t</span>)lo;  <br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以来实现遍历proc目录的函数了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_file</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">char</span> path[MAXBUF], name[<span class="hljs-number">256</span>], type, state;  <br>    <span class="hljs-keyword">int</span> version, endpt, effuid;  <br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cycles_hi, cycles_lo;  <br>    FILE *fp;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span>  <br>    <span class="hljs-keyword">int</span> i;  <br>  <br>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;/proc/%d/psinfo&quot;</span>, pid);  <br>  <br>    <span class="hljs-keyword">if</span> ((fp = fopen(path, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d&quot;</span>, &amp;version) != <span class="hljs-number">1</span>) &#123;  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %c %d&quot;</span>, &amp;type, &amp;endpt) != <span class="hljs-number">2</span>) &#123;  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    slot++;  <br>  <br>    <span class="hljs-keyword">if</span>(slot &lt; <span class="hljs-number">0</span> || slot &gt;= nr_total) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Unreasonable endpoint number %d\n&quot;</span>, endpt);  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    p = &amp;proc[slot];  <br>  <br>    <span class="hljs-keyword">if</span> (type == TYPE_TASK)  <br>        p-&gt;p_flags |= IS_TASK;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == TYPE_SYSTEM)  <br>        p-&gt;p_flags |= IS_SYSTEM;  <br>  <br>    p-&gt;p_endpoint = endpt;  <br>    p-&gt;p_pid = pid;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %255s %c %d %d %lu %*u %lu %lu&quot;</span>,  <br>               name, &amp;state, &amp;p-&gt;p_blocked, &amp;p-&gt;p_priority,  <br>               &amp;p-&gt;p_user_time, &amp;cycles_hi, &amp;cycles_lo) != <span class="hljs-number">7</span>) &#123;  <br>  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">strncpy</span>(p-&gt;p_name, name, <span class="hljs-keyword">sizeof</span>(p-&gt;p_name)<span class="hljs-number">-1</span>);  <br>    p-&gt;p_name[<span class="hljs-keyword">sizeof</span>(p-&gt;p_name)<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (state != STATE_RUN)  <br>        p-&gt;p_flags |= BLOCKED;  <br>    p-&gt;p_cpucycles[<span class="hljs-number">0</span>] = make_cycle(cycles_lo, cycles_hi);  <br>    p-&gt;p_memory = <span class="hljs-number">0L</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (!(p-&gt;p_flags &amp; IS_TASK)) &#123;  <br>        <span class="hljs-keyword">int</span> j;  <br>        <span class="hljs-keyword">if</span> ((j=<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu %*u %*u %*c %*d %*u %u %*u %d %*c %*d %*u&quot;</span>,  <br>                      &amp;p-&gt;p_memory, &amp;effuid, &amp;p-&gt;p_nice)) != <span class="hljs-number">3</span>) &#123;  <br>  <br>            fclose(fp);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>  <br>        p-&gt;p_effuid = effuid;  <br>    &#125; <span class="hljs-keyword">else</span> p-&gt;p_effuid = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; CPUTIMENAMES; i++) &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu %lu&quot;</span>,  <br>                  &amp;cycles_hi, &amp;cycles_lo) == <span class="hljs-number">2</span>) &#123;  <br>            p-&gt;p_cpucycles[i] = make_cycle(cycles_lo, cycles_hi);  <br>        &#125; <span class="hljs-keyword">else</span>  &#123;  <br>            p-&gt;p_cpucycles[i] = <span class="hljs-number">0</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> ((p-&gt;p_flags &amp; IS_TASK)) &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu&quot;</span>, &amp;p-&gt;p_memory) != <span class="hljs-number">1</span>) &#123;  <br>            p-&gt;p_memory = <span class="hljs-number">0</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    p-&gt;p_flags |= USED;  <br>  <br>    fclose(fp);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_dir</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    DIR *p_dir; <span class="hljs-comment">//Pointer of directory  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">p_ent</span>;</span> <span class="hljs-comment">//Info of the directory  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//Name of sub directory(PID)  </span><br>    <span class="hljs-keyword">char</span> *end;  <br>  <br>    <span class="hljs-keyword">if</span> ((p_dir = opendir(INFOPATH)) == <span class="hljs-literal">NULL</span>) &#123;  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//Traverse the directory  </span><br>    <span class="hljs-keyword">for</span> (p_ent = readdir(p_dir); p_ent != <span class="hljs-literal">NULL</span>; p_ent = readdir(p_dir)) &#123;  <br>        pid = strtol(p_ent-&gt;d_name, &amp;end, <span class="hljs-number">10</span>); <span class="hljs-comment">//Get the name of sub directory  </span><br>  <br>        <span class="hljs-keyword">if</span> (!end[<span class="hljs-number">0</span>] &amp;&amp; pid != <span class="hljs-number">0</span>)  <br>            parse_file(pid);  <br>    &#125;  <br>  <br>    closedir(p_dir);  <br>&#125;<br></code></pre></td></tr></table></figure><p>到此，我们已经将所需要的进程信息结构化存储至了结构体中，接下来我们来计算CPU占用率。CPU的总使用时间为用户进程、系统进程及空闲进程的占用时间之和，由此可知要得到CPU占用率，我们只要统计出总使用时间、用户进程占用时间和系统进程占用时间即可。对于每个进程，我们可以利用其CPU周期之差算出其滴答：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">uint64_t</span> <span class="hljs-title">cputicks</span><span class="hljs-params">(struct proc *p1, struct proc *p2, <span class="hljs-keyword">int</span> timemode)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> i;  <br>    <span class="hljs-keyword">uint64_t</span> t = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; CPUTIMENAMES; i++) &#123;  <br>        <span class="hljs-keyword">if</span>(!CPUTIME(timemode, i))  <br>            <span class="hljs-keyword">continue</span>;  <br>        <span class="hljs-keyword">if</span>(p1-&gt;p_endpoint == p2-&gt;p_endpoint) &#123;  <br>            t = t + p2-&gt;p_cpucycles[i] - p1-&gt;p_cpucycles[i];  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            t = t + p2-&gt;p_cpucycles[i];  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> t;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们遍历所有的有效进程，再结合进程类型及进程状态，即可得到所要的三个信息，再通过用户进程占用时间加系统进程占用时间与CPU总使用时间做比值，即可得到最终的CPU占用率：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">print_procs</span><span class="hljs-params">(struct proc *proc1, struct proc *proc2, <span class="hljs-keyword">int</span> cputimemode)</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> p, nprocs;  <br>    <span class="hljs-keyword">uint64_t</span> systemticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">uint64_t</span> userticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">uint64_t</span> total_ticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tp</span> *<span class="hljs-title">tick_procs</span> = <span class="hljs-title">NULL</span>;</span>  <br>  <br>    <span class="hljs-keyword">if</span> (tick_procs == <span class="hljs-literal">NULL</span>) &#123;  <br>        tick_procs = <span class="hljs-built_in">malloc</span>(nr_total * <span class="hljs-keyword">sizeof</span>(tick_procs[<span class="hljs-number">0</span>]));  <br>  <br>        <span class="hljs-keyword">if</span> (tick_procs == <span class="hljs-literal">NULL</span>) &#123;  <br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Out of memory!\n&quot;</span>);  <br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">for</span> (p = nprocs = <span class="hljs-number">0</span>; p &lt; nr_total; p++) &#123;  <br>        <span class="hljs-keyword">uint64_t</span> uticks;  <br>        <span class="hljs-keyword">if</span> (!(proc2[p].p_flags &amp; USED))  <br>            <span class="hljs-keyword">continue</span>;  <br>        tick_procs[nprocs].p = proc2 + p;  <br>        tick_procs[nprocs].ticks = cputicks(&amp;proc1[p], &amp;proc2[p], cputimemode);  <br>        uticks = cputicks(&amp;proc1[p], &amp;proc2[p], <span class="hljs-number">1</span>);  <br>        total_ticks = total_ticks + uticks;  <br>        <span class="hljs-keyword">if</span>(!(proc2[p].p_flags &amp; IS_TASK)) &#123;  <br>            <span class="hljs-keyword">if</span>(proc2[p].p_flags &amp; IS_SYSTEM)  <br>                systemticks = systemticks + tick_procs[nprocs].ticks;  <br>            <span class="hljs-keyword">else</span>  <br>                userticks = userticks + tick_procs[nprocs].ticks;  <br>        &#125;  <br>  <br>        nprocs++;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> (total_ticks == <span class="hljs-number">0</span>)  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100.0</span> * (systemticks + userticks) / total_ticks;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">float</span> idle = print_procs(prev_proc, proc, <span class="hljs-number">1</span>);  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;CPU Usage: %f%%\n&quot;</span>, idle);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果">运行结果</h3><p>我们使用实验要求中的测试用例在MINIX环境下对Shell进行测试：</p><img src="/2021/03/02/os/os-exp-shell/run_1.png" class="" title="run_1"><img src="/2021/03/02/os/os-exp-shell/run_2.png" class="" title="run_2"><img src="/2021/03/02/os/os-exp-shell/run_3.png" class="" title="run_3"><p>可以发现，程序的行为均与预期相同。除此之外，我们再结合多重管道、输出重定向及后台运行符对Shell进行更为复杂的测试：</p><img src="/2021/03/02/os/os-exp-shell/run_4.png" class="" title="run_4"><p>Shell同样可以正确的解析命令并执行相应的操作。</p><h2 id="总结">总结</h2><p>在本实验中，我们从零开始在MINIX环境下完整实现了一个基本的Shell终端，这其中综合了系统调用、文件管理、进程管理及I/O交互的大量理论知识。通过该实验，极大的加深了我们对这些系统知识的理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;在MINIX环境下通过系统调用实现一个基本的Shell。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;Shell能解析的命令行如下:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;带参数的程序运行功能。&lt;/</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>实数集不可数的证明</title>
    <link href="http://gonggongjohn.me/2021/02/27/math-analysis/real-number-uncountability/"/>
    <id>http://gonggongjohn.me/2021/02/27/math-analysis/real-number-uncountability/</id>
    <published>2021-02-27T14:37:37.000Z</published>
    <updated>2021-02-27T14:38:48.142Z</updated>
    
    <content type="html"><![CDATA[<p>实数集是不可数集这一结论的证明是近代集合论研究的一大重要标志。随着近代分析学的发展，这一结论可以从许多不同的角度推导而出。这些方法融合了许多重要的分析思想及数学技巧，在此进行一个简单的整理和总结。</p><a id="more"></a><blockquote><p><strong>Theorem:</strong> 实数集 <span class="math display">\[\mathbb{R}\]</span> 不可数</p></blockquote><h2 id="对角线法">对角线法</h2><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则区间 <span class="math display">\[[0,1] \subset \mathbb{R}\]</span> 必然可数</p><p>因此必然可以使用十进制表示法将 <span class="math display">\[[0,1]\]</span> 中的每一个数一一列出： <span class="math display">\[r_1 = 0.d_{11} d_{12} d_{13} d_{14} ... \\r_2 = 0.d_{21} d_{22} d_{23} d_{24} ... \\r_3 = 0.d_{31} d_{32} d_{33} d_{34} ... \\r_4 = 0.d_{41} d_{42} d_{43} d_{44} ... \\...\]</span> 其中 <span class="math display">\[d_{ij} \in \{0, 1, 2, ..., 9\}\]</span></p><p>现构造一新的实数 <span class="math display">\[r = 0.d_1 d_2 d_3 d_4 ...\]</span>，使得 <span class="math display">\[d_i = \left\{\begin{aligned}4, \ if \ d_{ii} \neq 4 \\5, \ if \ d_{ii} = 4\end{aligned}\right.\]</span> 显然 <span class="math display">\[r \in [0, 1]\]</span></p><p>而由于对任意 <span class="math display">\[i \in \mathbb{N}^+\]</span>，<span class="math display">\[r\]</span> 与 <span class="math display">\[r_i\]</span> 的第 <span class="math display">\[i\]</span> 位数字均不相同，因此 <span class="math display">\[r \neq r_i\]</span></p><p>由此我们构造出了一个未被列出的实数，这与 <span class="math display">\[[0,1]\]</span> 中的每一个数均可被列出矛盾</p><p>故 <span class="math display">\[[0,1]\]</span> 为不可数集，进而可知 <span class="math display">\[\mathbb{R}\]</span> 为不可数集。</p><h2 id="区间套法">区间套法</h2><blockquote><p><strong>Lemma:</strong> 若 <span class="math display">\[\{[a_n, b_n]\}\]</span> 形成一闭区间套，则存在唯一的实数 <span class="math display">\[\xi\]</span> 属于所有的闭区间 <span class="math display">\[[a_n, b_n]\]</span>，且 <span class="math display">\[\xi = \lim_\limits{n \to \infty} a_n = \lim_\limits{n \to \infty} b_n\]</span></p></blockquote><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则区间 <span class="math display">\[[0,1] \subset \mathbb{R}\]</span> 必然可数</p><p>因此我们可将 <span class="math display">\[[0,1]\]</span> 写为一数列 <span class="math display">\[r_1, r_2, ...,r_n,...\]</span></p><p>现将 <span class="math display">\[[0,1]\]</span> 三等分，则必存在某个区间 <span class="math display">\[[a_1, b_1] \subset [0,1]\]</span>，使得 <span class="math display">\[r_1 \notin [a_1, b_1]\]</span></p><p>接着继续将 <span class="math display">\[[a_1, b_1]\]</span> 三等分，则必存在某一子区间 <span class="math display">\[[a_2, b_2] \subset [a_1, b_1]\]</span>，使得 <span class="math display">\[r_2 \notin [a_2, b_2]\]</span></p><p>如此进行下去，可得一闭区间套 <span class="math display">\[\{[a_n, b_n]\}\]</span>，且满足对任意 <span class="math display">\[i \in \mathbb{N^+}\]</span>，有 <span class="math display">\[r_i \notin [a_i, b_i]\]</span></p><p>故由<strong>闭区间套定理</strong>可知，存在 <span class="math display">\[\xi \in \mathbb{R}\]</span>，使得对任意 <span class="math display">\[n \in \mathbb{N^+}\]</span>，有 <span class="math display">\[\xi \in [a_n, b_n]\]</span></p><p>于是存在 <span class="math display">\[\xi \in [0,1]\]</span>，使得对任意 <span class="math display">\[i \in \mathbb{R}^+\]</span>，有 <span class="math display">\[\xi \neq r_i\]</span>，与 <span class="math display">\[[0,1]\]</span> 中每一个数均可被列出矛盾</p><p>故 <span class="math display">\[[0,1]\]</span> 为不可数集，进而可知 <span class="math display">\[\mathbb{R}\]</span> 为不可数集。</p><h2 id="外测度法">外测度法</h2><p>对于 <span class="math display">\[\mathbb{R}\]</span> 上的任意闭区间 <span class="math display">\[I=[a,b]\]</span>，其体积 <span class="math display">\[V(I)=b-a\]</span></p><p>故由外测度定义 <span class="math display">\[m(S) = \inf \{ \sum_{i=1}^\infty V(I_i) \big| S \subset \bigcup_{i \in \mathbb{N}} I_i \}\]</span> 可知 <span class="math display">\[m(I) = b-a\]</span></p><p>而对任意可数集 <span class="math display">\[S\]</span>，<span class="math display">\[m(S) = 0\]</span></p><p>因此 <span class="math display">\[\mathbb{R}\]</span> 不可数</p><h2 id="baire纲定理">Baire纲定理</h2><blockquote><p>Lemma: 设 <span class="math display">\[(X, d)\]</span> 是一个完备的度量空间，则</p><ol type="1"><li>若 <span class="math display">\[(F_n)_{n=0}^\infty\]</span> 是一列无处稠密的闭集，则它的并的内部是空的</li><li>若 <span class="math display">\[(O_n))_{n=0}^\infty\]</span> 是一列在 <span class="math display">\[X\]</span> 中稠密的开集，则它的交在也 <span class="math display">\[X\]</span> 中稠密</li></ol></blockquote><p>Baire纲定理指出，一个完备的度量空间不能写成可数个无处稠密的集合的并</p><p>由于 <span class="math display">\[\mathbb{R}\]</span> 是完备的，且在其上有自然度量 <span class="math display">\[d(x,y) = |x-y|\]</span>，因此其为一个完备的度量空间</p><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则其可以表示为可数个单点集的并，而单点集的闭包即为它本身，也即是无处稠密的</p><p>这与Baire纲定理矛盾，因此 <span class="math display">\[\mathbb{R}\]</span> 必不可数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实数集是不可数集这一结论的证明是近代集合论研究的一大重要标志。随着近代分析学的发展，这一结论可以从许多不同的角度推导而出。这些方法融合了许多重要的分析思想及数学技巧，在此进行一个简单的整理和总结。&lt;/p&gt;</summary>
    
    
    
    <category term="分析学" scheme="http://gonggongjohn.me/categories/%E5%88%86%E6%9E%90%E5%AD%A6/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="Analysis" scheme="http://gonggongjohn.me/tags/Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Shell Lab实验记录</title>
    <link href="http://gonggongjohn.me/2021/01/29/computer-system/csapp-shlab/"/>
    <id>http://gonggongjohn.me/2021/01/29/computer-system/csapp-shlab/</id>
    <published>2021-01-29T15:48:59.000Z</published>
    <updated>2021-01-29T17:30:27.575Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说就是用C语言以及各种系统调用实现一个简单的Unix Shell，说的更直白点就是把CSAPP书上第八章提到的关于Shell的内容全部实现一遍，因此最快的办法应该就是先搭一个基本的框架出来，然后跟着trace的要求把功能一个个补齐。</p><a id="more"></a><h2 id="概览">概览</h2><p>首先我们来看一下Lab的具体要求和操作流程。</p><p>在Lab下的<strong>tsh.c</strong>文件里给出了一个Shell的基本框架，我们的任务就是要完成如下几个函数的具体实现：</p><ul><li><p><strong>eval</strong>：解析并执行用户输入的命令</p></li><li><p><strong>builtin_cmd</strong>：识别并解析Shell的内置函数</p></li><li><p><strong>do_bgfg</strong>：内置函数bg和fg的功能实现</p></li><li><p><strong>waitfg</strong>：等待前台任务完成</p></li><li><p><strong>sigchld_handler</strong>：SIGCHLD信号处理</p></li><li><p><strong>sigint_handler</strong>：SIGINT信号处理</p></li><li><p><strong>sigstp_handler</strong>：SIGSTP信号处理</p></li></ul><p>其中，内置函数包括如下几个：</p><ul><li><strong>quit</strong>：结束当前的Shell进程</li><li><strong>jobs</strong>：列出所有当前的后台任务</li><li><strong>bg &lt;jobs&gt;</strong>：向被挂起的前台任务发送SIGCONT信号，并将其转到后台运行</li><li><strong>fg &lt;jobs&gt;</strong>：向被挂起的后台任务发送SIGCONT信号，并将其转到前台运行</li></ul><p>任务要求我们必须回收所有的僵尸孩子进程，并对相应的信号给出正确的反馈。</p><p>为了方便起见，tsh.c文件中提供了一些已封装完成的函数可供我们使用：（仅列出了需要使用到的函数）</p><ul><li><strong>parseline</strong>：解析命令行字符串</li><li><strong>addjob</strong>：向任务列表添加任务</li><li><strong>deletejob</strong>：从任务列表移除任务</li><li><strong>listjobs</strong>：输出任务列表中所有任务的信息</li><li><strong>fgpid</strong>：获取当前前台任务的PID</li><li><strong>getjobpid/getjobjid</strong>：使用PID/Job ID获取任务实例</li><li><strong>pid2jid</strong>：PID号转Job ID号</li><li><strong>unix_error</strong>：发送错误信息并退出</li></ul><p>Lab设计了16个Trace任务用于测试给出的Shell，我们可以使用Lab中提供的<strong>sdriver.pl</strong>工具测试我们的Shell代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> ./sdriver.pl -t traceXX.txt -s ./tsh -a <span class="hljs-string">&quot;-p&quot;</span>  <span class="hljs-comment"># XX代表要使用的trace编号</span></span><br></code></pre></td></tr></table></figure><p>作为参考，我们可以将每个Trace的输出结果与tshref.out中的相应内容进行比对以验证功能是否正确。</p><h2 id="基本功能">基本功能</h2><h3 id="eval及builtin_cmd">eval及builtin_cmd</h3><p>我们先从eval和builtin_cmd函数入手。对于eval函数，其基本的逻辑如下：</p><ul><li>使用parseline函数解析命令行</li><li>边界判断（判断输入命令是否为空或仅有一个&amp;符号）</li><li>判断是否为内置函数，若是，则直接执行并返回</li><li>创建子进程并执行命令</li><li>将任务加入任务列表</li><li>若为前台任务，则等待其执行完成；否则输出信息并返回</li></ul><p>于是我们可以快速写出其对应的代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *argv[MAXARGS]; <span class="hljs-comment">//参数列表</span><br>    <span class="hljs-keyword">int</span> bg; <span class="hljs-comment">//前后台标识符</span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//最近创建子任务的PID号</span><br>  <span class="hljs-comment">//解析命令行</span><br>    bg = parseline(cmdline, argv);<br>  <span class="hljs-comment">//特判</span><br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))<br>        <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">//内置函数判断</span><br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>      <span class="hljs-comment">//创建子进程</span><br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-comment">//执行任务</span><br>            <span class="hljs-keyword">if</span>(execve(argv[<span class="hljs-number">0</span>], argv, environ) &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>      <span class="hljs-comment">//将任务加入任务列表</span><br>        <span class="hljs-keyword">if</span>(bg)<br>    addjob(jobs, pid, BG, cmdline);<br>        <span class="hljs-keyword">else</span><br>          addjob(jobs, pid, FG, cmdline);<br>      <span class="hljs-comment">//前后台任务处理</span><br>        <span class="hljs-keyword">if</span>(bg)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, pid2jid(pid), pid, cmdline);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            waitfg(pid);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>builtin_cmd函数的功能仅为判断命令是否为内置函数并调用对应的函数，因此其实现更为简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">builtin_cmd</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//处理quit指令</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;quit&quot;</span>))&#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  <span class="hljs-comment">//处理jobs指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;jobs&quot;</span>))&#123;<br>        listjobs(jobs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">//处理bg指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;bg&quot;</span>))&#123;<br>        do_bgfg(argv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">//处理fg指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>        do_bgfg(argv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do_bgfg">do_bgfg</h3><p>随后我们来处理内置函数bg和fg的实现。当用户输入bg或fg时，需要切换指定任务的运行状态。首先我们来看一下job实例的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> &#123;</span>              <br>    <span class="hljs-keyword">pid_t</span> pid;              <span class="hljs-comment">// 任务PID</span><br>    <span class="hljs-keyword">int</span> jid;                <span class="hljs-comment">// 任务Job ID</span><br>    <span class="hljs-keyword">int</span> state;              <span class="hljs-comment">// 任务状态：UNDEF（未定义）, BG（后台）, FG（前台）, or ST（停止）</span><br>    <span class="hljs-keyword">char</span> cmdline[MAXLINE];  <span class="hljs-comment">// 命令行字符串</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此可知我们只需要切换job实例中的state变量即可。这一逻辑可以通过下面这段代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>job-&gt;state = FG; <span class="hljs-comment">//转为前台任务</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>job-&gt;state = BG; <span class="hljs-comment">//转为后台任务</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此我们需要根据用户的输入获取到对应的job实例。用户可以通过PID或Job ID来指定要操作的任务，不过根据题目要求，我们需要讨论所有的输入情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> jid;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>;</span><br><span class="hljs-keyword">pid_t</span> pid;<br><span class="hljs-comment">//无参数的情况</span><br><span class="hljs-keyword">if</span>(argv[<span class="hljs-number">1</span>] == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//输入Job ID的情况</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;%%%d&quot;</span>, &amp;jid) &gt; <span class="hljs-number">0</span>)&#123;<br>job = getjobjid(jobs, jid);<br><span class="hljs-keyword">if</span>(job == <span class="hljs-literal">NULL</span> || job-&gt;state == UNDEF)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: No such job\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入PID的情况</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;%d&quot;</span>, &amp;pid) &gt; <span class="hljs-number">0</span>)&#123;<br>job = getjobpid(jobs, pid);<br><span class="hljs-keyword">if</span>(job == <span class="hljs-literal">NULL</span> || job-&gt;state == UNDEF)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%s): No such process\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入其他字符的情况</span><br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们需要向任务发送SIGCONT信号。需要注意的是，我们需要向任务及其子任务同时发送信号，因此我们需要在创建任务时将其自身和后续的子任务打包到一个独立的进程组中，这可以通过<strong>setpgid</strong>函数来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>            setpgid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//将自身及子进程放入一个以自身PID为组号的进程组中</span><br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就可以使用<strong>kill</strong>函数向整个进程组发送信号了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">kill(-pid, SIGCONT); <span class="hljs-comment">//向pid进程组发送SIGCONT信号</span><br></code></pre></td></tr></table></figure><p>随后的行为和eval中类似，只需分情况处理前台或后台任务即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>waitfg(pid);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, job-&gt;jid, pid, job-&gt;cmdline);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="waitfg">waitfg</h3><p>waitfg的作用基本就是<strong>在前台任务终止前锁住Shell进程的指令执行</strong>。我们可以使用<strong>while+pause</strong>语句来快速实现这一功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(pid == fgpid(jobs))&#123;<br>        pause();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="信号处理">信号处理</h2><h3 id="sigint及sigtstp">SIGINT及SIGTSTP</h3><p>首先我们来处理SIGINT和SIGTSTP信号。这两种信号的处理方式完全一致，均为向前台任务的整个进程组发送相应的信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">pid_t</span> pid = fgpid(jobs);<br><span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>    kill(-pid, sig);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于这一过程中可能会由于出现另外的异常而改变errno的值，因此我们需要在刚进入函数时保存errno的值，再在函数返回前将其恢复：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> old_errno = errno;<br>...<br>errno = old_errno; <br></code></pre></td></tr></table></figure><h3 id="sigchld">SIGCHLD</h3><p>按照实验要求，共有三种可能的情况会触发SIGCHLD信号：</p><ul><li>子任务正常结束</li><li>前台任务被信号终止</li><li>前台任务被信号暂停</li></ul><p>因此我们需要分情况处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sigchld_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> old_errno = errno;<br><span class="hljs-keyword">pid_t</span> pid;<br><span class="hljs-keyword">int</span> state; <span class="hljs-comment">//子进程结束状态码</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>;</span><br><span class="hljs-comment">//对所有已终止或暂停的子进程进行操作</span><br><span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>, &amp;state, WNOHANG | WUNTRACED)) &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//正常退出的情况</span><br><span class="hljs-keyword">if</span>(WIFEXITED(state))&#123;<br>deletejob(jobs, pid);<br>&#125;<br>    <span class="hljs-comment">//被信号终止的情况</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSIGNALED(state))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>, pid2jid(pid), pid, WTERMSIG(state));<br>deletejob(jobs, pid);<br>&#125;<br>    <span class="hljs-comment">//被信号暂停的情况</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSTOPPED(state))&#123;<br>job = getjobpid(jobs, pid);<br>job-&gt;state = ST; <span class="hljs-comment">//将子进程设置为暂停状态</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>, job-&gt;jid, pid, WSTOPSIG(state));<br>&#125;<br>&#125;<br>  errno = old_errno;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，我们需要备份errno以防止破坏其他的操作。</p><h2 id="调度排查">调度排查</h2><p>现在我们的程序已经能够通过绝大部分的Trace任务，但由于<strong>进程调度机制</strong>的存在，某些操作的执行顺序可能并不会如我们所愿，这样在某些情况下可能会导致<strong>竞争</strong>或<strong>死锁</strong>的问题，因此我们需要排查这些情况并解决。</p><p>首先在任务的添加和删除时，由于要修改全局变量jobs，我们不希望有其他信号处理函数打断这一过程导致jobs被修改，因此在执行这些函数时我们要屏蔽所有的信号接收：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>    ...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>    sigfillset(&amp;mask_all);<br>    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>    ...<br>    <span class="hljs-keyword">if</span>(bg)<br>addjob(jobs, pid, BG, cmdline);<br>    <span class="hljs-keyword">else</span><br>        addjob(jobs, pid, FG, cmdline);<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>...<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sigchld_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>...<br>sigfillset(&amp;mask_all);<br><span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>, &amp;state, WNOHANG | WUNTRACED)) &gt; <span class="hljs-number">0</span>)&#123;<br>sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>...<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>&#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，在修改任务状态时我们也需要屏蔽所有信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">do_bgfg</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span> </span><br><span class="hljs-function"></span>&#123;<br>    ...<br><span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>  ...<br>sigfillset(&amp;mask_all);<br>sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>...<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，我们继续检查eval函数，发现如果子进程在addjob函数被执行前便已终止，则sigchld_handler中的deletejob便无法正确删除相应的任务，因此我们需要在addjob被执行前屏蔽SIGCHLD信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    <span class="hljs-keyword">sigset_t</span> mask_one, mask_prev;<br>    ...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        sigemptyset(&amp;mask_one);<br>sigaddset(&amp;mask_one, SIGCHLD);<br>sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;mask_prev);<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，这一操作可能会使得子进程也无法接收到SIGCHLD信号，因此我们需要在创建子进程后恢复信号的接收：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>            sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>            ...<br>        &#125;<br>...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，我们考察waitfg函数，发现经过上面的修改后Shell进程已无法正确接受SIGCHLD指令。此时尽管我们可以暂时放开SIGCHLD信号的接收，但如果程序刚放开信号进程调度程序便调度至子进程并运行至子进程退出，则pause指令永远无法正确接收到SIGCHLD信号，此时便会出现死锁的情况。因此我们需要使用<strong>sigsuspend</strong>函数来代替以保证其不会被打断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">sigset_t</span> empty_mask;<br>    sigemptyset(&amp;empty_mask);<br><br>    <span class="hljs-keyword">while</span>(pid == fgpid(jobs))&#123;<br>        sigsuspend(&amp;empty_mask);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单来说就是用C语言以及各种系统调用实现一个简单的Unix Shell，说的更直白点就是把CSAPP书上第八章提到的关于Shell的内容全部实现一遍，因此最快的办法应该就是先搭一个基本的框架出来，然后跟着trace的要求把功能一个个补齐。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="http://gonggongjohn.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Computer-System" scheme="http://gonggongjohn.me/tags/Computer-System/"/>
    
  </entry>
  
  <entry>
    <title>求解最大团</title>
    <link href="http://gonggongjohn.me/2021/01/08/algorithm/course-exp/algorithm-exp13/"/>
    <id>http://gonggongjohn.me/2021/01/08/algorithm/course-exp/algorithm-exp13/</id>
    <published>2021-01-08T03:45:00.000Z</published>
    <updated>2021-12-09T02:07:51.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><p>给定一个图，如下所示。请找出这个图的最大团。</p><a id="more"></a><figure><img src="clique.png" alt="clique" /><figcaption aria-hidden="true">clique</figcaption></figure><h2 id="实现代码">实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> adj[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;, n;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; cliques;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_clique</span><span class="hljs-params">(<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; r, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; p, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p.empty() &amp;&amp; x.empty())&#123;<br>        cliques.push_back(r);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p.empty())&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; p_mut = p;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> iter : p)&#123;<br>        <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; r_tmp = r, p_tmp, x_tmp, adj_tmp;<br>        r_tmp.insert(iter);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span>(adj[iter][i] == <span class="hljs-number">1</span>)<br>                adj_tmp.insert(i);<br>        set_intersection(begin(p_mut), end(p_mut), begin(adj_tmp), end(adj_tmp), inserter(p_tmp, p_tmp.begin()));<br>        set_intersection(begin(x), end(x), begin(adj_tmp), end(adj_tmp), inserter(x_tmp, x_tmp.begin()));<br>        find_clique(r_tmp, p_tmp, x_tmp);<br>        p_mut.erase(iter);<br>        x.insert(iter);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; r, p, x;<br>    fin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-keyword">int</span> fe, te;<br>        fin&gt;&gt;fe&gt;&gt;te;<br>        adj[fe][te] = <span class="hljs-number">1</span>;<br>        adj[te][fe] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) p.insert(i);<br>    find_clique(r, p, x);<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> max_cs = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cliques.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(cliques[i].size() &gt; max_cs) max_cs = cliques[i].size();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cliques.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span>(cliques[i].size() == max_cs)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> iter: cliques[i])&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;iter&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            &#125;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法正确性">算法正确性</h2><p>使用Bron-Kerbosch算法，维护三个不相交的顶点集 <span class="math inline">\(P,R,X\)</span>，其中 <span class="math inline">\(P\)</span> 代表待搜索的元素，<span class="math inline">\(R\)</span> 代表当前极大环中的元素，<span class="math inline">\(X\)</span> 代表被排除的元素。从图中的某个点开始，递归的遍历所有其邻接顶点，当 <span class="math inline">\(P\)</span> 为空集时，若 <span class="math inline">\(X\)</span> 也为空集，则表明找到了一个极大团，否则回溯到上一节点，并将其从<span class="math inline">\(P\)</span> 中除去加入 <span class="math inline">\(X\)</span> 中。最终即可找到所有极大团，进而比较找出整张图中的最大环。</p><h2 id="总结">总结</h2><p>求最大团问题是一个NPC问题，即无法确定其是否存在多项式时间算法的可归约问题。Bron-Kerbosch算法的时间复杂度约为 <span class="math inline">\(\mathcal{O}(3^n)\)</span>，随着数据规模增大运行时间会显著增加。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;给定一个图，如下所示。请找出这个图的最大团。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>K-Means聚类与层次聚类</title>
    <link href="http://gonggongjohn.me/2020/12/30/machine-learning/clustering/"/>
    <id>http://gonggongjohn.me/2020/12/30/machine-learning/clustering/</id>
    <published>2020-12-30T13:22:44.000Z</published>
    <updated>2021-02-01T07:42:39.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cluster-analysis">Cluster Analysis</h2><p><strong>Cluster analysis</strong> or <strong>clustering</strong> is a task of grouping a set of objects in such a way that objects in the same group are more similar to each other than to those in other groups. It is <strong>a main task of exploratory data mining</strong>, and <strong>a common technique for statistical data analysis</strong> which is used in many fields including <strong>pattern recognition</strong>, <strong>image analysis</strong>, <strong>information retrieval</strong>, <strong>bioinformatics</strong>, <strong>data compression</strong>, <strong>computer graphics</strong> and <strong>machine learning</strong>.</p><a id="more"></a><p>There are various clustering algorithms that differ significantly in their understanding of what constitutes a cluster and how to effectively find them, which proved to be useful in different scenarios.</p><h2 id="k-means-clustering">K-means Clustering</h2><h3 id="concept">Concept</h3><p>K-means clustering is a partition-based method that can be used to partition a dataset into a fixed number of clusters. We can use the famous <strong>priest-villager model</strong> to illustrate the main idea of K-means algorithm.</p><p>There are four priests preaching in the countryside. At first, they chose four preaching points arbitrarily, and told villagers to take the preaching course that is nearest to their own house. After the first class, some villagers complained that the preaching points were still too far from their home, so each of the priests collected the home addresses of all the villagers that came to his class and move the preaching point to the center of all the addresses. Since the update of preaching points, some villagers found that another preaching points became closer to their house than the previous one, so they chose to take the course at the new preaching point. In this way, the priests updated their preaching points every week, and villagers decided which course to take according to the distance of each preaching points. After several weeks, the preaching points became stable and both the villagers and the priests got satisfied.</p><p>In formal words, K-means algorithm can be described as follows:</p><ol type="1"><li>Choose a set of <span class="math display">\[K\]</span> initial points <span class="math display">\[\{c_1, c_2, ..., c_K\}\]</span> that denotes the centroid of each cluster</li><li>Iteratively execute the following steps until all the centroid points stop to change (or hit some global restriction):<ul><li>For each sample points in the dataset, compute the distances from it to every centroids and assign it to the centroid with the smallest distance</li><li>Recompute the position of each centroid according to the positions of all the samples assigned to it</li></ul></li></ol><h3 id="mathematical-details">Mathematical Details</h3><p>Intuitively, we want to find a set of centroids and an assignment of every instances in the dataset to these centroids so that every centroid covers the most reasonable amount of instances and anchors at exactly the average point of all the instances that assigned to it. We can use a mathematical trick to convert this intuition into an optimization problem.</p><p>If we define an indicator variable <span class="math display">\[r_{nk}\]</span> to describe which cluster an instance is in, which is <span class="math display">\[r_{nk} = \left\{\begin{aligned}&amp;1, &amp;if \ n \ is \ assigned \ to \ k \\&amp;0, &amp;otherwise\end{aligned}\right.\]</span> , then the sum of the distance of all the instances in the dataset to their centroids can be written as <span class="math display">\[J = \sum_{n=1}^N \sum_{k=1}^K r_{nk} \cdot dist(x_n, c_k)\]</span> where <span class="math display">\[N\]</span> is the size of the dataset, <span class="math display">\[K\]</span> is the number of clusters, <span class="math display">\[x_n\]</span> is the <span class="math display">\[n^{th}\]</span> instance in the dataset, <span class="math display">\[c_k\]</span> is the <span class="math display">\[k^{th}\]</span> centroid, <span class="math display">\[dist(a, b)\]</span> is the distance between <span class="math display">\[a\]</span> and <span class="math display">\[b\]</span>.</p><p>Specifically, if the dataset is in the Euclidean space, then we can use the <strong>square of Euclidean distance</strong> as the distance function (square is for the convenience of derivation operations), which is <span class="math display">\[dist(x_n, c_k) = ||x_n - c_k||^2 = (x_{n1}-c_{k1})^2 + (x_{n2}-c_{k2})^2 + ... + (x_{nm}-c_{km})^2\]</span> where <span class="math display">\[x_{ni}\]</span> and <span class="math display">\[c_{ki}\]</span> is the <span class="math display">\[i^{th}\]</span> component of <span class="math display">\[x\]</span> and <span class="math display">\[c\]</span> respectively.</p><p>If the dataset denotes some broader set (usually text data), we can also use the <strong>Jaccard distance</strong> as the distance function, which is defined as <span class="math display">\[dist(A, B) = \frac{A \Delta B}{|A \cup B|} = \frac{|A \cup B - A \cap B|}{|A \cup B|}\]</span> where <span class="math display">\[A, B\]</span> are two sets and <span class="math display">\[|S|\]</span> is the size of set <span class="math display">\[S\]</span>.</p><p>Therefore, our goal becomes to minimize the function <span class="math display">\[J\]</span>. A famous solution to this kind of problems is the <strong>EM(Expectation-Maximization) Algorithm</strong> where optimizing <span class="math display">\[r_{nk}\]</span> is the expectation step and minimizing <span class="math display">\[dist(x_n, c_k)\]</span> is the maximization step.</p><p>First we optimize <span class="math display">\[r_{nk}\]</span>. Since <span class="math display">\[J\]</span> is the linear function of <span class="math display">\[r_{nk}\]</span>, we can simply assigned every instance to the centroid <span class="math display">\[k\]</span> if the distance between them is the smallest among all centroids to get the minimum <span class="math display">\[J\]</span> when the centroids are fixed.</p><p>Then we try to minimize the distance function. Here we only consider the situation when we use the Euclidean distance as the distance metrics. More specifically, our goal is to minimize <span class="math display">\[J = \sum_{n=1}^N \sum_{k=1}^K r_{nk} ||x_n - c_k||^2\]</span> when <span class="math display">\[r_{nk}\]</span> is fixed (This function are also called the <strong>sum of squared error</strong> function). Since each cluster is independent, we can optimize each cluster respectively to get the global minimum, which is to minimize the following expression <span class="math display">\[J_k = \sum_{n=1}^N r_{nk} \cdot ||x_n-c_k||^2\]</span> for every <span class="math display">\[k\]</span> from <span class="math display">\[1\]</span> to <span class="math display">\[K\]</span>.</p><p>We can notice that this is a quadratic function of <span class="math display">\[c_k\]</span>, so we can simply set its derivative function to <span class="math display">\[0\]</span> and solve for <span class="math display">\[c_k\]</span> to get the minimum point. From this we can get the final formula to find the position of <span class="math display">\[c_k\]</span> <span class="math display">\[c_k = \frac{\sum_\limits{n=1}^N r_{nk}x_n}{\sum_\limits{n=1}^N r_{nk}}\]</span> Since both of the two steps aims at reducing <span class="math display">\[J\]</span> while <span class="math display">\[J\]</span> is always greater than <span class="math display">\[0\]</span>, we can prove that the function will finally converges.</p><h3 id="complexity-analysis">Complexity Analysis</h3><p>We can implement K-means algorithm in pseudo-code:</p><figure class="highlight plain"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs pseudocode">K-MEANS(K, t, s): &#x2F;&#x2F;The paramaters denote the number of clusters, the iteration times and the dataset respectively<br>Initialize c[K] &#x2F;&#x2F;Denote the centroid set<br>While t<br>For i in s<br>min_dist &#x3D; INF<br>For j &#x3D; 1 to K<br>d &#x3D; Distance between i and c[j]<br>If d &lt; min_dist<br>min_dist &#x3D; d<br>min_index &#x3D; j<br>Append i into the cluster set of c[min_index]<br>For i &#x3D; 1 to K<br>c[i].pos &#x3D; Mean position of all the points in the cluster set of c[i]<br>return c<br></code></pre></td></tr></table></figure><p>If we use the standard Euclidean distance (<span class="math display">\[L_2\]</span> norm) as the distance metrics, then the time complexity of K-means algorithm is <span class="math display">\[\mathcal{O}(tknm)\]</span> where <span class="math display">\[t\]</span> is the iteration times, <span class="math display">\[k\]</span> is the number of clusters, <span class="math display">\[n\]</span> is the size of the dataset and <span class="math display">\[m\]</span> is the dimension of each sample in the dataset.</p><p>Similarly, if the samples of the dataset and the centroids are all in <span class="math display">\[m\]</span>-dimensional Euclidean space, than the space complexity of K-means algorithm is <span class="math display">\[\mathcal{O}((n+k) \cdot m)\]</span> where <span class="math display">\[n\]</span> is the size of the dataset, <span class="math display">\[k\]</span> is the number of clusters.</p><h3 id="applications">Applications</h3><p>Due to its simplicity, K-means clustering algorithm has been successfully used in many domains such as market segmentation, computer vision and astronomy. It is also used as a preprocessing step before many other alogirithms to find a starting configuration.</p><p>For example, in computer graphics, there is a task called <strong>color quantization</strong> which is to reduce the color palette of a picture into a fixed number. K-means algorithm can easily been used for this task and often produces a competitive result.</p><p>As an unsupervised learning algorithm, K-means algorithm is also widely used to explore the implicit features of a dataset before applying subsequent learning algorithms in data mining area, which can be very useful in some NLP(Natural Language Processing) and computer vision tasks.</p><h3 id="pros-and-cons">Pros And Cons</h3><p>The advantage of K-means algorithm is that it <strong>has a relatively low time and space complexity</strong>, and <strong>has a good flexibility even when applying to a large dataset</strong>. However, there are also some drawbacks of it:</p><ol type="1"><li>The algorithm may converges to a local minimum, which is counterintuitive in some situation.</li><li>Unable to get a correct partition when the clusters is not spherical or non-convex.</li><li>The algorithm is sensitive to the cluster number K and the initial point of the centroids.</li></ol><h2 id="hierarchical-clustering">Hierarchical Clustering</h2><h3 id="concept-1">Concept</h3><p>As its name suggests, hierarchical clustering is a hierarchical-based method to group similar objects into clusters. Its main idea is to build a <strong>hierarchical tree</strong> (or <strong>dendrogram</strong>) to represent the nested group relations. In general, there are two different strategies to achieve this goal: <strong>Agglomerative Hierarchical Clustering</strong> and <strong>Divisive Hierarchical Clustering</strong>. Agglomative method is a <strong>bottom-up</strong> method, which is to regard each of the instances as a single cluster at first and then keep merging the most similar clusters until there is only one cluster left. In comparison, divisive method is a <strong>top-down</strong> method, which consider the whole dataset as a big cluster and keep splitting down until each of the clusters have only one instance in it.</p><h3 id="complexity-analysis-1">Complexity Analysis</h3><p>Agglomerative hierarchical clustering algorithm can be implemented as follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pseudocode">AHC(s): &#x2F;&#x2F;s denotes the dataset<br>Initialize c &#x2F;&#x2F;Denote the clusters at the current level<br>Append every instance from s to c<br>While c.length !&#x3D; 1<br>min_dist &#x3D; INF<br>For i in c<br>For j in c<br>If i !&#x3D; j<br>d &#x3D; Distance between i and j<br>If d &lt; min_dist<br>min_dist &#x3D; d<br>min_cp &#x3D; i, j<br>cm &#x3D; merge(min_cp)<br>Remove min_cp from c<br>Append cm to c<br></code></pre></td></tr></table></figure><p>The basic structure of Divisive hierarchical clustering algorithm is the same as the agglomerative one, except the divisive one needs to split the farthest sub-clusters from the larger cluster in every loop.</p><p>If we use the Euclidean distance as the distance metrics, then the <strong>time complexity</strong> of hierarchical clustering is <span class="math display">\[\mathcal{O}(mn^3)\]</span> where <span class="math display">\[m\]</span> is the dimension of each sample in the dataset and <span class="math display">\[n\]</span> is the size of the dataset.</p><p>Since every cluster needs to record its member and its sub-clusters, the <strong>space complexity</strong> of hierarchical clustering is <span class="math display">\[\mathcal{O}(n^2)\]</span></p><h3 id="applications-1">Applications</h3><p>Hierarchical clustering is an ideal methods to find the hierarchical relations between instances. These instances often differ from each other in some aspects, but not to the extent that we should put them into two mutual exclusive groups.</p><p>For instance, we can use hierarchical clustering to find the members of each party in America senate. To achieve this, we can define how much one senator agrees with another's words as a metrics, and implement hierarchical clustering algorithm on all senator's twitter accounts.</p><h3 id="pros-and-cons-1">Pros And Cons</h3><p>A conspicuous benefit for hierarchical clustering is that it can get the whole cluster information once-and-for-all. Once we get the hierarchical relation tree of a dataset, we can probe the cluster information in different granularity and get the fittest cluster results we want to get.</p><p>However, the defects of it is equally distinct. The huge cost of computing distance between every two clusters and storing hierarchical information makes it unsuitable to handle large dataset. Once a cluster partition or congregation is determined, it is not easy to change since every subsequent judgement is based on clusters existed, which gives the algorithm a poor flexibility. Moreover, the strategy for merging or splitting the clusters is a greedy strategy, which may leads to an local-optimum result.</p><h3 id="k-means-v.s.-hierarchical-clustering">K-means V.S. Hierarchical Clustering</h3><p>In view of their different features, K-means and hierarchical clustering are often used in different scenarios. K-means can be easily adapted to a large or dense dataset thanks to its simplity and low computational cost. When it is uneasy to determine how many clusters in the dataset or the instance relations are unambiguous, hierarchical clustering proves to be a better choice. In practice, we often perform K-means clustering first to get a rough understanding of a dataset and reduce the data size. Then we perform hierarchical clustering to explore the deeper interrelationships among the dataset.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;cluster-analysis&quot;&gt;Cluster Analysis&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Cluster analysis&lt;/strong&gt; or &lt;strong&gt;clustering&lt;/strong&gt; is a task of grouping a set of objects in such a way that objects in the same group are more similar to each other than to those in other groups. It is &lt;strong&gt;a main task of exploratory data mining&lt;/strong&gt;, and &lt;strong&gt;a common technique for statistical data analysis&lt;/strong&gt; which is used in many fields including &lt;strong&gt;pattern recognition&lt;/strong&gt;, &lt;strong&gt;image analysis&lt;/strong&gt;, &lt;strong&gt;information retrieval&lt;/strong&gt;, &lt;strong&gt;bioinformatics&lt;/strong&gt;, &lt;strong&gt;data compression&lt;/strong&gt;, &lt;strong&gt;computer graphics&lt;/strong&gt; and &lt;strong&gt;machine learning&lt;/strong&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://gonggongjohn.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Machine-Learning" scheme="http://gonggongjohn.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>单源最短路径</title>
    <link href="http://gonggongjohn.me/2020/12/25/algorithm/course-exp/algorithm-exp12/"/>
    <id>http://gonggongjohn.me/2020/12/25/algorithm/course-exp/algorithm-exp12/</id>
    <published>2020-12-25T03:45:00.000Z</published>
    <updated>2021-12-09T02:07:41.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><p>川西风光几枚，以下图片是川西路线图。张三是旅游爱好者，他从成都出发自驾到西藏江达。</p><a id="more"></a><figure><img src="travel_map.png" alt="travel_map" /><figcaption aria-hidden="true">travel_map</figcaption></figure><ol type="1"><li><p>从成都到江达的最短自驾路线是什么？可以用Dijkstra算法来求解。</p></li><li><p>张三把理塘列为必游之地。怎么规划路线，使得总行程最短？</p></li><li><p>张三觉得理塘风景很美，道孚也不错，两个地方如果能够去一个地方的话就心满意足了。应该怎么安排行程使得总行程最短？</p></li><li><p>张三在规划线路的时候，发现不同路况行驶速度不一样。地图中粗的路径表示平均时速可以达到80公里每小时，而细的路径表示平均时速仅仅有每小时60公里每小时。那么用时最短的路径是哪一条？</p></li><li><p>（<strong>思考题</strong>）考虑到Dijkstra算法仅仅从一段开始寻找路径，效率不高。李教授想到一个高招，就是同时从出发地和目的地进行搜索，扩展搜索节点，然后两个方向扩展的路径会在中途相遇，则拼接起来的路径就是最短路径。如何实现李教授这个想法？</p></li></ol><h2 id="实现代码">实现代码</h2><h3 id="从成都到江达的最短路">从成都到江达的最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> graph[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], d[<span class="hljs-number">50</span>], visit[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, pred[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">//Procedure of finding the shortest path</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit[i] = <span class="hljs-number">0</span>;<br>    d[from] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        <span class="hljs-keyword">int</span> min_dist = SUP, min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; d[i] &lt; min_dist)&#123;<br>                min_dist = d[i];<br>                min_idx = i;<br>            &#125;<br>        &#125;<br>        visit[min_idx] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(min_idx == to) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d[i] &gt; d[min_idx] + graph[min_idx][i]) &#123;<br>                    d[i] = d[min_idx] + graph[min_idx][i];<br>                    pred[i] = min_idx;<br>                &#125;<br>            &#125;<br>        &#125;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; path;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; location_index;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; inv_location_index;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, start, end, flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> start_city, end_city;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++) &#123;<br>            graph[i][j] = SUP;<br>            graph[j][i] = SUP;<br>        &#125;<br>    <span class="hljs-comment">//Read in data &amp; build the graph</span><br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-built_in">string</span> from, to;<br>        <span class="hljs-keyword">int</span> from_index, to_index, distance, speed;<br>        fin&gt;&gt;from&gt;&gt;to&gt;&gt;distance&gt;&gt;speed;<br>        <span class="hljs-keyword">if</span> (location_index.find(from) == location_index.end())&#123;<br>            from_index = n;<br>            location_index[from] = from_index;<br>            inv_location_index[from_index] = from;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            from_index = location_index[from];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (location_index.find(to) == location_index.end())&#123;<br>            to_index = n;<br>            location_index[to] = to_index;<br>            inv_location_index[to_index] = to;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            to_index = location_index[to];<br>        &#125;<br>        graph[from_index][to_index] = distance;<br>        graph[to_index][from_index] = distance;<br>    &#125;<br>    start_city = <span class="hljs-string">&quot;成都&quot;</span>;<br>    end_city = <span class="hljs-string">&quot;江达&quot;</span>;<br>    start = location_index[start_city];<br>    end = location_index[end_city];<br>    find_path(start, end, n);<br>    <span class="hljs-comment">//Recall the path</span><br>    <span class="hljs-keyword">int</span> cur = end;<br>    path.push(end);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>    <span class="hljs-keyword">while</span>(!path.empty()) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; inv_location_index[path.top()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        path.pop();<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;d[end]&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="从成都经过理塘再到江达的最短路">从成都经过理塘再到江达的最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> graph[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], d[<span class="hljs-number">50</span>], visit[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, pred[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit[i] = <span class="hljs-number">0</span>;<br>    d[from] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        <span class="hljs-keyword">int</span> min_dist = SUP, min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; d[i] &lt; min_dist)&#123;<br>                min_dist = d[i];<br>                min_idx = i;<br>            &#125;<br>        &#125;<br>        visit[min_idx] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(min_idx == to) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d[i] &gt; d[min_idx] + graph[min_idx][i]) &#123;<br>                    d[i] = d[min_idx] + graph[min_idx][i];<br>                    pred[i] = min_idx;<br>                &#125;<br>            &#125;<br>        &#125;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; path;<br>    <span class="hljs-keyword">int</span> tot_dist = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; location_index;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; inv_location_index;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, start, mid, end;<br>    <span class="hljs-built_in">string</span> start_city, mid_city, end_city;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++) &#123;<br>            graph[i][j] = SUP;<br>            graph[j][i] = SUP;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-built_in">string</span> from, to;<br>        <span class="hljs-keyword">int</span> from_index, to_index, distance, speed;<br>        fin&gt;&gt;from&gt;&gt;to&gt;&gt;distance&gt;&gt;speed;<br>        <span class="hljs-keyword">if</span> (location_index.find(from) == location_index.end())&#123;<br>            from_index = n;<br>            location_index[from] = from_index;<br>            inv_location_index[from_index] = from;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            from_index = location_index[from];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (location_index.find(to) == location_index.end())&#123;<br>            to_index = n;<br>            location_index[to] = to_index;<br>            inv_location_index[to_index] = to;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            to_index = location_index[to];<br>        &#125;<br>        graph[from_index][to_index] = distance;<br>        graph[to_index][from_index] = distance;<br>    &#125;<br>    start_city = <span class="hljs-string">&quot;成都&quot;</span>;<br>    mid_city = <span class="hljs-string">&quot;理塘&quot;</span>;<br>    end_city = <span class="hljs-string">&quot;江达&quot;</span>;<br>    start = location_index[start_city];<br>    mid = location_index[mid_city];<br>    end = location_index[end_city];<br>    find_path(mid, end, n);<br>    <span class="hljs-keyword">int</span> cur = end;<br>    path.push(end);<br>    <span class="hljs-keyword">while</span>(cur != mid)&#123;<br>        path.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    tot_dist += d[end];<br>    find_path(start, mid, n);<br>    cur = pred[mid];<br>    path.push(pred[mid]);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>    <span class="hljs-keyword">while</span>(!path.empty())&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;inv_location_index[path.top()]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        path.pop();<br>    &#125;<br>    tot_dist += d[mid];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;tot_dist&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="从成都经过理塘或道孚再到江达的最短路">从成都经过理塘或道孚再到江达的最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> graph[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], d[<span class="hljs-number">50</span>], visit[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, pred[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit[i] = <span class="hljs-number">0</span>;<br>    d[from] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        <span class="hljs-keyword">int</span> min_dist = SUP, min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; d[i] &lt; min_dist)&#123;<br>                min_dist = d[i];<br>                min_idx = i;<br>            &#125;<br>        &#125;<br>        visit[min_idx] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(min_idx == to) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d[i] &gt; d[min_idx] + graph[min_idx][i]) &#123;<br>                    d[i] = d[min_idx] + graph[min_idx][i];<br>                    pred[i] = min_idx;<br>                &#125;<br>            &#125;<br>        &#125;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; path_1, path_2;<br>    <span class="hljs-keyword">int</span> tot_dist_1 = <span class="hljs-number">0</span>, tot_dist_2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; location_index;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; inv_location_index;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, start, mid_1, mid_2, end;<br>    <span class="hljs-built_in">string</span> start_city, mid_city_1, mid_city_2, end_city;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++) &#123;<br>            graph[i][j] = SUP;<br>            graph[j][i] = SUP;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-built_in">string</span> from, to;<br>        <span class="hljs-keyword">int</span> from_index, to_index, distance, speed;<br>        fin&gt;&gt;from&gt;&gt;to&gt;&gt;distance&gt;&gt;speed;<br>        <span class="hljs-keyword">if</span> (location_index.find(from) == location_index.end())&#123;<br>            from_index = n;<br>            location_index[from] = from_index;<br>            inv_location_index[from_index] = from;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            from_index = location_index[from];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (location_index.find(to) == location_index.end())&#123;<br>            to_index = n;<br>            location_index[to] = to_index;<br>            inv_location_index[to_index] = to;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            to_index = location_index[to];<br>        &#125;<br>        graph[from_index][to_index] = distance;<br>        graph[to_index][from_index] = distance;<br>    &#125;<br>    start_city = <span class="hljs-string">&quot;成都&quot;</span>;<br>    mid_city_1 = <span class="hljs-string">&quot;理塘&quot;</span>;<br>    mid_city_2 = <span class="hljs-string">&quot;道孚&quot;</span>;<br>    end_city = <span class="hljs-string">&quot;江达&quot;</span>;<br>    start = location_index[start_city];<br>    mid_1 = location_index[mid_city_1];<br>    mid_2 = location_index[mid_city_2];<br>    end = location_index[end_city];<br>    <span class="hljs-comment">//Find path 1</span><br>    find_path(mid_1, end, n);<br>    <span class="hljs-keyword">int</span> cur = end;<br>    path_1.push(end);<br>    <span class="hljs-keyword">while</span>(cur != mid_1)&#123;<br>        path_1.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    tot_dist_1 += d[end];<br>    find_path(start, mid_1, n);<br>    cur = pred[mid_1];<br>    path_1.push(pred[mid_1]);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path_1.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    tot_dist_1 += d[mid_1];<br>    <span class="hljs-comment">//Find path 2</span><br>    find_path(mid_2, end, n);<br>    cur = end;<br>    path_2.push(end);<br>    <span class="hljs-keyword">while</span>(cur != mid_2)&#123;<br>        path_2.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    tot_dist_2 += d[end];<br>    find_path(start, mid_2, n);<br>    cur = pred[mid_2];<br>    path_2.push(pred[mid_2]);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path_2.push(pred[cur]);<br>        cur = pred[cur];<br>    &#125;<br>    tot_dist_2 += d[mid_2];<br>    <span class="hljs-comment">//Compare and print the smaller one</span><br>    <span class="hljs-keyword">if</span>(tot_dist_1 &lt;= tot_dist_2)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;途径：理塘&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>        <span class="hljs-keyword">while</span>(!path_1.empty())&#123;<br>            <span class="hljs-keyword">int</span> p = path_1.top();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;inv_location_index[p]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            path_1.pop();<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;tot_dist_1&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;途径：道孚&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>        <span class="hljs-keyword">while</span>(!path_2.empty())&#123;<br>            <span class="hljs-keyword">int</span> p = path_2.top();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;inv_location_index[p]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            path_2.pop();<br>        &#125;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;tot_dist_2&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有时速限制时的最短路">有时速限制时的最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">double</span> graph[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], d[<span class="hljs-number">50</span>];<br><span class="hljs-keyword">int</span> graph_dist[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], visit[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, pred[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit[i] = <span class="hljs-number">0</span>;<br>    d[from] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        <span class="hljs-keyword">double</span> min_dist = SUP;<br>        <span class="hljs-keyword">int</span> min_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; d[i] &lt; min_dist)&#123;<br>                min_dist = d[i];<br>                min_idx = i;<br>            &#125;<br>        &#125;<br>        visit[min_idx] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(min_idx == to) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d[i] &gt; d[min_idx] + graph[min_idx][i]) &#123;<br>                    d[i] = d[min_idx] + graph[min_idx][i];<br>                    pred[i] = min_idx;<br>                &#125;<br>            &#125;<br>        &#125;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; path;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; location_index;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; inv_location_index;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, start, end, flag = <span class="hljs-number">0</span>, tot_dist = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> start_city, end_city;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++) &#123;<br>            graph[i][j] = SUP;<br>            graph[j][i] = SUP;<br>            graph_dist[i][j] = SUP;<br>            graph_dist[j][i] = SUP;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-built_in">string</span> from, to;<br>        <span class="hljs-keyword">int</span> from_index, to_index, distance, speed;<br>        fin&gt;&gt;from&gt;&gt;to&gt;&gt;distance&gt;&gt;speed;<br>        <span class="hljs-keyword">if</span> (location_index.find(from) == location_index.end())&#123;<br>            from_index = n;<br>            location_index[from] = from_index;<br>            inv_location_index[from_index] = from;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            from_index = location_index[from];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (location_index.find(to) == location_index.end())&#123;<br>            to_index = n;<br>            location_index[to] = to_index;<br>            inv_location_index[to_index] = to;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            to_index = location_index[to];<br>        &#125;<br>        graph[from_index][to_index] = (<span class="hljs-keyword">double</span>)distance / speed;<br>        graph[to_index][from_index] = (<span class="hljs-keyword">double</span>)distance / speed;<br>        graph_dist[from_index][to_index] = distance;<br>        graph_dist[to_index][from_index] = distance;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d[i] = SUP;<br>    start_city = <span class="hljs-string">&quot;成都&quot;</span>;<br>    end_city = <span class="hljs-string">&quot;江达&quot;</span>;<br>    start = location_index[start_city];<br>    end = location_index[end_city];<br>    find_path(start, end, n);<br>    <span class="hljs-keyword">int</span> cur = end;<br>    path.push(end);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path.push(pred[cur]);<br>        tot_dist += graph_dist[cur][pred[cur]];<br>        cur = pred[cur];<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>    <span class="hljs-keyword">while</span>(!path.empty()) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; inv_location_index[path.top()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        path.pop();<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;tot_dist&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分别从两边开始搜索的最短路">分别从两边开始搜索的最短路</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> graph[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], d1[<span class="hljs-number">50</span>], d2[<span class="hljs-number">50</span>], visit_1[<span class="hljs-number">50</span>], visit_2[<span class="hljs-number">50</span>], pred_1[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, pred_2[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;, inter_idx;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">find_path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> from, <span class="hljs-keyword">int</span> to, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d1[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) d2[i] = SUP;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit_1[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) visit_2[i] = <span class="hljs-number">0</span>;<br>    d1[from] = <span class="hljs-number">0</span>;<br>    d2[to] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        <span class="hljs-keyword">int</span> min_dist = SUP, min_idx_1 = <span class="hljs-number">-1</span>, min_idx_2 = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit_1[i] == <span class="hljs-number">0</span> &amp;&amp; d1[i] &lt; min_dist)&#123;<br>                min_dist = d1[i];<br>                min_idx_1 = i;<br>            &#125;<br>        &#125;<br>        visit_1[min_idx_1] = <span class="hljs-number">1</span>;<br>        min_dist = SUP;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit_2[i] == <span class="hljs-number">0</span> &amp;&amp; d2[i] &lt; min_dist)&#123;<br>                min_dist = d2[i];<br>                min_idx_2 = i;<br>            &#125;<br>        &#125;<br>        visit_2[min_idx_2] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(visit_1[min_idx_2] == <span class="hljs-number">1</span> || visit_2[min_idx_1] == <span class="hljs-number">1</span>) &#123;<br>            inter_idx = visit_1[min_idx_2] ? min_idx_2 : min_idx_1;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min_idx_1 == to || min_idx_2 == from) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit_1[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx_1][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d1[i] &gt; d1[min_idx_1] + graph[min_idx_1][i]) &#123;<br>                    d1[i] = d1[min_idx_1] + graph[min_idx_1][i];<br>                    pred_1[i] = min_idx_1;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span> (visit_2[i] == <span class="hljs-number">0</span> &amp;&amp; graph[min_idx_2][i] != SUP)&#123;<br>                <span class="hljs-keyword">if</span>(d2[i] &gt; d1[min_idx_2] + graph[min_idx_2][i]) &#123;<br>                    d2[i] = d1[min_idx_2] + graph[min_idx_2][i];<br>                    pred_2[i] = min_idx_2;<br>                &#125;<br>            &#125;<br>        &#125;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (visit_1[i] == <span class="hljs-number">0</span> || visit_2[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; path;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; location_index;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">string</span>&gt; inv_location_index;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, start, end, flag = <span class="hljs-number">0</span>, tot_dist = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">string</span> start_city, end_city;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">50</span>; j++) &#123;<br>            graph[i][j] = SUP;<br>            graph[j][i] = SUP;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        <span class="hljs-built_in">string</span> from, to;<br>        <span class="hljs-keyword">int</span> from_index, to_index, distance, speed;<br>        fin&gt;&gt;from&gt;&gt;to&gt;&gt;distance&gt;&gt;speed;<br>        <span class="hljs-keyword">if</span> (location_index.find(from) == location_index.end())&#123;<br>            from_index = n;<br>            location_index[from] = from_index;<br>            inv_location_index[from_index] = from;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            from_index = location_index[from];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (location_index.find(to) == location_index.end())&#123;<br>            to_index = n;<br>            location_index[to] = to_index;<br>            inv_location_index[to_index] = to;<br>            n++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            to_index = location_index[to];<br>        &#125;<br>        graph[from_index][to_index] = distance;<br>        graph[to_index][from_index] = distance;<br>    &#125;<br>    start_city = <span class="hljs-string">&quot;成都&quot;</span>;<br>    end_city = <span class="hljs-string">&quot;江达&quot;</span>;<br>    start = location_index[start_city];<br>    end = location_index[end_city];<br>    find_path(start, end, n);<br>    <span class="hljs-keyword">int</span> cur = inter_idx;<br>    path.push(inter_idx);<br>    <span class="hljs-keyword">while</span>(cur != start)&#123;<br>        path.push(pred_1[cur]);<br>        cur = pred_1[cur];<br>    &#125;<br>    tot_dist += d1[inter_idx];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;路径：&quot;</span>;<br>    <span class="hljs-keyword">while</span>(!path.empty()) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; inv_location_index[path.top()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        path.pop();<br>    &#125;<br>    cur = inter_idx;<br>    <span class="hljs-keyword">while</span>(cur != end)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;inv_location_index[pred_2[cur]]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        cur = pred_2[cur];<br>    &#125;<br>    tot_dist += d2[inter_idx];<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total: &quot;</span>&lt;&lt;tot_dist&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    fin.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法正确性">算法正确性</h2><h3 id="从成都到江达的最短路-1">从成都到江达的最短路</h3><p>使用Dijkstra算法思想，每次从未完成点集中选择离源点距离最短的加入已完成点集，并更新与其相邻所有点到源点的最短距离及对应的前继节点编号，最终即可得到源点到目标点的最短路径。</p><h3 id="从成都经过理塘再到江达的最短路-1">从成都经过理塘再到江达的最短路</h3><p>使用(1)的算法先找出成都到理塘的最短路径，再以理塘为起点找出到江达的最短路径，拼在一起即为满足要求的最短路。</p><h3 id="从成都经过理塘或道孚再到江达的最短路-1">从成都经过理塘或道孚再到江达的最短路</h3><p>使用(2)的方法先找出成都经过理塘到江达的最短路径，再找出成都经过道孚到江达的最短路径，比较两者路径长度选择更短的即可。</p><h3 id="有时速限制时的最短路-1">有时速限制时的最短路</h3><p>在建图时，将最短行驶时间（路程/时速限制）作为每条边的权值，再使用(1)的算法搜索即可。</p><h3 id="分别从两边开始搜索的最短路-1">分别从两边开始搜索的最短路</h3><p>使用(1)的算法，分别从两边开始遍历图。当其中一个遍历过程遍历到另一个的路径上时，记录相遇节点并停止遍历。再分别回溯即可拼接成完整的最短路径。</p><h2 id="总结">总结</h2><p>旅行路径规划问题本质上即为单源最短路问题，可使用Dijkstra算法在 <span class="math inline">\(\mathcal{O}(E^2)\)</span> 的时间内找到最短路。</p><p>第(1)(3)(4)(5)问的最短路径结果如下：</p><figure><img src="1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><p>第(2)的最短路径结果如下：</p><figure><img src="2.png" alt="2" /><figcaption aria-hidden="true">2</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;川西风光几枚，以下图片是川西路线图。张三是旅游爱好者，他从成都出发自驾到西藏江达。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://gonggongjohn.me/2020/12/18/algorithm/course-exp/algorithm-exp11/"/>
    <id>http://gonggongjohn.me/2020/12/18/algorithm/course-exp/algorithm-exp11/</id>
    <published>2020-12-18T03:45:00.000Z</published>
    <updated>2021-12-09T01:54:08.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><p>国家电网公司想在全国布局超高压输电网络，联通所有省会城市。为了降低成本，并且达到某些硬性要求，国家电网按照以下五种策略进行规划布局。</p><ol type="1"><li><p>要求整个电网的长度最短。</p></li><li><p>要求在西宁与郑州拉一根直达专线的情况下，使得整个电网长度最短</p></li><li><p>要求不仅在西宁与郑州之间拉直达专线，还在杭州与长沙之间拉直达专线的情况下，使得整个电网长度最短。</p></li><li><p>在香港与澳门、澳门与广州不拉直达线路的前提之下，使得整个电网的长度最短。</p></li><li><p>山东、河南、山西、甘肃、青海、新疆以及比他们更北的省份称为北方省份，其余省份称为南方省份。如果在南方省份和北方省份之间仅规划一条直通专线，如何使得整个电网的长度最短。</p></li></ol><a id="more"></a><p>请分别根据这五种情况计算最优情况。</p><figure><img src="china_map.png" alt="china_map" /><figcaption aria-hidden="true">china_map</figcaption></figure><p>提示：</p><ol type="1"><li><p>如无特殊约定，各个城市之间均可拉专线，其长度是直线长度。</p></li><li><p>地球上任意两点之间的距离计算方法可以参照以下文件：https://www.cnblogs.com/ycsfwhh/archive/2010/12/20/1911232.html</p></li></ol><p>摘录如下：</p><p>地球是一个近乎标准的椭球体，它的赤道半径为 <span class="math inline">\(6378.140\)</span> 千米，极半径为 <span class="math inline">\(6356.755\)</span> 千米，平均半径 <span class="math inline">\(6371.004\)</span> 千米。如果我们假设地球是一个完美的球体，那么它的半径就是地球的平均半径，记为 <span class="math inline">\(R\)</span>。如果以 <span class="math inline">\(0\)</span> 度经线为基 准，那么根据地球表面任意两点的经纬度就可以计算出这两点间的地表距离（这里忽略地球表面地形对计算带来的误差，仅仅是理论上的估算值）。设第一点 <span class="math inline">\(A\)</span> 的经纬度为 <span class="math inline">\((LonA, LatA)\)</span>，第二点 <span class="math inline">\(B\)</span> 的经纬度为 <span class="math inline">\((LonB, LatB)\)</span>，按照 <span class="math inline">\(0\)</span> 度经线的基准，东经取经度的正值(Longitude)，西经取经度负值(-Longitude)，北纬取90-纬度值(90- Latitude)，南纬取90+纬度值(90+Latitude)，则经过上述处理过后的两点被计为 <span class="math inline">\((MLonA, MLatA)\)</span> 和 <span class="math inline">\((MLonB, MLatB)\)</span>。那么根据三角推导，可以得到计算两点距离的如下公式： $$ C = (MLatA) (MLatB) (MLonA-MLonB) + (MLatA) (MLatB) \</p><p>Distance = R* (C) $$ 这里，R和Distance单位是相同，如果是采用 <span class="math inline">\(6371.004\)</span> 千米作为半径，那么Distance就是千米为单位，如果要使用其他单位，比如mile，还需要做单位换算，1千米=0.621371192mile</p><p>如果仅对经度作正负的处理，而不对纬度作90-Latitude(假设都是北半球，南半球只有澳洲具有应用意义)的处理，那么公式将是： $$ C = (LatA) (LatB) + (LatA) (LatB) (MLonA-MLonB) \</p><p>Distance = R (C)  $$ 以上通过简单的三角变换就可以推出。</p><ol start="3" type="1"><li>全国省会城市的经纬度如下所示。</li></ol><p>城市,经度,纬度 沈阳市,123.429092,41.796768 长春市,125.324501,43.886841 哈尔滨市,126.642464,45.756966 北京市,116.405289,39.904987 天津市,117.190186,39.125595 呼和浩特市,111.751990,40.841490 银川市,106.232480,38.486440 太原市,112.549248,37.857014 石家庄市,114.502464,38.045475 济南市,117.000923,36.675808 郑州市,113.665413,34.757977 西安市,108.948021,34.263161 武汉市,114.298569,30.584354 南京市,118.76741,32.041546 合肥市,117.283043,31.861191 上海市,121.472641,31.231707 长沙市,112.982277,28.19409 南昌市,115.892151,28.676493 杭州市,120.15358,30.287458 福州市,119.306236,26.075302 广州市,113.28064,23.125177 台北市,121.5200760,25.0307240 海口市,110.199890,20.044220 南宁市,108.320007,22.82402 重庆市,106.504959,29.533155 昆明市,102.71225,25.040609 贵阳市,106.713478,26.578342 成都市,104.065735,30.659462 兰州市,103.834170,36.061380 西宁市,101.777820,36.617290 拉萨市,91.11450,29.644150 乌鲁木齐市,87.616880,43.826630 香港,114.165460,22.275340 澳门,113.549130,22.198750</p><h2 id="实现代码">实现代码</h2><h3 id="整个电网的长度最短">整个电网的长度最短</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R 6371.004</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">city</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">double</span> longitude;<br>    <span class="hljs-keyword">double</span> latitude;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(<span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> angle * M_PI / <span class="hljs-number">180</span>;<br>&#125;<br><span class="hljs-comment">//Only correct when the positions are in the north-eastern hemisphere</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">earth_dist</span><span class="hljs-params">(city *pos_a, city *pos_b)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> long_a = rad(pos_a-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_a = rad(pos_a-&gt;latitude);<br>    <span class="hljs-keyword">double</span> long_b = rad(pos_b-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_b = rad(pos_b-&gt;latitude);<br>    <span class="hljs-keyword">double</span> c = <span class="hljs-built_in">sin</span>(lat_a) * <span class="hljs-built_in">sin</span>(lat_b) + <span class="hljs-built_in">cos</span>(lat_a) * <span class="hljs-built_in">cos</span>(lat_b) * <span class="hljs-built_in">cos</span>(long_b - long_a);<br>    <span class="hljs-keyword">return</span> R * <span class="hljs-built_in">acos</span>(c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    city c[<span class="hljs-number">35</span>];<br>    edge chosen[<span class="hljs-number">35</span>], low_cost[<span class="hljs-number">35</span>];<br>    <span class="hljs-keyword">double</span> graph[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>] = &#123;SUP&#125;;<br>    <span class="hljs-keyword">int</span> visit[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, last_visit, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;position.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!fin.eof())&#123;<br>        fin&gt;&gt;c[n].name&gt;&gt;c[n].longitude&gt;&gt;c[n].latitude;<br>        n++;<br>    &#125;<br>    <span class="hljs-comment">//Build the graph</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">double</span> dist = earth_dist(&amp;c[i], &amp;c[j]);<br>                graph[i][j] = dist;<br>                graph[j][i] = dist;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    last_visit = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//Procedure of searching the MST</span><br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//Update the lowest-cost edge set</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                low_cost[i].from = last_visit;<br>                low_cost[i].to = i;<br>                low_cost[i].weight = graph[last_visit][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-comment">//Search for the smallest edge</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c[chosen[i].from].name&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;c[chosen[i].to].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;chosen[i].weight&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        sum += chosen[i].weight;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;总长度: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在西宁与郑州拉一根直达专线的情况下使得整个电网长度最短">在西宁与郑州拉一根直达专线的情况下，使得整个电网长度最短</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R 6371.004</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">city</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">double</span> longitude;<br>    <span class="hljs-keyword">double</span> latitude;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(<span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> angle * M_PI / <span class="hljs-number">180</span>;<br>&#125;<br><span class="hljs-comment">//Only correct when the positions are on the north-eastern hemisphere</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">earth_dist</span><span class="hljs-params">(city *pos_a, city *pos_b)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> long_a = rad(pos_a-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_a = rad(pos_a-&gt;latitude);<br>    <span class="hljs-keyword">double</span> long_b = rad(pos_b-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_b = rad(pos_b-&gt;latitude);<br>    <span class="hljs-keyword">double</span> c = <span class="hljs-built_in">sin</span>(lat_a) * <span class="hljs-built_in">sin</span>(lat_b) + <span class="hljs-built_in">cos</span>(lat_a) * <span class="hljs-built_in">cos</span>(lat_b) * <span class="hljs-built_in">cos</span>(long_b - long_a);<br>    <span class="hljs-keyword">return</span> R * <span class="hljs-built_in">acos</span>(c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    city c[<span class="hljs-number">35</span>];<br>    edge chosen[<span class="hljs-number">35</span>], low_cost[<span class="hljs-number">35</span>];<br>    <span class="hljs-keyword">double</span> graph[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>] = &#123;SUP&#125;;<br>    <span class="hljs-keyword">int</span> visit[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, last_visit, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> xi_ning_idx, zheng_zhou_idx;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;position.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!fin.eof())&#123;<br>        fin&gt;&gt;c[n].name&gt;&gt;c[n].longitude&gt;&gt;c[n].latitude;<br>        <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;西宁市&quot;</span>) xi_ning_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;郑州市&quot;</span>) zheng_zhou_idx = n;<br>        n++;<br>    &#125;<br>    <span class="hljs-comment">//Build the graph</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">double</span> dist = earth_dist(&amp;c[i], &amp;c[j]);<br>                graph[i][j] = dist;<br>                graph[j][i] = dist;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    chosen[<span class="hljs-number">0</span>].from = xi_ning_idx;<br>    chosen[<span class="hljs-number">0</span>].to = zheng_zhou_idx;<br>    chosen[<span class="hljs-number">0</span>].weight = graph[xi_ning_idx][zheng_zhou_idx];<br>    cnt++;<br>    visit[xi_ning_idx] = <span class="hljs-number">1</span>;<br>    visit[zheng_zhou_idx] = <span class="hljs-number">1</span>;<br>    last_visit = xi_ning_idx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>            low_cost[i].from = last_visit;<br>            low_cost[i].to = i;<br>            low_cost[i].weight = graph[last_visit][i];<br>        &#125;<br>    &#125;<br>    last_visit = zheng_zhou_idx;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                low_cost[i].from = last_visit;<br>                low_cost[i].to = i;<br>                low_cost[i].weight = graph[last_visit][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c[chosen[i].from].name&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;c[chosen[i].to].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;chosen[i].weight&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        sum += chosen[i].weight;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;总长度: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不仅在西宁与郑州之间拉直达专线还在杭州与长沙之间拉直达专线的情况下使得整个电网长度最短">不仅在西宁与郑州之间拉直达专线，还在杭州与长沙之间拉直达专线的情况下，使得整个电网长度最短</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R 6371.004</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">city</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">double</span> longitude;<br>    <span class="hljs-keyword">double</span> latitude;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(<span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> angle * M_PI / <span class="hljs-number">180</span>;<br>&#125;<br><span class="hljs-comment">//Only correct when the positions are on the north-eastern hemisphere</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">earth_dist</span><span class="hljs-params">(city *pos_a, city *pos_b)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> long_a = rad(pos_a-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_a = rad(pos_a-&gt;latitude);<br>    <span class="hljs-keyword">double</span> long_b = rad(pos_b-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_b = rad(pos_b-&gt;latitude);<br>    <span class="hljs-keyword">double</span> c = <span class="hljs-built_in">sin</span>(lat_a) * <span class="hljs-built_in">sin</span>(lat_b) + <span class="hljs-built_in">cos</span>(lat_a) * <span class="hljs-built_in">cos</span>(lat_b) * <span class="hljs-built_in">cos</span>(long_b - long_a);<br>    <span class="hljs-keyword">return</span> R * <span class="hljs-built_in">acos</span>(c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    city c[<span class="hljs-number">35</span>];<br>    edge chosen[<span class="hljs-number">35</span>], low_cost[<span class="hljs-number">35</span>];<br>    <span class="hljs-keyword">double</span> graph[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>] = &#123;SUP&#125;;<br>    <span class="hljs-keyword">int</span> visit[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, last_visit, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> xi_ning_idx, zheng_zhou_idx, hang_zhou_idx, chang_sha_idx;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;position.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!fin.eof())&#123;<br>        fin&gt;&gt;c[n].name&gt;&gt;c[n].longitude&gt;&gt;c[n].latitude;<br>        <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;西宁市&quot;</span>) xi_ning_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;郑州市&quot;</span>) zheng_zhou_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;杭州市&quot;</span>) hang_zhou_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;长沙市&quot;</span>) chang_sha_idx = n;<br>        n++;<br>    &#125;<br>    <span class="hljs-comment">//Build the graph</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">double</span> dist = earth_dist(&amp;c[i], &amp;c[j]);<br>                graph[i][j] = dist;<br>                graph[j][i] = dist;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    chosen[<span class="hljs-number">0</span>].from = xi_ning_idx;<br>    chosen[<span class="hljs-number">0</span>].to = zheng_zhou_idx;<br>    chosen[<span class="hljs-number">0</span>].weight = graph[xi_ning_idx][zheng_zhou_idx];<br>    cnt ++;<br>    visit[xi_ning_idx] = <span class="hljs-number">1</span>;<br>    visit[zheng_zhou_idx] = <span class="hljs-number">1</span>;<br>    last_visit = xi_ning_idx;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>            low_cost[i].from = last_visit;<br>            low_cost[i].to = i;<br>            low_cost[i].weight = graph[last_visit][i];<br>        &#125;<br>    &#125;<br>    last_visit = zheng_zhou_idx;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                low_cost[i].from = last_visit;<br>                low_cost[i].to = i;<br>                low_cost[i].weight = graph[last_visit][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(last_visit == hang_zhou_idx &amp;&amp; visit[chang_sha_idx] == <span class="hljs-number">0</span>)&#123;<br>            chosen[cnt].from = hang_zhou_idx;<br>            chosen[cnt].to = chang_sha_idx;<br>            chosen[cnt].weight = graph[hang_zhou_idx][chang_sha_idx];<br>            visit[chang_sha_idx] = <span class="hljs-number">1</span>;<br>            low_cost[chang_sha_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>                <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                    low_cost[i].from = last_visit;<br>                    low_cost[i].to = i;<br>                    low_cost[i].weight = graph[last_visit][i];<br>                &#125;<br>            &#125;<br>            cnt++;<br>            last_visit = chang_sha_idx;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(last_visit == chang_sha_idx &amp;&amp; visit[hang_zhou_idx] == <span class="hljs-number">0</span>)&#123;<br>            chosen[cnt].from = chang_sha_idx;<br>            chosen[cnt].to = hang_zhou_idx;<br>            chosen[cnt].weight = graph[chang_sha_idx][hang_zhou_idx];<br>            visit[hang_zhou_idx] = <span class="hljs-number">1</span>;<br>            low_cost[hang_zhou_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>                <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                    low_cost[i].from = last_visit;<br>                    low_cost[i].to = i;<br>                    low_cost[i].weight = graph[last_visit][i];<br>                &#125;<br>            &#125;<br>            cnt++;<br>            last_visit = hang_zhou_idx;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c[chosen[i].from].name&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;c[chosen[i].to].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;chosen[i].weight&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        sum += chosen[i].weight;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;总长度: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在香港与澳门澳门与广州不拉直达线路的前提之下使得整个电网的长度最短">在香港与澳门、澳门与广州不拉直达线路的前提之下，使得整个电网的长度最短</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R 6371.004</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">city</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">double</span> longitude;<br>    <span class="hljs-keyword">double</span> latitude;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(<span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> angle * M_PI / <span class="hljs-number">180</span>;<br>&#125;<br><span class="hljs-comment">//Only correct when the positions are on the north-eastern hemisphere</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">earth_dist</span><span class="hljs-params">(city *pos_a, city *pos_b)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> long_a = rad(pos_a-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_a = rad(pos_a-&gt;latitude);<br>    <span class="hljs-keyword">double</span> long_b = rad(pos_b-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_b = rad(pos_b-&gt;latitude);<br>    <span class="hljs-keyword">double</span> c = <span class="hljs-built_in">sin</span>(lat_a) * <span class="hljs-built_in">sin</span>(lat_b) + <span class="hljs-built_in">cos</span>(lat_a) * <span class="hljs-built_in">cos</span>(lat_b) * <span class="hljs-built_in">cos</span>(long_b - long_a);<br>    <span class="hljs-keyword">return</span> R * <span class="hljs-built_in">acos</span>(c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    city c[<span class="hljs-number">35</span>];<br>    edge chosen[<span class="hljs-number">35</span>], low_cost[<span class="hljs-number">35</span>];<br>    <span class="hljs-keyword">double</span> graph[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>] = &#123;SUP&#125;;<br>    <span class="hljs-keyword">int</span> visit[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, last_visit, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> hong_kong_idx, macao_idx, guang_zhou_idx;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;position.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!fin.eof())&#123;<br>        fin&gt;&gt;c[n].name&gt;&gt;c[n].longitude&gt;&gt;c[n].latitude;<br>        <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;香港&quot;</span>) hong_kong_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;澳门&quot;</span>) macao_idx = n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c[n].name == <span class="hljs-string">&quot;广州市&quot;</span>) guang_zhou_idx = n;<br>        n++;<br>    &#125;<br>    <span class="hljs-comment">//Build the graph</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">double</span> dist = earth_dist(&amp;c[i], &amp;c[j]);<br>                graph[i][j] = dist;<br>                graph[j][i] = dist;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    last_visit = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                <span class="hljs-keyword">bool</span> spec_1, spec_2;<br>                spec_1 = (last_visit == hong_kong_idx &amp;&amp; i == macao_idx) || (last_visit == macao_idx &amp;&amp; i == hong_kong_idx);<br>                spec_2 = (last_visit == macao_idx &amp;&amp; i == guang_zhou_idx) || (last_visit == guang_zhou_idx &amp;&amp; i == macao_idx);<br>                <span class="hljs-keyword">if</span> (!spec_1 &amp;&amp; !spec_2) &#123;<br>                    low_cost[i].from = last_visit;<br>                    low_cost[i].to = i;<br>                    low_cost[i].weight = graph[last_visit][i];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c[chosen[i].from].name&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;c[chosen[i].to].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;chosen[i].weight&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        sum += chosen[i].weight;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;总长度: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在南方省份和北方省份之间仅规划一条直通专线使得整个电网的长度最短">在南方省份和北方省份之间仅规划一条直通专线，使得整个电网的长度最短</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R 6371.004</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUP 100000005</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">city</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">double</span> longitude;<br>    <span class="hljs-keyword">double</span> latitude;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> from;<br>    <span class="hljs-keyword">int</span> to;<br>    <span class="hljs-keyword">double</span> weight;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">rad</span><span class="hljs-params">(<span class="hljs-keyword">double</span> angle)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> angle * M_PI / <span class="hljs-number">180</span>;<br>&#125;<br><span class="hljs-comment">//Only correct when the positions are on the north-eastern hemisphere</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">earth_dist</span><span class="hljs-params">(city *pos_a, city *pos_b)</span></span>&#123;<br>    <span class="hljs-keyword">double</span> long_a = rad(pos_a-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_a = rad(pos_a-&gt;latitude);<br>    <span class="hljs-keyword">double</span> long_b = rad(pos_b-&gt;longitude);<br>    <span class="hljs-keyword">double</span> lat_b = rad(pos_b-&gt;latitude);<br>    <span class="hljs-keyword">double</span> c = <span class="hljs-built_in">sin</span>(lat_a) * <span class="hljs-built_in">sin</span>(lat_b) + <span class="hljs-built_in">cos</span>(lat_a) * <span class="hljs-built_in">cos</span>(lat_b) * <span class="hljs-built_in">cos</span>(long_b - long_a);<br>    <span class="hljs-keyword">return</span> R * <span class="hljs-built_in">acos</span>(c);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> north_province[<span class="hljs-number">15</span>] = &#123;<span class="hljs-string">&quot;济南市&quot;</span>, <span class="hljs-string">&quot;石家庄市&quot;</span>, <span class="hljs-string">&quot;天津市&quot;</span>, <span class="hljs-string">&quot;北京市&quot;</span>, <span class="hljs-string">&quot;沈阳市&quot;</span>,<br>                                 <span class="hljs-string">&quot;长春市&quot;</span>, <span class="hljs-string">&quot;哈尔滨市&quot;</span>, <span class="hljs-string">&quot;郑州市&quot;</span>, <span class="hljs-string">&quot;太原市&quot;</span>, <span class="hljs-string">&quot;西安市&quot;</span>,<br>                                 <span class="hljs-string">&quot;呼和浩特市&quot;</span>, <span class="hljs-string">&quot;兰州市&quot;</span>, <span class="hljs-string">&quot;银川市&quot;</span>, <span class="hljs-string">&quot;西宁市&quot;</span>, <span class="hljs-string">&quot;乌鲁木齐市&quot;</span>&#125;;<br>    <span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; region_map;<br>    city c[<span class="hljs-number">35</span>];<br>    edge chosen[<span class="hljs-number">35</span>], low_cost[<span class="hljs-number">35</span>];<br>    <span class="hljs-keyword">double</span> graph[<span class="hljs-number">35</span>][<span class="hljs-number">35</span>] = &#123;SUP&#125;;<br>    <span class="hljs-keyword">int</span> visit[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, flag = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>, last_visit, cnt = <span class="hljs-number">0</span>, north_tag;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;position.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">while</span> (!fin.eof())&#123;<br>        fin&gt;&gt;c[n].name&gt;&gt;c[n].longitude&gt;&gt;c[n].latitude;<br>        north_tag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span> (north_province[i] == c[n].name)&#123;<br>                region_map[n] = <span class="hljs-number">0</span>;<br>                north_tag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (north_tag == <span class="hljs-number">0</span>) region_map[n] = <span class="hljs-number">1</span>;<br>        n++;<br>    &#125;<br>    <span class="hljs-comment">//Build the graph</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) graph[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">double</span> dist = earth_dist(&amp;c[i], &amp;c[j]);<br>                graph[i][j] = dist;<br>                graph[j][i] = dist;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    visit[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    last_visit = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//Connect northern city</span><br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(region_map[i] == <span class="hljs-number">0</span> &amp;&amp; visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                low_cost[i].from = last_visit;<br>                low_cost[i].to = i;<br>                low_cost[i].weight = graph[last_visit][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(region_map[i] == <span class="hljs-number">0</span> &amp;&amp; visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        low_cost[i] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, SUP&#125;;<br>    &#125;<br>    visit[<span class="hljs-number">12</span>] = <span class="hljs-number">1</span>;<br>    last_visit = <span class="hljs-number">12</span>;<br>    <span class="hljs-comment">//Connect southern city</span><br>    <span class="hljs-keyword">while</span> (!flag)&#123;<br>        flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(region_map[i] == <span class="hljs-number">1</span> &amp;&amp; visit[i] == <span class="hljs-number">0</span> &amp;&amp; graph[last_visit][i] &lt; low_cost[i].weight)&#123;<br>                low_cost[i].from = last_visit;<br>                low_cost[i].to = i;<br>                low_cost[i].weight = graph[last_visit][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> min_edge_idx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">double</span> min_edge_dist = SUP;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(low_cost[i].weight != <span class="hljs-number">-1.0</span> &amp;&amp; low_cost[i].weight &lt; min_edge_dist)&#123;<br>                min_edge_dist = low_cost[i].weight;<br>                min_edge_idx = i;<br>            &#125;<br>        &#125;<br>        chosen[cnt] = low_cost[min_edge_idx];<br>        visit[min_edge_idx] = <span class="hljs-number">1</span>;<br>        low_cost[min_edge_idx] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1.0</span>&#125;;<br>        last_visit = min_edge_idx;<br>        cnt++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(region_map[i] == <span class="hljs-number">1</span> &amp;&amp; visit[i] == <span class="hljs-number">0</span>)&#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> min_from, min_to;<br>    <span class="hljs-keyword">double</span> min_dist = SUP;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br>            <span class="hljs-keyword">int</span> spec = (region_map[i] == <span class="hljs-number">0</span> &amp;&amp; region_map[j] == <span class="hljs-number">1</span>) || (region_map[i] == <span class="hljs-number">1</span> &amp;&amp; region_map[j] == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (spec &amp;&amp; graph[i][j] &lt; min_dist)&#123;<br>                min_from = i;<br>                min_to = j;<br>                min_dist = graph[i][j];<br>            &#125;<br>        &#125;<br>    chosen[cnt].from = min_from;<br>    chosen[cnt].to = min_to;<br>    chosen[cnt].weight = min_dist;<br>    cnt++;<br>    <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;c[chosen[i].from].name&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;c[chosen[i].to].name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;chosen[i].weight&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        sum += chosen[i].weight;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;总长度: &quot;</span>&lt;&lt;sum&lt;&lt;<span class="hljs-string">&quot;km&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法正确性">算法正确性</h2><h3 id="整个电网的长度最短-1">整个电网的长度最短</h3><p>利用Prim算法，每次选择已连通节点集到未连通相邻节点集中最小的边连通，并更新相邻节点集及对应的最小边，最终即可得到长度最短的电网图。</p><h3 id="在西宁与郑州拉一根直达专线的情况下使得整个电网长度最短-1">在西宁与郑州拉一根直达专线的情况下，使得整个电网长度最短</h3><p>先将西宁到郑州的边加入电网图，并更新西宁和郑州的相邻节点，再以西宁或郑州为起点执行<strong>(1)</strong>的步骤。</p><h3 id="不仅在西宁与郑州之间拉直达专线还在杭州与长沙之间拉直达专线的情况下使得整个电网长度最短-1">不仅在西宁与郑州之间拉直达专线，还在杭州与长沙之间拉直达专线的情况下，使得整个电网长度最短</h3><p>在<strong>(2)</strong>的基础上，当电网图扩展到杭州或长沙时，将杭州到长沙的边加入电网图，并更新杭州和长沙的相邻节点，再以杭州或长沙为起点继续扩展电网图。</p><h3 id="在香港与澳门澳门与广州不拉直达线路的前提之下使得整个电网的长度最短-1">在香港与澳门、澳门与广州不拉直达线路的前提之下，使得整个电网的长度最短</h3><p>在<strong>(1)</strong>的基础上，当电网图扩展到香港、澳门或广州时，不更新其禁连通节点的最小边，即可避免算法选择非法边。</p><h3 id="在南方省份和北方省份之间仅规划一条直通专线使得整个电网的长度最短-1">在南方省份和北方省份之间仅规划一条直通专线，使得整个电网的长度最短</h3><p>将南方省份和北方省份分别看作两张图，并使用(1)的方法分别生成两张电网图，最后找出南方省份中到北方省份最近的一条边加入电网图，即可得到一张全连通的电网图。由于初始位置对Prim算法没有影响，故可以保证得到的电网长度最短。</p><h2 id="输出各组实验的电网数据表以及电网总长度并且通过可视化方式进行呈现">输出各组实验的电网数据表，以及电网总长度，并且通过可视化方式进行呈现</h2><h3 id="整个电网的长度最短-2">整个电网的长度最短</h3><p>沈阳市-&gt;长春市 279.076km</p><p>长春市-&gt;哈尔滨市 232.473km</p><p>沈阳市-&gt;天津市 605.429km</p><p>天津市-&gt;北京市 109.744km</p><p>天津市-&gt;石家庄市 262.662km</p><p>石家庄市-&gt;太原市 172.534km</p><p>石家庄市-&gt;济南市 268.228km</p><p>太原市-&gt;呼和浩特市 338.861km</p><p>太原市-&gt;郑州市 358.809km</p><p>郑州市-&gt;西安市 435.687km</p><p>郑州市-&gt;合肥市 465.513km</p><p>合肥市-&gt;南京市 141.475km</p><p>南京市-&gt;杭州市 235.447km</p><p>杭州市-&gt;上海市 164.04km</p><p>合肥市-&gt;武汉市 317.307km</p><p>武汉市-&gt;南昌市 262.154km</p><p>南昌市-&gt;长沙市 289.531km</p><p>南昌市-&gt;福州市 444.143km</p><p>福州市-&gt;台北市 250.622km</p><p>西安市-&gt;兰州市 505.96km</p><p>兰州市-&gt;西宁市 194.278km</p><p>兰州市-&gt;银川市 343.112km</p><p>长沙市-&gt;广州市 564.43km</p><p>广州市-&gt;澳门 106.634km</p><p>澳门-&gt;香港 64.0048km</p><p>澳门-&gt;海口市 421.967km</p><p>海口市-&gt;南宁市 365.228km</p><p>南宁市-&gt;贵阳市 447.881km</p><p>贵阳市-&gt;重庆市 329.197km</p><p>重庆市-&gt;成都市 265.982km</p><p>贵阳市-&gt;昆明市 435.472km</p><p>成都市-&gt;拉萨市 1249.67km</p><p>西宁市-&gt;乌鲁木齐市 1441.9km</p><p>总长度: 12369.5km</p><figure><img src="1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><h3 id="在西宁与郑州拉一根直达专线的情况下使得整个电网长度最短-2">在西宁与郑州拉一根直达专线的情况下，使得整个电网长度最短</h3><p>西宁市-&gt;郑州市 1092.57km</p><p>西宁市-&gt;兰州市 194.278km</p><p>兰州市-&gt;银川市 343.112km</p><p>郑州市-&gt;太原市 358.809km</p><p>太原市-&gt;石家庄市 172.534km</p><p>石家庄市-&gt;天津市 262.662km</p><p>天津市-&gt;北京市 109.744km</p><p>石家庄市-&gt;济南市 268.228km</p><p>太原市-&gt;呼和浩特市 338.861km</p><p>郑州市-&gt;西安市 435.687km</p><p>郑州市-&gt;合肥市 465.513km</p><p>合肥市-&gt;南京市 141.475km</p><p>南京市-&gt;杭州市 235.447km</p><p>杭州市-&gt;上海市 164.04km</p><p>合肥市-&gt;武汉市 317.307km</p><p>武汉市-&gt;南昌市 262.154km</p><p>南昌市-&gt;长沙市 289.531km</p><p>南昌市-&gt;福州市 444.143km</p><p>福州市-&gt;台北市 250.622km</p><p>长沙市-&gt;广州市 564.43km</p><p>广州市-&gt;澳门 106.634km</p><p>澳门-&gt;香港 64.0048km</p><p>澳门-&gt;海口市 421.967km</p><p>海口市-&gt;南宁市 365.228km</p><p>南宁市-&gt;贵阳市 447.881km</p><p>贵阳市-&gt;重庆市 329.197km</p><p>重庆市-&gt;成都市 265.982km</p><p>贵阳市-&gt;昆明市 435.472km</p><p>天津市-&gt;沈阳市 605.429km</p><p>沈阳市-&gt;长春市 279.076km</p><p>长春市-&gt;哈尔滨市 232.473km</p><p>成都市-&gt;拉萨市 1249.67km</p><p>西宁市-&gt;乌鲁木齐市 1441.9km</p><p>总长度: 12956.1km</p><figure><img src="2.png" alt="2" /><figcaption aria-hidden="true">2</figcaption></figure><h3 id="不仅在西宁与郑州之间拉直达专线还在杭州与长沙之间拉直达专线的情况下使得整个电网长度最短-2">不仅在西宁与郑州之间拉直达专线，还在杭州与长沙之间拉直达专线的情况下，使得整个电网长度最短</h3><p>西宁市-&gt;郑州市 1092.57km</p><p>西宁市-&gt;兰州市 194.278km</p><p>兰州市-&gt;银川市 343.112km</p><p>郑州市-&gt;太原市 358.809km</p><p>太原市-&gt;石家庄市 172.534km</p><p>石家庄市-&gt;天津市 262.662km</p><p>天津市-&gt;北京市 109.744km</p><p>石家庄市-&gt;济南市 268.228km</p><p>太原市-&gt;呼和浩特市 338.861km</p><p>郑州市-&gt;西安市 435.687km</p><p>郑州市-&gt;合肥市 465.513km</p><p>合肥市-&gt;南京市 141.475km</p><p>南京市-&gt;杭州市 235.447km</p><p>杭州市-&gt;长沙市 733.531km</p><p>杭州市-&gt;上海市 164.04km</p><p>长沙市-&gt;南昌市 289.531km</p><p>南昌市-&gt;武汉市 262.154km</p><p>南昌市-&gt;福州市 444.143km</p><p>福州市-&gt;台北市 250.622km</p><p>长沙市-&gt;广州市 564.43km</p><p>广州市-&gt;澳门 106.634km</p><p>澳门-&gt;香港 64.0048km</p><p>澳门-&gt;海口市 421.967km</p><p>海口市-&gt;南宁市 365.228km</p><p>南宁市-&gt;贵阳市 447.881km</p><p>贵阳市-&gt;重庆市 329.197km</p><p>重庆市-&gt;成都市 265.982km</p><p>贵阳市-&gt;昆明市 435.472km</p><p>天津市-&gt;沈阳市 605.429km</p><p>沈阳市-&gt;长春市 279.076km</p><p>长春市-&gt;哈尔滨市 232.473km</p><p>成都市-&gt;拉萨市 1249.67km</p><p>西宁市-&gt;乌鲁木齐市 1441.9km</p><p>总长度: 13372.3km</p><figure><img src="3.png" alt="3" /><figcaption aria-hidden="true">3</figcaption></figure><h3 id="在香港与澳门澳门与广州不拉直达线路的前提之下使得整个电网的长度最短-2">在香港与澳门、澳门与广州不拉直达线路的前提之下，使得整个电网的长度最短</h3><p>沈阳市-&gt;长春市 279.076km</p><p>长春市-&gt;哈尔滨市 232.473km</p><p>沈阳市-&gt;天津市 605.429km</p><p>天津市-&gt;北京市 109.744km</p><p>天津市-&gt;石家庄市 262.662km</p><p>石家庄市-&gt;太原市 172.534km</p><p>石家庄市-&gt;济南市 268.228km</p><p>太原市-&gt;呼和浩特市 338.861km</p><p>太原市-&gt;郑州市 358.809km</p><p>郑州市-&gt;西安市 435.687km</p><p>郑州市-&gt;合肥市 465.513km</p><p>合肥市-&gt;南京市 141.475km</p><p>南京市-&gt;杭州市 235.447km</p><p>杭州市-&gt;上海市 164.04km</p><p>合肥市-&gt;武汉市 317.307km</p><p>武汉市-&gt;南昌市 262.154km</p><p>南昌市-&gt;长沙市 289.531km</p><p>南昌市-&gt;福州市 444.143km</p><p>福州市-&gt;台北市 250.622km</p><p>西安市-&gt;兰州市 505.96km</p><p>兰州市-&gt;西宁市 194.278km</p><p>兰州市-&gt;银川市 343.112km</p><p>长沙市-&gt;广州市 564.43km</p><p>广州市-&gt;香港 131.027km</p><p>广州市-&gt;海口市 467.756km</p><p>海口市-&gt;南宁市 365.228km</p><p>海口市-&gt;澳门 421.967km</p><p>南宁市-&gt;贵阳市 447.881km</p><p>贵阳市-&gt;重庆市 329.197km</p><p>重庆市-&gt;成都市 265.982km</p><p>贵阳市-&gt;昆明市 435.472km</p><p>成都市-&gt;拉萨市 1249.67km</p><p>西宁市-&gt;乌鲁木齐市 1441.9km</p><p>总长度: 12797.6km</p><figure><img src="4.png" alt="4" /><figcaption aria-hidden="true">4</figcaption></figure><h3 id="在南方省份和北方省份之间仅规划一条直通专线使得整个电网的长度最短-2">在南方省份和北方省份之间仅规划一条直通专线，使得整个电网的长度最短</h3><p>与(1)结果相同</p><h2 id="总结">总结</h2><p>电网规划问题本质上就是求最小生成树。由于两两城市均可连通，故为一张稠密图，因此使用Prim算法更加合适。Prim算法可在 <span class="math inline">\(\mathcal{O}(n^2)\)</span> 的时间内求出一张对应的最小生成树，而实验中对特殊情况处理的时间复杂度均未超过 <span class="math inline">\(\mathcal{O}(n^2)\)</span>，因此总时间代价仍为 <span class="math inline">\(\mathcal{O}(n^2)\)</span>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;国家电网公司想在全国布局超高压输电网络，联通所有省会城市。为了降低成本，并且达到某些硬性要求，国家电网按照以下五种策略进行规划布局。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;要求整个电网的长度最短。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要求在西宁与郑州拉一根直达专线的情况下，使得整个电网长度最短&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要求不仅在西宁与郑州之间拉直达专线，还在杭州与长沙之间拉直达专线的情况下，使得整个电网长度最短。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在香港与澳门、澳门与广州不拉直达线路的前提之下，使得整个电网的长度最短。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;山东、河南、山西、甘肃、青海、新疆以及比他们更北的省份称为北方省份，其余省份称为南方省份。如果在南方省份和北方省份之间仅规划一条直通专线，如何使得整个电网的长度最短。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Malloc Lab实验记录</title>
    <link href="http://gonggongjohn.me/2020/12/15/computer-system/csapp-malloclab/"/>
    <id>http://gonggongjohn.me/2020/12/15/computer-system/csapp-malloclab/</id>
    <published>2020-12-15T14:15:13.000Z</published>
    <updated>2021-04-17T11:14:33.865Z</updated>
    
    <content type="html"><![CDATA[<p>Malloc Lab要求我们利用CSAPP中9.9节所介绍的技术设计一个简单的动态内存分配器，并且尽可能的使得分配效率最高且空间利用率最大。一个基本的思路便是先构建一个内存分配器的框架，并在此基础上不断优化使得效率和空间使用率均相对达到最优。</p><a id="more"></a><h2 id="概览">概览</h2><p>首先我们来看一下Lab的基本情况。在Lab的<strong>mm.c</strong>文件中提供了一个最简单的动态内存分配器，我们需要实现以下四个函数以实现更加高效紧凑的内存分配：</p><ul><li><strong>mm_init</strong>：初始化堆</li><li><strong>mm_malloc</strong>：在堆中申请一段空间</li><li><strong>mm_free</strong>：在堆中释放一段之前申请的空间</li><li><strong>mm_realloc</strong>：重新调整之前申请的空间大小</li></ul><p>为了方便起见，Lab在<strong>memlib.c</strong>中为我们提供了一些封装好的基础函数可供我们调用：</p><ul><li><strong>mem_sbrk</strong>：改变堆大小（仅能扩张堆）</li><li><strong>mem_heap_lo</strong>：返回指向堆首的指针</li><li><strong>mem_heap_hi</strong>：返回指向堆尾的指针</li><li><strong>mem_heapsize</strong>：返回当前的堆大小</li><li><strong>mem_pagesize</strong>：返回系统页大小</li></ul><p>我们可以使用Lab为我们提供的<strong>mdriver</strong>工具装载预先设计好的<strong>Trace</strong>文件测试我们的内存分配器效率和空间使用率：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> ./mdriver -V -f shortX-bal.rep <span class="hljs-comment"># X代表Trace文件编号</span></span><br></code></pre></td></tr></table></figure><h2 id="基本功能">基本功能</h2><h3 id="宏定义">宏定义</h3><p>首先我们仿照CSAPP中9.9.12的例子定义一组宏以方便后续的使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WSIZE 4   <span class="hljs-comment">//字大小（Bytes）</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DSIZE 8   <span class="hljs-comment">//双字大小（Bytes）</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CHUNKSIZE (1&lt;&lt;12) <span class="hljs-comment">//扩展堆的最小大小（Bytes）</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX(x,y) ((x) &gt; (y)? (x):(y)) <span class="hljs-comment">//求二者最大值</span></span><br><span class="hljs-comment">//将块大小和使用标识符组合进一个字中</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PACK(size,alloc) ((size) | (alloc))</span><br><span class="hljs-comment">//将任意指针转为一个字指针</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET(p) (*(unsigned int *)(p))</span><br><span class="hljs-comment">//在指针位置放入长度为一个字的值</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PUT(p,val) (*(unsigned int *)(p)=(val))</span><br><span class="hljs-comment">//将任意指针转为通用指针</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_ADDRESS(p) (*(void **)(p))</span><br><span class="hljs-comment">//从头部获取块大小</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_SIZE(p) (GET(p) &amp; ~0x7)</span><br><span class="hljs-comment">//从头部获取使用标识符</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)</span><br><span class="hljs-comment">//计算块头部位置</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HDRP(bp) ((char *)(bp)-WSIZE)</span><br><span class="hljs-comment">//计算块尾部位置</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FTRP(bp) ((char *)(bp)+ GET_SIZE(HDRP(bp))-DSIZE)</span><br><span class="hljs-comment">//计算有效载荷大小</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GET_PAYLOAD(bp) (GET_SIZE(HDRP(bp))-DSIZE) </span><br><span class="hljs-comment">//计算后一个块的位置</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NEXT_BLKP(bp) ((char *)(bp)+GET_SIZE(((char *)(bp)-WSIZE)))</span><br><span class="hljs-comment">//计算前一个块的位置</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PREV_BLKP(bp) ((char *)(bp)-GET_SIZE(((char *)(bp)-DSIZE)))</span><br></code></pre></td></tr></table></figure><h3 id="堆初始化">堆初始化</h3><p>堆初始化的一个基本作用就是向内存系统申请一块初始空间并标识为空闲状态。不过我们会发现，这一行为和后续当需要额外向系统申请新的空间时的行为完全相同，因此我们可以将这一逻辑封装为一个单独的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">extend_heap</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> words)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *bp; <span class="hljs-comment">//新空间的起始指针</span><br>    <span class="hljs-keyword">size_t</span> size;<br>  <span class="hljs-comment">//向上对齐为双字的倍数</span><br>    size=(words %<span class="hljs-number">2</span>)? (words+<span class="hljs-number">1</span>)*WSIZE: words*WSIZE;<br>  <span class="hljs-comment">//向系统申请空间</span><br>    <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span>)(bp = mem_sbrk(size)) == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">//设置块头部</span><br>    PUT(HDRP(bp),PACK(size,<span class="hljs-number">0</span>));<br>  <span class="hljs-comment">//设置块尾部</span><br>    PUT(FTRP(bp),PACK(size,<span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">void</span> *)bp;<br>&#125;<br></code></pre></td></tr></table></figure><p>于是初始化函数可以被写成这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mm_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(extend_heap(CHUNKSIZE/WSIZE)==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="申请空间">申请空间</h3><p>现在我们来考虑如何响应用户的空间申请。由于堆需要保持双字对其，我们必须将用户的申请要求向上对齐为双字大小。而由于一个块还需要额外的双字空间用于存放块头部和块尾部，因此一次申请的空间必须为四字以上。随后我们需要找到合适的位置分配给用户的这一申请，由于后续我们需要不断优化分配的算法，因此我们将这一过程单独封装。此外，如果当前堆中找不到合适的位置分配给用户，我们还需要申请额外的空间以满足用户的需求。于是空间申请函数的基本构架就可以写成这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mm_malloc</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">size_t</span> asize; <span class="hljs-comment">//实际分配的大小</span><br>    <span class="hljs-keyword">size_t</span> extendsize; <span class="hljs-comment">//扩展堆大小</span><br>    <span class="hljs-keyword">char</span> *bp;<br>  <span class="hljs-comment">//申请空间大小为0的情况</span><br>    <span class="hljs-keyword">if</span>(size==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//向上对齐</span><br>    <span class="hljs-keyword">if</span>(size&lt;=DSIZE)<br>        asize=<span class="hljs-number">2</span>*DSIZE;<br>    <span class="hljs-keyword">else</span><br>        asize=DSIZE*((size+(DSIZE)+(DSIZE<span class="hljs-number">-1</span>))/DSIZE);<br><span class="hljs-comment">//寻找合适的位置并分配空间</span><br>    <span class="hljs-keyword">if</span>((bp=find_fit(asize))!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        place(bp,asize);<br>        <span class="hljs-keyword">return</span> bp;<br>    &#125;<br>  <span class="hljs-comment">//当空间不够使扩展堆大小</span><br>    extendsize = MAX(asize, CHUNKSIZE);<br>    <span class="hljs-keyword">if</span>((bp=extend_heap(extendsize/WSIZE))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//分配空间</span><br>    place(bp,asize);<br>    <span class="hljs-keyword">return</span> bp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="释放空间">释放空间</h3><p>释放空间本质上就是把块头部的使用标识符从已使用改为空闲状态，因此我们可以快速实现出这一函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mm_free</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">size_t</span> size=GET_SIZE(HDRP(ptr)); <span class="hljs-comment">//块大小</span><br>  <span class="hljs-comment">//将头部设置为空闲状态</span><br>    PUT(HDRP(ptr),PACK(size,<span class="hljs-number">0</span>));<br>  <span class="hljs-comment">//将尾部设置为空闲状态</span><br>    PUT(FTRP(ptr),PACK(size,<span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>不过进一步思考我们会发现，当有多个连续的空闲块时，我们需要在释放时将其合并。由于空闲块可能在新释放的块之前或之后，因此我们需要讨论所有情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">coalesce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *bp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">size_t</span> prev_alloc=GET_ALLOC(FTRP(PREV_BLKP(bp))); <span class="hljs-comment">//前一个块是否空闲</span><br>    <span class="hljs-keyword">size_t</span> next_alloc=GET_ALLOC(HDRP(NEXT_BLKP(bp))); <span class="hljs-comment">//后一个块是否空闲</span><br>    <span class="hljs-keyword">size_t</span> size=GET_SIZE(HDRP(bp)); <span class="hljs-comment">//块大小</span><br>  <span class="hljs-comment">//前后都不空闲</span><br>    <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        <span class="hljs-keyword">return</span> bp;<br>    &#125;<br>  <span class="hljs-comment">//前一个块空闲</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        size+=GET_SIZE(HDRP(NEXT_BLKP(bp)));<br>        PUT(HDRP(bp),PACK(size,<span class="hljs-number">0</span>));<br>        PUT(FTRP(bp),PACK(size,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> bp;<br>    &#125;<br>  <span class="hljs-comment">//后一个块空闲</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        size+=GET_SIZE(FTRP(PREV_BLKP(bp)));<br>        PUT(FTRP(bp),PACK(size,<span class="hljs-number">0</span>));<br>        PUT(HDRP(PREV_BLKP(bp)),PACK(size,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> PREV_BLKP(bp);<br>    &#125;<br>  <span class="hljs-comment">//前后都空闲</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        size+=(GET_SIZE(HDRP(NEXT_BLKP(bp)))+GET_SIZE(FTRP(PREV_BLKP(bp))));<br>        PUT(FTRP(NEXT_BLKP(bp)),PACK(size,<span class="hljs-number">0</span>));<br>        PUT(HDRP(PREV_BLKP(bp)),PACK(size,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">return</span> PREV_BLKP(bp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在合并的过程中，我们还需要考虑遇到堆的前后边界时的情况。我们可以利用CSAPP中介绍的通过在堆首和堆尾引入首位块的方法规避这一问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mm_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//申请空间存放首位块</span><br>    <span class="hljs-keyword">if</span>((head_listp = mem_sbrk(<span class="hljs-number">4</span>*WSIZE)) == (<span class="hljs-keyword">void</span> *)<span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-comment">//填充</span><br>    PUT(head_listp,<span class="hljs-number">0</span>);<br>  <span class="hljs-comment">//序言块首</span><br>    PUT(head_listp+(<span class="hljs-number">1</span>*WSIZE),PACK(DSIZE,<span class="hljs-number">1</span>));<br>  <span class="hljs-comment">//序言块尾</span><br>    PUT(head_listp+(<span class="hljs-number">2</span>*WSIZE),PACK(DSIZE,<span class="hljs-number">1</span>));<br>  <span class="hljs-comment">//结尾块首</span><br>    PUT(head_listp+(<span class="hljs-number">3</span>*WSIZE),PACK(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>));<br>  <span class="hljs-comment">//堆首指针指向序言块</span><br>    head_listp += (<span class="hljs-number">2</span>*WSIZE);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>此外，在扩展堆大小的时候，我们也需要考虑到合并的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">extend_heap</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> words)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span> coalesce(bp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调整空间大小">调整空间大小</h3><p>当用户需要调整空间的大小时，我们需要考虑所有可能的情况。如果这一行为相当于申请更大的空间，我们可以先使用合并空闲块的思想将前后的空闲块合并进来，当合并后的空间大小还不够时，我们就需要重新在堆中申请一块更大的空间，并将原本空间中的数据复制过去：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">mm_realloc</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//如果没有原始位置，相当于申请一块新的空间</span><br>    <span class="hljs-keyword">if</span>(ptr==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> mm_malloc(size);<br>  <span class="hljs-comment">//如果新空间大小为0，相当于释放原本的空间</span><br>    <span class="hljs-keyword">if</span>(size==<span class="hljs-number">0</span>)<br>    &#123; <br>        mm_free(ptr);<br>        <span class="hljs-keyword">return</span> ptr;<br>    &#125;<br>    <span class="hljs-keyword">size_t</span> asize=<span class="hljs-number">0</span>; <span class="hljs-comment">//实际分配大小</span><br>  <span class="hljs-comment">//对齐处理</span><br>    <span class="hljs-keyword">if</span>(size&lt;=DSIZE)<br>        asize=<span class="hljs-number">2</span>*DSIZE;<br>    <span class="hljs-keyword">else</span><br>        asize=DSIZE*((size+(DSIZE)+(DSIZE<span class="hljs-number">-1</span>))/DSIZE);<br>    <span class="hljs-keyword">if</span>(ptr!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">size_t</span> oldsize=GET_PAYLOAD(ptr); <span class="hljs-comment">//获取原本的有效载荷大小</span><br>      <span class="hljs-comment">//原本大小小于新申请空间的大小</span><br>        <span class="hljs-keyword">if</span>(oldsize&lt;size)<br>        &#123;<br>            <span class="hljs-keyword">void</span>* newptr=recoalesce(ptr,asize); <span class="hljs-comment">//尝试合并前后块</span><br>          <span class="hljs-comment">//合并空间无法满足需求，申请额外的空间</span><br>            <span class="hljs-keyword">if</span>(newptr==<span class="hljs-literal">NULL</span>)<br>            &#123;<br>                newptr=mm_malloc(asize); <span class="hljs-comment">//申请新空间</span><br>                <span class="hljs-built_in">memcpy</span>(newptr,ptr,oldsize); <span class="hljs-comment">//复制数据</span><br>                mm_free(ptr); <span class="hljs-comment">//释放原空间</span><br>                <span class="hljs-keyword">return</span> newptr;<br>            &#125;<br>          <span class="hljs-comment">//合并后空间能够满足需求</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> newptr;<br>            &#125;<br>        &#125;<br>      <span class="hljs-comment">//原本大小和新空间大小一致</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oldsize==size)<br>        &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br>      <span class="hljs-comment">//原本大小大于新空间大小</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//合并前后空闲块</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">recoalesce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *bp,<span class="hljs-keyword">size_t</span> needsize)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">size_t</span> prev_alloc=GET_ALLOC(FTRP(PREV_BLKP(bp))); <span class="hljs-comment">//前一个块是否空闲</span><br>    <span class="hljs-keyword">size_t</span> next_alloc=GET_ALLOC(HDRP(NEXT_BLKP(bp))); <span class="hljs-comment">//后一个块是否空闲</span><br>    <span class="hljs-keyword">size_t</span> size=GET_SIZE(HDRP(bp)); <span class="hljs-comment">//当前块大小</span><br>  <span class="hljs-comment">//前后都不空闲</span><br>    <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//后一个块空闲</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(NEXT_BLKP(bp))); <span class="hljs-comment">//合并后一个块后的大小</span><br>        <span class="hljs-keyword">if</span>(size&lt;needsize)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            PUT(HDRP(bp),PACK(size,<span class="hljs-number">1</span>));<br>            PUT(FTRP(bp),PACK(size,<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">return</span> bp;<br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">//前一个块空闲</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        size += GET_SIZE(HDRP(PREV_BLKP(bp)));<br>        <span class="hljs-keyword">if</span>(size&lt;needsize)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">size_t</span> thissize=GET_PAYLOAD(bp); <span class="hljs-comment">//当前有效载荷大小</span><br>            <span class="hljs-keyword">void</span>* prev_point=PREV_BLKP(bp); <span class="hljs-comment">//前一个块的位置</span><br>            PUT(FTRP(bp),PACK(size,<span class="hljs-number">1</span>));<br>            PUT(HDRP(prev_point),PACK(size,<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">memcpy</span>(prev_point,bp,thissize); <span class="hljs-comment">//向前复制数据</span><br>            <span class="hljs-keyword">return</span> prev_point;<br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">//前后都空闲</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        size += (GET_SIZE(HDRP(NEXT_BLKP(bp)))+GET_SIZE(FTRP(PREV_BLKP(bp))));<br>        <span class="hljs-keyword">if</span>(size&lt;needsize)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">size_t</span> thissize=GET_PAYLOAD(bp);<br>            <span class="hljs-keyword">void</span>* prev_point=PREV_BLKP(bp);<br>            PUT(FTRP(NEXT_BLKP(bp)),PACK(size,<span class="hljs-number">1</span>));<br>            PUT(HDRP(PREV_BLKP(bp)),PACK(size,<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">memcpy</span>(prev_point,bp,thissize);<br>            <span class="hljs-keyword">return</span> prev_point;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="性能优化">性能优化</h2><p>前面我们使用隐式链表的方式实现了内存分配器的基本逻辑。但以这种方式实现的内存分配器效率极低且会产生大量的外部碎片，因此我们需要对其逐步优化。</p><h3 id="显式分离存储">显式分离存储</h3><p>在使用隐式链表存储块信息的情况下，搜索一个空闲块的平均时间复杂度为 <span class="math display">\[\mathcal{O}(n)\]</span>，当块的数量很大或空闲块分布较为稀疏时，搜索效率就会变得极低。如果我们显式地将空闲块连在一起，搜索效率会得到一定的提高，然而，每当我们需要释放一段空间时，就需要在空闲链表中搜索合适的位置放置新的空闲块，这一操作有可能使得总时间复杂度再次退化到 <span class="math display">\[\mathcal{O}(n)\]</span>，因此我们还需要使用CSAPP中介绍的分离链表的方式存储不同规模的空闲块。我们可以按照2的幂来划分每个空闲链表的大小范围，这里一共划分成了10类：<span class="math display">\[(0,8],(9,16],(17,32],(33,64],(65,128],(129,256],(257,512],(513,2048],(2049,4096],(4097, +\infty)\]</span></p><p>我们可以通过一个指针数据来保存每张链表的头位置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MAX_SIZE=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>* linkhead[<span class="hljs-number">10</span>]=&#123;<span class="hljs-literal">NULL</span>&#125;;  <br></code></pre></td></tr></table></figure><p>随后我们实现一个根据块大小计算属于哪一张链表的辅助函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findlink</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">8</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">32</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">128</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">256</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">512</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">2048</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">4096</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就可以实现空闲块的插入和删除逻辑了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//向对应的空闲链表中插入空闲块</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">placefree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* bp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> index=findlink(GET_SIZE(HDRP(bp))); <span class="hljs-comment">//空闲链表头下标</span><br>    <span class="hljs-keyword">void</span>* head=linkhead[index]; <span class="hljs-comment">//空闲链表入口</span><br>  <span class="hljs-comment">//相应链表未初始化时</span><br>    <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">//把当前块作为标首</span><br>        linkhead[index]=bp;<br>        GET_ADDRESS(PRED(bp))=<span class="hljs-literal">NULL</span>;<br>        GET_ADDRESS(SUCC(bp))=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">size_t</span> bpsize=GET_SIZE(HDRP(bp)); <span class="hljs-comment">//当前块大小</span><br>        <span class="hljs-keyword">void</span>* temp=<span class="hljs-literal">NULL</span>;<br>      <span class="hljs-comment">//移动到链表中和当前块大小最接近的元素前</span><br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            temp=head;<br>            <span class="hljs-keyword">if</span>(GET_SIZE(HDRP(head))&gt;=bpsize) <span class="hljs-keyword">break</span>;<br>            head=GET_ADDRESS(SUCC(head));<br>        &#125;<br>      <span class="hljs-comment">//插入当前块</span><br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            GET_ADDRESS(SUCC(temp))=bp;<br>            GET_ADDRESS(PRED(bp))=temp;<br>            GET_ADDRESS(SUCC(bp))=<span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(head==linkhead[index])<br>            &#123;<br>                GET_ADDRESS(PRED(head))=bp;<br>                GET_ADDRESS(SUCC(bp))=head;<br>                GET_ADDRESS(PRED(bp))=<span class="hljs-literal">NULL</span>;<br>                linkhead[index]=bp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                GET_ADDRESS(SUCC(GET_ADDRESS(PRED(head))))=bp;<br>                GET_ADDRESS(PRED(bp))=GET_ADDRESS(PRED(head));<br>                GET_ADDRESS(SUCC(bp))=head;<br>                GET_ADDRESS(PRED(head))=bp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//从对应的空闲链表中删除块</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deletefree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* bp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> index=findlink(GET_SIZE(HDRP(bp)));<br>  <span class="hljs-comment">//特判</span><br>    <span class="hljs-keyword">if</span>(linkhead[index]==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Freelist is empty!&quot;</span>);<br>  <span class="hljs-comment">//链表中仅有一个元素时</span><br>    <span class="hljs-keyword">if</span>(GET_ADDRESS(PRED(bp))==<span class="hljs-literal">NULL</span> &amp;&amp; GET_ADDRESS(SUCC(bp))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        linkhead[index]=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//当前元素为表首元素时</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GET_ADDRESS(PRED(bp))==<span class="hljs-literal">NULL</span> &amp;&amp; GET_ADDRESS(SUCC(bp))!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        GET_ADDRESS(PRED(GET_ADDRESS(SUCC(bp))))=<span class="hljs-literal">NULL</span>;<br>        linkhead[index]=GET_ADDRESS(SUCC(bp));<br>        GET_ADDRESS(SUCC(bp))=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//当前元素为表尾元素时</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GET_ADDRESS(PRED(bp))!=<span class="hljs-literal">NULL</span> &amp;&amp; GET_ADDRESS(SUCC(bp))==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        GET_ADDRESS(SUCC(GET_ADDRESS(PRED(bp))))=<span class="hljs-literal">NULL</span>;<br>        GET_ADDRESS(PRED(bp))=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>  <span class="hljs-comment">//当前元素在表的中间位置时</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        GET_ADDRESS(SUCC(GET_ADDRESS(PRED(bp))))=GET_ADDRESS(SUCC(bp));<br>        GET_ADDRESS(PRED(GET_ADDRESS(SUCC(bp))))=GET_ADDRESS(PRED(bp));<br>        GET_ADDRESS(PRED(bp))=GET_ADDRESS(SUCC(bp))=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们需要在合并空闲块时引入这一管理机制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">coalesce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *bp)</span></span><br><span class="hljs-function"></span>&#123;<br>...<br>    <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        placefree(bp); <span class="hljs-comment">//向空闲链表插入当前块</span><br>        ...<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        deletefree(NEXT_BLKP(bp)); <span class="hljs-comment">//从空闲链表中删除后一个块</span><br>        ...<br>        placefree(bp);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        deletefree(PREV_BLKP(bp)); <span class="hljs-comment">//从空闲链表中删除前一个块</span><br>        ...<br>        placefree(PREV_BLKP(bp)); <span class="hljs-comment">//向空闲链表插入更新过的前一个块</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        deletefree(PREV_BLKP(bp)); <span class="hljs-comment">//从空闲链表中删除前一个块</span><br>        deletefree(NEXT_BLKP(bp)); <span class="hljs-comment">//从空闲链表中删除后一个块</span><br>        ...<br>        placefree(PREV_BLKP(bp)); <span class="hljs-comment">//向空闲链表插入更新过的前一个块</span><br>        ...<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">recoalesce</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *bp,<span class="hljs-keyword">size_t</span> needsize)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prev_alloc &amp;&amp; !next_alloc)<br>    &#123;<br>        ...<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            deletefree(NEXT_BLKP(bp));<br>            ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!prev_alloc &amp;&amp; next_alloc)<br>    &#123;<br>        ...<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ...<br>            deletefree(prev_point);<br>            ...<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ...<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ...<br>            deletefree(prev_point);<br>            deletefree(NEXT_BLKP(bp));<br>            ...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分离适配">分离适配</h3><p>有了分离存储的结构后，我们就可以使用分离适配的方法来寻找合适的块分配给用户的每一次空间请求了。其具体思路就是当用户申请某个大小的空间时，我们在其对应空间大小范围的链表中搜索，一旦搜索到一块不小于用户申请大小的块，就将其分配给用户。不过需要注意的是，如果分配给用户的块剩下的大小还可以单独形成一个新的空闲块，则需要将其分割成两个块。用代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//寻找合适的块</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> *<span class="hljs-title">find_fit</span><span class="hljs-params">(<span class="hljs-keyword">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//遍历对应的链表</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> index=findlink(size);index&lt;MAX_SIZE;++index)<br>    &#123;<br>        <span class="hljs-keyword">void</span>* bp=linkhead[index];<br>        <span class="hljs-keyword">while</span>(bp!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>          <span class="hljs-comment">//在找到第一个不小于用户申请大小的块时返回</span><br>            <span class="hljs-keyword">if</span>(GET_SIZE(HDRP(bp))&gt;=size) <span class="hljs-keyword">return</span> bp;<br>            bp=GET_ADDRESS(SUCC(bp));<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//如果找不到合适的空间则返回空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//在块中分配空间</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">place</span><span class="hljs-params">(<span class="hljs-keyword">void</span>* bp,<span class="hljs-keyword">size_t</span> asize)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//剩余块大小</span><br>    <span class="hljs-keyword">size_t</span> left=GET_SIZE(HDRP(bp))-asize;<br>    <span class="hljs-keyword">int</span> alloc=GET_ALLOC(HDRP(bp));<br>  <span class="hljs-comment">//如果块为空闲状态，则把它从空闲链表中移除</span><br>    <span class="hljs-keyword">if</span>(alloc==<span class="hljs-number">0</span>)<br>        deletefree(bp);<br>  <span class="hljs-comment">//剩余空间可以构成一个新块</span><br>    <span class="hljs-keyword">if</span>(left&gt;=(DSIZE*<span class="hljs-number">2</span>))<br>    &#123;<br>        PUT(HDRP(bp),PACK(asize,<span class="hljs-number">1</span>));<br>        PUT(FTRP(bp),PACK(asize,<span class="hljs-number">1</span>));<br>        PUT(HDRP(NEXT_BLKP(bp)),PACK(left,<span class="hljs-number">0</span>));<br>        PUT(FTRP(NEXT_BLKP(bp)),PACK(left,<span class="hljs-number">0</span>));<br>        coalesce(NEXT_BLKP(bp));<br><br>    &#125;<br>  <span class="hljs-comment">//剩余空间不能构成一个新块</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">size_t</span> allsize=GET_SIZE(HDRP(bp));<br>        PUT(HDRP(bp),PACK(allsize,<span class="hljs-number">1</span>));<br>        PUT(FTRP(bp),PACK(allsize,<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以证明，这种方法的空间利用率近似于对整个堆做最佳适配搜索，且其搜索效率明显优于对整个堆做最佳适配搜索。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Malloc Lab要求我们利用CSAPP中9.9节所介绍的技术设计一个简单的动态内存分配器，并且尽可能的使得分配效率最高且空间利用率最大。一个基本的思路便是先构建一个内存分配器的框架，并在此基础上不断优化使得效率和空间使用率均相对达到最优。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="http://gonggongjohn.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Computer-System" scheme="http://gonggongjohn.me/tags/Computer-System/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://gonggongjohn.me/2020/12/11/algorithm/course-exp/algorithm-exp10/"/>
    <id>http://gonggongjohn.me/2020/12/11/algorithm/course-exp/algorithm-exp10/</id>
    <published>2020-12-11T03:45:00.000Z</published>
    <updated>2021-09-05T15:53:15.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li><strong>最优打印等待问题</strong> 某个班级有 <span class="math inline">\(m\)</span> 位同学一起去打印店打印实验报告。这个打印店只有一台打印机。由于各实验报告的厚薄不同，所需打印时间也不相同。同学 <span class="math inline">\(i\)</span> 需要的打印时间为 <span class="math inline">\(t_i(1 \leq i \leq m)\)</span>。应该应如何安排这些同学的打印次序使得平均等待时间最小？ <strong>输入数据格式：</strong>在文件students.txt中。第 <span class="math inline">\(1\)</span> 行是正整数 <span class="math inline">\(m\)</span>，表示有 <span class="math inline">\(m\)</span> 位同学。接下来的一行中有 <span class="math inline">\(m\)</span> 个正整数，表示 <span class="math inline">\(m\)</span> 个同学所需要的打印时间。 <strong>输出数据格式：</strong>将最小平均等待时间输出到文件waittime.txt。</li><li><strong>零钱找零问题</strong> 张阿姨是超市售货员，经常需要给客户找零。为了买卖便利，张阿姨在找零钱的过程中通常返回最少张（枚）数零钱，市面上流通的钱币有 <span class="math inline">\(100, 50, 20, 10, 5, 1, 0.5, 0.1\)</span> 元等各种样式，若某顾客购物消费 <span class="math inline">\(m\)</span> 元，付款 $ 1.05m  / 10$，则找零钱使用的最少钱币数量是？ <strong>输入数据格式：</strong>在文件customer.txt中。第 <span class="math inline">\(1\)</span> 行是正整数 <span class="math inline">\(a\)</span>，表示顾客有几次消费。第 <span class="math inline">\(2\)</span> 行有 <span class="math inline">\(a\)</span> 个整数，表示这些顾客的消费 <span class="math inline">\(1\)</span>。 <strong>输出数据格式：</strong>将找零策略输出到文件output.txt中。共有 <span class="math inline">\(a\)</span> 行。每行 <span class="math inline">\(8\)</span> 个数字，分别表示不同面值钱币的数量。</li></ol><a id="more"></a><h2 id="实现代码">实现代码</h2><h3 id="最优打印等待问题">最优打印等待问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;students.txt&quot;</span>)</span></span>;<br>    <span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;waittime.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">int</span> m, sum, pre;<br>    <span class="hljs-keyword">double</span> mean;<br>    fin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) fin&gt;&gt;a[i];<br>    sort(a, a + m);<br>    sum = <span class="hljs-number">0</span>;<br>    pre = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i++)&#123;<br>        pre += a[i];<br>        sum += pre;<br>    &#125;<br>    mean = (<span class="hljs-keyword">double</span>)sum / m;<br>    fout&lt;&lt;mean;<br>    fin.close();<br>    fout.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="零钱找零问题">零钱找零问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> m[<span class="hljs-number">1000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;customer.txt&quot;</span>)</span></span>;<br>    <span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;output.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">int</span> a, rec[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">double</span> nom[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.1</span>&#125;;<br>    <span class="hljs-keyword">double</span> res;<br>    fin&gt;&gt;a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)&#123;<br>        fin&gt;&gt;m[i];<br>        res = <span class="hljs-built_in">floor</span>(<span class="hljs-number">1.05</span> * m[i] * <span class="hljs-number">10</span>) / <span class="hljs-number">10</span> - m[i];<br>        <span class="hljs-built_in">memset</span>(rec, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(rec));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(res / nom[j] &gt;= <span class="hljs-number">1</span>)&#123;<br>                rec[j] = <span class="hljs-built_in">floor</span>(res / nom[j]);<br>                res -= nom[j] * rec[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(res &lt; <span class="hljs-number">0.1</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> w = <span class="hljs-number">0</span>; w &lt; <span class="hljs-number">8</span>; w++) fout&lt;&lt;rec[w]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        fout&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    fin.close();<br>    fout.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法正确性">算法正确性</h2><h3 id="最优打印等待问题-1">最优打印等待问题</h3><h4 id="算法思路">算法思路</h4><p>将打印时间从小到大排序，打印时间小的先开始打印。</p><h4 id="正确性证明">正确性证明</h4><p>设排好序的打印时间序列为 <span class="math inline">\(\left&lt; a_1,a_2,…,a_n \right&gt;(a_1 \leq a_2 \leq \cdots \leq a_n)\)</span></p><p>则所有人的总等待时间 <span class="math display">\[T = \sum_{k = 1}^{n} \sum_{i = 0}^{k - 1} a_i\]</span> 由于平均等待时间 <span class="math inline">\(\bar{T}=T / n\)</span>，故要证 <span class="math inline">\(\bar{T}\)</span> 最小，即要证 <span class="math inline">\(T\)</span> 最小</p><p>下证该打印序列的总等待时间最小</p><p>任取 <span class="math inline">\(p \neq q \in \{1,2,…,n \}\)</span>，将 <span class="math inline">\(a_p\)</span> 与 <span class="math inline">\(a_q\)</span> 互换</p><p>不妨设 <span class="math inline">\(p&lt;q\)</span>，则此时所有人的总等待时间 <span class="math display">\[\begin{aligned}T&#39; &amp;= \sum_{k=1}^p \sum_{i=0}^{k-1} a_i + \sum_{k=p+1}^q \left( \sum_{i=0}^{p-1} a_i + a_q + \sum_{i=p+1}^{k-1} a_i \right) + \sum_{k=q+1}^n \sum_{i=0}^{k-1} a_i \\&amp;= \sum_{k=1}^p \sum_{i=0}^{k-1} a_i + \sum_{k=q+1}^n \sum_{i=0}^{k-1} a_i + \sum_{k=p+1}^q \sum_{i=0}^{p-1} a_i + \sum_{k=p+1}^q \sum_{i=p+1}^{k-1} a_i + (q-p) a_q\end{aligned}\]</span> 而 <span class="math display">\[T = \sum_{k = 1}^p \sum_{i = 0}^{k - 1} a_i + \sum_{k = q+1}^n \sum_{i = 0}^{k - 1} a_i + \sum_{k = p+1}^q \sum_{i = 0}^{p - 1}a_i + \sum_{k = p+1}^q \sum_{i = p+1}^{k - 1}a_i + (q-p)a_p\]</span> 又由于 <span class="math inline">\(a_p \leq a_q\)</span>，故 <span class="math inline">\(T&#39; \geq T\)</span></p><p>因此互换序列中任意两人的打印顺序所得的总等待时间均不小于原序列的总等待时间</p><p>即原序列的总等待时间最小</p><h3 id="零钱找零问题-1">零钱找零问题</h3><h4 id="算法思路-1">算法思路</h4><p>将纸币的面值从大到小排序，当大的纸币单张面额超过剩下的找零时再用更小的纸币继续找零</p><h4 id="正确性证明-1">正确性证明</h4><p>设钱币面额分别为 <span class="math inline">\(\left&lt; a_1, a_2, \cdots, a_8 \right&gt; (a_1 &gt; a_2 &gt; \cdots &gt; a_8)\)</span>，需要找零的数额 <span class="math inline">\(r = \lfloor 1.05m \times 10 \rfloor / 10 - m\)</span>，贪心算法下对应的找零钱币个数为 <span class="math inline">\(k_1, k_2, \cdots, k_8\)</span>。则 <span class="math display">\[r = \sum_{i = 1}^8 k_i a_i\]</span> 下证明 <span class="math inline">\(s = \sum_{i = 1}^8 k_i\)</span> 最小</p><p>若在某一种面额的钱币上少用一张换作更小面额的钱币，即 <span class="math inline">\(k_p&#39; = k_p - 1 (p \in \{1, 2, \cdots, 8\})\)</span>，则 <span class="math display">\[r = \sum_{i = 1}^{p - 1} k_i a_i + k_p a_p - a_p + \sum_{i = p+1}^8 k_i&#39; a_i\]</span> 由于 <span class="math inline">\(a_i &lt; a_p (i &gt; p)\)</span>，故 <span class="math inline">\(\sum_{i = p+1}^8 (k_i&#39; k_i) &gt; 1\)</span></p><p>故 <span class="math inline">\(s&#39; = \sum_{i = 1}^8 k_i&#39; &gt; s\)</span></p><p>故使用贪心算法生成的找零钱币个数总和最小。</p><h2 id="运行结果">运行结果</h2><h3 id="最优打印等待问题-2">最优打印等待问题</h3><p>输入：（students.txt）</p><p>10</p><p>8 7 5 2 19 6 20 8 1 15</p><p>输出：（waittime.txt）</p><p>23.6</p><h3 id="零钱找零问题-2">零钱找零问题</h3><p>输入：（customer.txt）</p><p>8</p><p>111 222 333 567 234 256 666 789</p><p>输出：（output.txt）</p><p>0 0 0 0 1 0 1 0</p><p>0 0 0 1 0 1 0 0</p><p>0 0 0 1 1 1 1 1</p><p>0 0 1 0 1 3 0 2</p><p>0 0 0 1 0 1 1 1</p><p>0 0 0 1 0 2 1 3</p><p>0 0 1 1 0 3 0 2</p><p>0 0 1 1 1 4 0 3</p><h2 id="总结">总结</h2><p>通过实验发现，最优打印等待问题和零钱找零问题均可以使用贪心算法得到正确的结果，文中也从数学上严格证明了贪心算法的正确性。相比动态规划算法，使用贪心算法解决这两个问题的运行效率更高，可以更快的求解出所需的结果。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;strong&gt;最优打印等待问题&lt;/strong&gt; 某个班级有 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 位同学一起去打印店打印实验报告。这个打印店只有一台打印机。由于各实验报告的厚薄不同，所需打印时间也不相同。同学 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 需要的打印时间为 &lt;span class=&quot;math inline&quot;&gt;\(t_i(1 \leq i \leq m)\)&lt;/span&gt;。应该应如何安排这些同学的打印次序使得平均等待时间最小？ &lt;strong&gt;输入数据格式：&lt;/strong&gt;在文件students.txt中。第 &lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt; 行是正整数 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt;，表示有 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 位同学。接下来的一行中有 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个正整数，表示 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 个同学所需要的打印时间。 &lt;strong&gt;输出数据格式：&lt;/strong&gt;将最小平均等待时间输出到文件waittime.txt。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;零钱找零问题&lt;/strong&gt; 张阿姨是超市售货员，经常需要给客户找零。为了买卖便利，张阿姨在找零钱的过程中通常返回最少张（枚）数零钱，市面上流通的钱币有 &lt;span class=&quot;math inline&quot;&gt;\(100, 50, 20, 10, 5, 1, 0.5, 0.1\)&lt;/span&gt; 元等各种样式，若某顾客购物消费 &lt;span class=&quot;math inline&quot;&gt;\(m\)&lt;/span&gt; 元，付款 $ 1.05m  / 10$，则找零钱使用的最少钱币数量是？ &lt;strong&gt;输入数据格式：&lt;/strong&gt;在文件customer.txt中。第 &lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt; 行是正整数 &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;，表示顾客有几次消费。第 &lt;span class=&quot;math inline&quot;&gt;\(2\)&lt;/span&gt; 行有 &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; 个整数，表示这些顾客的消费 &lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;。 &lt;strong&gt;输出数据格式：&lt;/strong&gt;将找零策略输出到文件output.txt中。共有 &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; 行。每行 &lt;span class=&quot;math inline&quot;&gt;\(8\)&lt;/span&gt; 个数字，分别表示不同面值钱币的数量。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>动态表</title>
    <link href="http://gonggongjohn.me/2020/12/04/algorithm/course-exp/algorithm-exp9/"/>
    <id>http://gonggongjohn.me/2020/12/04/algorithm/course-exp/algorithm-exp9/</id>
    <published>2020-12-04T03:45:00.000Z</published>
    <updated>2021-09-05T15:53:37.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><p>有一个公司想开发一个关于花卉的百科全书，用户只要输入花卉的名称，就能够输出花卉的详细信息。花卉包括：牡丹、芍药、茶花、菊花、梅花、兰花、月季、杜鹃花、郁金香、茉莉花、海棠、荷花、栀子花、莲花、百合、康乃馨、玫瑰、格桑花等1000种。这个公司想提升花卉检索和存储效率，打算采用<strong>动态表（Dynamic Table）</strong>来实现。由于花卉的数量可能会增加，也可能会减少，所实现的动态表需要有如下功能： 1. 能够插入数据</p><ol start="2" type="1"><li><p>能够删除数据</p></li><li><p>能够检索数据</p></li><li><p>能够按照参数扩展规模或者缩减规模</p></li></ol><a id="more"></a><h2 id="实现代码">实现代码</h2><h3 id="数据生成器">数据生成器</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    fout&lt;&lt;n&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) fout&lt;&lt;rand() % n&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    fout.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态表">动态表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> a[<span class="hljs-number">5000000</span>];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">table_info</span>&#123;</span><br>    <span class="hljs-keyword">int</span> *p;<br>    <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-keyword">int</span> num;<br>&#125;;<br><span class="hljs-function">table_info *<span class="hljs-title">insert</span><span class="hljs-params">(table_info *table, <span class="hljs-keyword">int</span> description)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (table-&gt;size == <span class="hljs-number">0</span>)&#123;<br>        table-&gt;p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1</span>];<br>        table-&gt;size = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (table-&gt;num == table-&gt;size)&#123;<br>        <span class="hljs-keyword">int</span> *ntable = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span> * table-&gt;size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; table-&gt;num; i++)&#123;<br>            ntable[i] = table-&gt;p[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[] table-&gt;p;<br>        table-&gt;p = ntable;<br>        table-&gt;size = <span class="hljs-number">2</span> * table-&gt;size;<br>    &#125;<br>    table-&gt;p[table-&gt;num] = description;<br>    table-&gt;num++;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br><span class="hljs-comment">// You can add a parameter to insert the actual flower infos</span><br><span class="hljs-function">table_info *<span class="hljs-title">multi_insert</span><span class="hljs-params">(table_info *table, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t = table-&gt;num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        insert(table, t + i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br><span class="hljs-function">table_info *<span class="hljs-title">remove</span><span class="hljs-params">(table_info *table)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (table-&gt;size == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> table;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (table-&gt;num &lt;= table-&gt;size / <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">int</span> *ntable = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[table-&gt;size / <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; table-&gt;num; i++)&#123;<br>            ntable[i] = table-&gt;p[i];<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[] table-&gt;p;<br>        table-&gt;p = ntable;<br>        table-&gt;size = table-&gt;size / <span class="hljs-number">2</span>;<br>    &#125;<br>    table-&gt;num--;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br><span class="hljs-function">table_info *<span class="hljs-title">multi_remove</span><span class="hljs-params">(table_info *table, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        remove(table);<br>    &#125;<br>    <span class="hljs-keyword">return</span> table;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(table_info *table, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= table-&gt;num) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> table-&gt;p[i];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> op, num;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">clock_t</span> start, stop;<br>    table_info t = &#123;<span class="hljs-literal">nullptr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;op&gt;&gt;num;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">int</span> n;<br>        fin&gt;&gt;n;<br>        multi_insert(&amp;t, n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) fin&gt;&gt;a[i];<br>        start = clock();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            query(&amp;t, a[i]);<br>        &#125;<br>        stop = clock();<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        fin.close();<br>    &#125;<br>    <span class="hljs-comment">//op: 1 - insert; 2 - delete; 3 - query; 0 - exit</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">while</span> (op != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)&#123;<br>            start = clock();<br>            multi_insert(&amp;t, num);<br>            stop = clock();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Capacity: &quot;</span>&lt;&lt;t.size&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)&#123;<br>            start = clock();<br>            multi_remove(&amp;t, num);<br>            stop = clock();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Capacity: &quot;</span>&lt;&lt;t.size&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)&#123;<br>            start = clock();<br>            <span class="hljs-keyword">int</span> r = query(&amp;t, num);<br>            stop = clock();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;description: &quot;</span>&lt;&lt;r&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="运行效率">运行效率</h2><p>时间记录使用了C++自带的clock()函数，通过在程序开头和结尾分别调用clock()函数并将两值相减，即可得到程序运行时间。结果如下：</p><figure><img src="1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><figure><img src="2.png" alt="2" /><figcaption aria-hidden="true">2</figcaption></figure><h2 id="总结">总结</h2><p>动态表执行 <span class="math inline">\(n\)</span> 次插入和删除操作的摊还代价为 <span class="math inline">\(\mathcal{O}(n)\)</span>，但在实际运行过程中，当插入或删除的数据规模越过 <span class="math inline">\(2\)</span> 的幂次时，运行时间会发生显著的增长，且幂次越高，运行时间的增长幅度越大，这与实验结果相吻合。实验中使用了直接寻址表作为动态表的存储结构，故理论上可以在 <span class="math inline">\(\mathcal{O}(1)\)</span> 的时间内查询给定的花卉信息。考虑到不同存储单元的访问代价略有不同，实验结果基本与理论吻合。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;有一个公司想开发一个关于花卉的百科全书，用户只要输入花卉的名称，就能够输出花卉的详细信息。花卉包括：牡丹、芍药、茶花、菊花、梅花、兰花、月季、杜鹃花、郁金香、茉莉花、海棠、荷花、栀子花、莲花、百合、康乃馨、玫瑰、格桑花等1000种。这个公司想提升花卉检索和存储效率，打算采用&lt;strong&gt;动态表（Dynamic Table）&lt;/strong&gt;来实现。由于花卉的数量可能会增加，也可能会减少，所实现的动态表需要有如下功能： 1. 能够插入数据&lt;/p&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;能够删除数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够检索数据&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够按照参数扩展规模或者缩减规模&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>最优二叉搜索树</title>
    <link href="http://gonggongjohn.me/2020/11/27/algorithm/course-exp/algorithm-exp8/"/>
    <id>http://gonggongjohn.me/2020/11/27/algorithm/course-exp/algorithm-exp8/</id>
    <published>2020-11-27T03:45:00.000Z</published>
    <updated>2021-05-20T12:11:50.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容与设计思想">内容与设计思想</h2><p>有一个公司想开发一个关于花卉的百科全书，用户只要输入花卉的名称，就能够输出花卉的详细信息。花卉包括：牡丹、芍药、茶花、菊花、梅花、兰花、月季、杜鹃花、郁金香、茉莉花、海棠、荷花、栀子花、莲花、百合、康乃馨、玫瑰、格桑花。公司也在试运行阶段发现这些花的访问频率不一，有些花经常性被访问，有些被访问的次数就少很多了。这18种花中，第1种的访问频率是6，第2-3种的访问频率是5，第4-6种的访问频率是4，第7-10种的访问频率是3，第11-15种的访问频率是2，第16-18种的访问频率是1。</p><p>这个公司想提升花卉检索效率，所以对比了三种方法。</p><ol type="1"><li><p>构建优化的二叉搜索树（optimal BST），进行搜索。</p></li><li><p>将这些花卉按照访问频度从高到低放在一个数组中，并顺序访问来检索</p></li><li><p>构建哈希表来存储这些数据，并基于哈希表来检索数据。</p></li></ol><p>请实现这三种方法，并且通过实验来比较这三种方法的优劣。</p><a id="more"></a><h2 id="实现代码">实现代码</h2><h3 id="数据生成器">数据生成器</h3><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> a[<span class="hljs-number">10000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shuffle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> rand() % length;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> flower[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;paeoniaSA&quot;</span>, <span class="hljs-string">&quot;paeoniaLP&quot;</span>, <span class="hljs-string">&quot;camellia&quot;</span>, <span class="hljs-string">&quot;chrysanthemum&quot;</span>, <span class="hljs-string">&quot;plum&quot;</span>, <span class="hljs-string">&quot;orchid&quot;</span>,<br>                         <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;azalea&quot;</span>, <span class="hljs-string">&quot;tulip&quot;</span>, <span class="hljs-string">&quot;jasmine&quot;</span>, <span class="hljs-string">&quot;begonia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>,<br>                         <span class="hljs-string">&quot;gardenia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;carnation&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;gesang&quot;</span>&#125;;<br>    <span class="hljs-keyword">int</span> freq[<span class="hljs-number">18</span>] = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; (n * freq[i] / <span class="hljs-number">53</span>); j++)&#123;<br>            <span class="hljs-keyword">int</span> t = shuffle(n);<br>            <span class="hljs-keyword">while</span>(a[t] != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                t = shuffle(n);<br>            &#125;<br>            a[t] = flower[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        fout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    fout.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最优二叉搜索树">最优二叉搜索树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> a[<span class="hljs-number">10000005</span>];<br><span class="hljs-keyword">int</span> e[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], w[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>], root[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; freq_table;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-built_in">string</span> description;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">lchild</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">rchild</span>;</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">optimal_bst</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-built_in">string</span> *flower)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)&#123;<br>        e[i][i - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        w[i][i - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>; l &lt;= n; l++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - l + <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">int</span> j = i + l - <span class="hljs-number">1</span>;<br>            e[i][j] = <span class="hljs-number">999999</span>;<br>            w[i][j] = w[i][j - <span class="hljs-number">1</span>] + freq_table[flower[j - <span class="hljs-number">1</span>]];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r = i; r &lt;= j; r++)&#123;<br>                <span class="hljs-keyword">int</span> t = e[i][r - <span class="hljs-number">1</span>] + e[r + <span class="hljs-number">1</span>][j] + w[i][j];<br>                <span class="hljs-keyword">if</span>(t &lt; e[i][j])&#123;<br>                    e[i][j] = t;<br>                    root[i][j] = r;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function">node *<span class="hljs-title">build_bst</span><span class="hljs-params">(<span class="hljs-built_in">string</span> *flower, <span class="hljs-built_in">string</span> *description, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">rnode</span> = <span class="hljs-title">new</span> <span class="hljs-title">node</span>();</span><br>    rnode-&gt;name = flower[root[i][j] - <span class="hljs-number">1</span>];<br>    rnode-&gt;description = description[root[i][j] - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span>(i &gt;= j) <span class="hljs-keyword">return</span> rnode;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">lc</span> = <span class="hljs-title">build_bst</span>(<span class="hljs-title">flower</span>, <span class="hljs-title">description</span>, <span class="hljs-title">i</span>, <span class="hljs-title">root</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>] - 1);</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">rc</span> = <span class="hljs-title">build_bst</span>(<span class="hljs-title">flower</span>, <span class="hljs-title">description</span>, <span class="hljs-title">root</span>[<span class="hljs-title">i</span>][<span class="hljs-title">j</span>] + 1, <span class="hljs-title">j</span>);</span><br>    rnode-&gt;lchild = lc;<br>    rnode-&gt;rchild = rc;<br>    <span class="hljs-keyword">return</span> rnode;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">search</span><span class="hljs-params">(struct node *rnode,<span class="hljs-built_in">string</span> *name)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">cur</span> = <span class="hljs-title">rnode</span>;</span><br>    <span class="hljs-keyword">while</span> (cur)&#123;<br>        cnt++;<br>        <span class="hljs-keyword">if</span>((*name) == cur-&gt;name) <span class="hljs-keyword">return</span> cur-&gt;description;<br>        <span class="hljs-keyword">if</span> (cur-&gt;lchild &amp;&amp; ((*name) &lt; cur-&gt;name)) cur = cur-&gt;lchild;<br>        <span class="hljs-keyword">else</span> cur = cur-&gt;rchild;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> flower[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;paeoniaSA&quot;</span>, <span class="hljs-string">&quot;paeoniaLP&quot;</span>, <span class="hljs-string">&quot;camellia&quot;</span>, <span class="hljs-string">&quot;chrysanthemum&quot;</span>, <span class="hljs-string">&quot;plum&quot;</span>, <span class="hljs-string">&quot;orchid&quot;</span>,<br>                         <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;azalea&quot;</span>, <span class="hljs-string">&quot;tulip&quot;</span>, <span class="hljs-string">&quot;jasmine&quot;</span>, <span class="hljs-string">&quot;begonia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>,<br>                         <span class="hljs-string">&quot;gardenia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;carnation&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;gesang&quot;</span>&#125;;<br>    <span class="hljs-comment">//Simulate the description of flowers</span><br>    <span class="hljs-built_in">string</span> description[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;DpaeoniaSA&quot;</span>, <span class="hljs-string">&quot;DpaeoniaLP&quot;</span>, <span class="hljs-string">&quot;Dcamellia&quot;</span>, <span class="hljs-string">&quot;Dchrysanthemum&quot;</span>, <span class="hljs-string">&quot;Dplum&quot;</span>, <span class="hljs-string">&quot;Dorchid&quot;</span>,<br>                              <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dazalea&quot;</span>, <span class="hljs-string">&quot;Dtulip&quot;</span>, <span class="hljs-string">&quot;Djasmine&quot;</span>, <span class="hljs-string">&quot;Dbegonia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>,<br>                              <span class="hljs-string">&quot;Dgardenia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>, <span class="hljs-string">&quot;Dlily&quot;</span>, <span class="hljs-string">&quot;Dcarnation&quot;</span>, <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dgesang&quot;</span>&#125;;<br>    <span class="hljs-keyword">int</span> freq[<span class="hljs-number">18</span>] = &#123;<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        freq_table[flower[i]] = freq[i];<br>    &#125;<br>    sort(flower, flower + <span class="hljs-number">18</span>);<br>    sort(description, description + <span class="hljs-number">18</span>);<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">clock_t</span> start, stop;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        fin&gt;&gt;a[n];<br>        n++;<br>    &#125;<br>    n--;<br>    optimal_bst(<span class="hljs-number">18</span>, flower);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">troot</span> = <span class="hljs-title">build_bst</span>(<span class="hljs-title">flower</span>, <span class="hljs-title">description</span>, 1, 18);</span><br>    start = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">string</span> t = search(troot, &amp;a[i]);<br>        <span class="hljs-comment">//cout&lt;&lt;t&lt;&lt;&quot; &quot;;</span><br>    &#125;<br>    stop = clock();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total count: &quot;</span>&lt;&lt;cnt&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-string">&quot;s&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线性查找">线性查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> a[<span class="hljs-number">10000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> flower[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;paeoniaSA&quot;</span>, <span class="hljs-string">&quot;paeoniaLP&quot;</span>, <span class="hljs-string">&quot;camellia&quot;</span>, <span class="hljs-string">&quot;chrysanthemum&quot;</span>, <span class="hljs-string">&quot;plum&quot;</span>, <span class="hljs-string">&quot;orchid&quot;</span>,<br>                         <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;azalea&quot;</span>, <span class="hljs-string">&quot;tulip&quot;</span>, <span class="hljs-string">&quot;jasmine&quot;</span>, <span class="hljs-string">&quot;begonia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>,<br>                         <span class="hljs-string">&quot;gardenia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;carnation&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;gesang&quot;</span>&#125;;<br>    <span class="hljs-comment">//Simulate the description of flowers</span><br>    <span class="hljs-built_in">string</span> description[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;DpaeoniaSA&quot;</span>, <span class="hljs-string">&quot;DpaeoniaLP&quot;</span>, <span class="hljs-string">&quot;Dcamellia&quot;</span>, <span class="hljs-string">&quot;Dchrysanthemum&quot;</span>, <span class="hljs-string">&quot;Dplum&quot;</span>, <span class="hljs-string">&quot;Dorchid&quot;</span>,<br>                              <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dazalea&quot;</span>, <span class="hljs-string">&quot;Dtulip&quot;</span>, <span class="hljs-string">&quot;Djasmine&quot;</span>, <span class="hljs-string">&quot;Dbegonia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>,<br>                              <span class="hljs-string">&quot;Dgardenia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>, <span class="hljs-string">&quot;Dlily&quot;</span>, <span class="hljs-string">&quot;Dcarnation&quot;</span>, <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dgesang&quot;</span>&#125;;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">clock_t</span> start, stop;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        fin&gt;&gt;a[n];<br>        n++;<br>    &#125;<br>    n--;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    start = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">18</span>; j++) &#123;<br>            cnt++;<br>            <span class="hljs-keyword">if</span> (a[i] == flower[j]) &#123;<br>                <span class="hljs-built_in">string</span> t = description[j];<br>                <span class="hljs-comment">//cout &lt;&lt; t &lt;&lt; &quot; &quot;;</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    stop = clock();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total count: &quot;</span>&lt;&lt;cnt&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-string">&quot;s&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="哈希表">哈希表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">string</span> a[<span class="hljs-number">10000005</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">string</span> flower[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;paeoniaSA&quot;</span>, <span class="hljs-string">&quot;paeoniaLP&quot;</span>, <span class="hljs-string">&quot;camellia&quot;</span>, <span class="hljs-string">&quot;chrysanthemum&quot;</span>, <span class="hljs-string">&quot;plum&quot;</span>, <span class="hljs-string">&quot;orchid&quot;</span>,<br>                         <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;azalea&quot;</span>, <span class="hljs-string">&quot;tulip&quot;</span>, <span class="hljs-string">&quot;jasmine&quot;</span>, <span class="hljs-string">&quot;begonia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>,<br>                         <span class="hljs-string">&quot;gardenia&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>, <span class="hljs-string">&quot;lily&quot;</span>, <span class="hljs-string">&quot;carnation&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>, <span class="hljs-string">&quot;gesang&quot;</span>&#125;;<br>    <span class="hljs-comment">//Simulate the description of flowers</span><br>    <span class="hljs-built_in">string</span> description[<span class="hljs-number">18</span>] = &#123;<span class="hljs-string">&quot;DpaeoniaSA&quot;</span>, <span class="hljs-string">&quot;DpaeoniaLP&quot;</span>, <span class="hljs-string">&quot;Dcamellia&quot;</span>, <span class="hljs-string">&quot;Dchrysanthemum&quot;</span>, <span class="hljs-string">&quot;Dplum&quot;</span>, <span class="hljs-string">&quot;Dorchid&quot;</span>,<br>                              <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dazalea&quot;</span>, <span class="hljs-string">&quot;Dtulip&quot;</span>, <span class="hljs-string">&quot;Djasmine&quot;</span>, <span class="hljs-string">&quot;Dbegonia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>,<br>                              <span class="hljs-string">&quot;Dgardenia&quot;</span>, <span class="hljs-string">&quot;Dlotus&quot;</span>, <span class="hljs-string">&quot;Dlily&quot;</span>, <span class="hljs-string">&quot;Dcarnation&quot;</span>, <span class="hljs-string">&quot;Drose&quot;</span>, <span class="hljs-string">&quot;Dgesang&quot;</span>&#125;;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt; flower_map;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">18</span>; i++)&#123;<br>        flower_map[flower[i]] = description[i];<br>    &#125;<br>    <span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;data.txt&quot;</span>)</span></span>;<br>    <span class="hljs-keyword">clock_t</span> start, stop;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!fin.eof())&#123;<br>        fin&gt;&gt;a[n];<br>        n++;<br>    &#125;<br>    n--;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br>    start = clock();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        cnt++;<br>        <span class="hljs-built_in">string</span> t = flower_map[a[i]];<br>        <span class="hljs-comment">//cout&lt;&lt;t&lt;&lt;&quot; &quot;;</span><br>    &#125;<br>    stop = clock();<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total count: &quot;</span>&lt;&lt;cnt&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Total time: &quot;</span>&lt;&lt;(<span class="hljs-keyword">double</span>)(stop - start) / CLOCKS_PER_SEC&lt;&lt;<span class="hljs-string">&quot;s&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行效率">运行效率</h2><p>时间记录使用了C++自带的clock()函数，通过在程序开头和结尾分别调用clock()函数并将两值相减，即可得到程序运行时间。结果如下：</p><figure><img src="1.png" alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><figure><img src="2.png" alt="2" /><figcaption aria-hidden="true">2</figcaption></figure><h2 id="总结">总结</h2><p>由于每种鲜花被查询的频率不同，为了测试各算法的运行效率，实验中首先根据不同鲜花的查询频率生成了一串不同规模的查询序列，通过比较查询序列所花费的总时间来比较各算法的运行效率。</p><p>从实验中可以发现，通过构建哈希表来查询鲜花信息的运行效率最高，且随着数据规模的增大优势越发明显，这与哈希表 <span class="math display">\[\mathcal{O}(1)\]</span> 的理论查询时间相符。然而，实验中通过构建最优二叉搜索树进行查询的运行效率不如线性访问的运行效率，这与理论分析不符。通过进一步记录两种算法的查询次数发现在最优二叉搜索树上查询的次数的确小于线性访问的查询次数。由于实验中最优二叉搜索树的每个结点均申请在了堆上，而线性访问时所用数组申请在了栈上，故推测是堆的访问效率不如栈的访问效率导致了其运行效率不如线性访问。</p><p>由此可见，在鲜花信息查询问题上，构建哈希表查询是一个最为高效且可行的算法。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;有一个公司想开发一个关于花卉的百科全书，用户只要输入花卉的名称，就能够输出花卉的详细信息。花卉包括：牡丹、芍药、茶花、菊花、梅花、兰花、月季、杜鹃花、郁金香、茉莉花、海棠、荷花、栀子花、莲花、百合、康乃馨、玫瑰、格桑花。公司也在试运行阶段发现这些花的访问频率不一，有些花经常性被访问，有些被访问的次数就少很多了。这18种花中，第1种的访问频率是6，第2-3种的访问频率是5，第4-6种的访问频率是4，第7-10种的访问频率是3，第11-15种的访问频率是2，第16-18种的访问频率是1。&lt;/p&gt;
&lt;p&gt;这个公司想提升花卉检索效率，所以对比了三种方法。&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;构建优化的二叉搜索树（optimal BST），进行搜索。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将这些花卉按照访问频度从高到低放在一个数组中，并顺序访问来检索&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建哈希表来存储这些数据，并基于哈希表来检索数据。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请实现这三种方法，并且通过实验来比较这三种方法的优劣。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://gonggongjohn.me/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Algorithm" scheme="http://gonggongjohn.me/tags/Algorithm/"/>
    
  </entry>
  
</feed>
