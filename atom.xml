<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GONGGONGJOHN&#39;s Blog</title>
  
  
  <link href="http://gonggongjohn.me/atom.xml" rel="self"/>
  
  <link href="http://gonggongjohn.me/"/>
  <updated>2022-07-18T09:33:17.236Z</updated>
  <id>http://gonggongjohn.me/</id>
  
  <author>
    <name>GONGGONGJOHN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>当代人工智能项目一 文本分类</title>
    <link href="http://gonggongjohn.me/2022/03/16/contemporary-ai/contemporary-ai-exp-1/"/>
    <id>http://gonggongjohn.me/2022/03/16/contemporary-ai/contemporary-ai-exp-1/</id>
    <published>2022-03-16T02:00:00.000Z</published>
    <updated>2022-07-18T09:33:17.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>文本分类是自然语言处理领域中一项十分基本的任务，其在多个领域都有着广泛的应用。在本文中，我们实现了基于 XLNet 预训练语言模型的文本分类模型，并使用微调(Fine-Tuning)的方法对给定数据集进行了文 本分类。通过对验证集的分类效果评估比较，我们得到了适用于当前数据集上最佳的模型超参数组合。随后，我们将模型与其他几种经典文本分类模型(支持向量机、MLP、TextCNN、Bert)的分类效果进行了比较，进一步验证了预训练语言模型和网络构架对文本分类效果的巨大影响。</p><p><strong>关键字：文本分类，支持向量机，多层感知机，TextCNN，Bert，XLNet</strong></p><h2 id="项目介绍">项目介绍</h2><h3 id="任务介绍">任务介绍</h3><p>在本项目中，我们需要实现一种机器学习模型，实现对文本的多分类任务。具体来说，给定一组文本集 <span class="math inline">\(\mathcal{D} = \{\boldsymbol{x}_1, \boldsymbol{x}_2, \cdots, \boldsymbol{x}_n \}\)</span> 和类别集 <span class="math inline">\(\mathcal{C} = \{c_1, c_2, \cdots, c_k \}\)</span>，我们需要让机器学习出一种映射 <span class="math inline">\(f: \mathcal{D} \to \mathcal{C}\)</span>，使得对于任意 <span class="math inline">\(\boldsymbol{x} \in \mathcal{C}\)</span>，存在一个 <span class="math inline">\(c \in \mathcal{C}\)</span>，使得 <span class="math inline">\(f(\boldsymbol{x}) = c\)</span>。</p><h3 id="数据集介绍">数据集介绍</h3><p>本实验的数据集共分为训练集和测试集两个部分。其中训练集包含了8000条各类别的带标签文本，测试集包含了2000条待预测的不含标签文本。训练集中各类别文本的词云如下图所示。通过词云我们可以大致推断出每个类别的主题，例如Class 0的主题可能为<strong>电视剧/电影</strong>，Class 1的主题可能为<strong>手机应用</strong>，Class 2的主题可能为<strong>汽车相关产品</strong>。这为我们后续的分类结果提供了一个人工的验证标准。</p><figure><img src="dataset_wordcloud.png" alt="dataset_wordcloud" /><figcaption aria-hidden="true">dataset_wordcloud</figcaption></figure><h2 id="基准模型">基准模型</h2><p>为了评估目标模型的文本分类效果，我们首先需要一组<strong>基准模型（Baseline Model）</strong>。在本实验中，我们使用了支持向量机、多层感知机、TextCNN以及Bert四种模型作为基准模型。</p><h3 id="支持向量机">支持向量机</h3><p><strong>支持向量机（Support Vector Machine）</strong>是一个经典的机器学习分类器，其通过计算最优分隔超平面来对向量空间中线性可分的点进行分类。通过使用<strong>核技巧（Kernel Trick）</strong>，其还可以进一步分隔线性不可分的数据集并取得不错的效果。</p><p>由于支持向量机仅作用于向量空间，要使得其能够对文本进行分类，我们就需要先对文本进行<strong>嵌入（Embedding）</strong>操作，使其能够在向量空间中表示。一个最朴素的方法便是使用<strong>计数方法</strong>，将词典中每个词在每句话中出现的次数作为句子的表示向量。然而，这样做并不能利用词和词之间的分布特征信息，因此分类效果并不好。一个更为合适的方法是使用所谓的<strong>TF-IDF嵌入法</strong>。</p><p>对于一个文本数据集，词项 <span class="math inline">\(t\)</span> 在文档 <span class="math inline">\(d\)</span> 中的TF-IDF值被定义为 <span class="math display">\[TF-IDF(t, d) = TF(t, d) \times IDF(t)\]</span> 其中 <span class="math inline">\(TF(t, d)\)</span> 为词项 <span class="math inline">\(t\)</span> 在文档 <span class="math inline">\(d\)</span> 中的<strong>词频（Term Frequency）</strong>，<span class="math inline">\(IDF(t)\)</span> 为词项 <span class="math inline">\(t\)</span> 在整个数据集中的<strong>逆文档频率（Inverse Document Frequency）</strong>。由于测试集中可能出现训练集中不存在的词项，我们对 <span class="math inline">\(IDF\)</span> 引入<strong>拉普拉斯平滑（Laplace Smoothing）</strong>来给这些不存在的词项一个默认的TF-IDF值，此时的 <span class="math inline">\(IDF\)</span> 计算公式可以写为 <span class="math display">\[IDF(t) = \log \frac{1 + n}{1 + DF(t)} + 1\]</span> 其中 <span class="math inline">\(n\)</span> 为文档个数，<span class="math inline">\(DF(t)\)</span> 为词项 <span class="math inline">\(t\)</span> 在数据集中出现的文档数。我们只要对句子中所有的词计算其在数据集中的TF-IDF值，即可得到该句子的TF-IDF向量表示。</p><p>在本实验中，我们使用了机器学习包<strong>Scikit-Learn</strong>提供的<strong>SVC（SVM Classifier）</strong>类实现了文本分类模型。对于核技巧，我们使用了<strong>高斯核（Gaussian Kernel）</strong>作为核函数，也即 <span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) =  = \exp \left( - \gamma || \boldsymbol{x} - \boldsymbol{y} ||^2 \right)\]</span> 该核函数被广泛地用于向量空间的特征分离任务中并通过能取得不错的效果。通常情况下，我们需要使用<strong>网格搜索（Grid Search）</strong>的方法来确定核函数中的超参数 <span class="math inline">\(\gamma\)</span>，然而当我们无法确定合理的参数范围时，搜索空间可能会变得十分庞大。由于从直观上看，高斯核中的参数 <span class="math inline">\(\gamma\)</span> 表征了数据集在向量空间中的分散程度，因此一个更为合理的方法便是使用数据集本身的方差来决定该超参数，也即 <span class="math display">\[\gamma = \frac{1}{n_{feature} \cdot Var(\boldsymbol{X})}\]</span> 其中 <span class="math inline">\(n_{feature}\)</span> 为数据集的特征维度，<span class="math inline">\(Var(\boldsymbol{X})\)</span> 为数据集的方差。这也是我们的实现中所使用的超参数决定方法。</p><h3 id="多层感知机">多层感知机</h3><p><strong>多层感知机（Multilayer Perceptron）</strong>又称为<strong>前向全连接神经网络（Feedforward Fully-Connected Neural Network）</strong>，是一种经典的深度学习网络构架。通过多个隐藏层对输入数据中不同粒度特征的提取，其就可以实现对数据的分类。感知机由一个个神经元构成，其单个神经元结构如下图所示。</p><figure><img src="fcnn_neuron.png" alt="fcnn_neuron" /><figcaption aria-hidden="true">fcnn_neuron</figcaption></figure><p>将多个神经元一层层地连接起来，便构成了多层感知机。对于当前数据集和任务，我们设计的神经网络结构如下图所示。对于输入层，我们同样使用上述SVM模型中提到的TF-IDF嵌入法得到句子的向量表示。经过统计，训练集中不同的词项个数共有 <span class="math inline">\(29999\)</span>个，因此我们将输入层的神经元个数设置为 <span class="math inline">\(29999\)</span>。随后，我们使用两层隐藏层结构来增加网络的非线性拟合能力，其神经元个数分别为 <span class="math inline">\(64\)</span> 和 <span class="math inline">\(32\)</span> 。最后，由于我们有 <span class="math inline">\(10\)</span> 个文本类别，因此输出神经元个数设置为 <span class="math inline">\(10\)</span>。</p><figure><img src="fcnn_structure.png" alt="fcnn_structure" /><figcaption aria-hidden="true">fcnn_structure</figcaption></figure><p>我们选择了<strong>ReLU（Rectified Linear Unit）</strong>作为当前网络的隐藏层激活函数。对于最后的分类结果，我们使用<strong>Softmax</strong>函数将其放缩为 <span class="math inline">\((0,1)\)</span> 之间的概率值，其定义如下： <span class="math display">\[\textrm{Softmax}(\boldsymbol{x}_i, \{\boldsymbol{x}_1, \cdots, \boldsymbol{x}_n \}) = \frac{e^{\boldsymbol{x}_i}}{\sum_{j = 1}^n e^{\boldsymbol{x}_j}}\]</span> 相应的，我们选择了<strong>交叉熵损失（CrossEntropyLoss）</strong>作为当前任务的损失函数，其定义为 <span class="math display">\[\mathcal{H}(\boldsymbol{y}^{pred}, \boldsymbol{y}^{true}) = - \sum_{i = 1}^n y^{true}_i \log y^{pred}_i\]</span> 。</p><p>神经网络通常使用<strong>反向传播（Backward Propagation）</strong>算法来对网络进行训练，其具体细节在此不再赘述。我们选择了<strong>AdamW</strong>优化器作为当前网络的优化器。AdamW作为Adam优化器的改进版本，相比<strong>随机梯度下降（Stochastic Gradient Descent）</strong>算法能够自适应地调整梯度下降的速率，并能够从一定程度上对抗网络落入<strong>局部最低点（Local Minima）</strong>的情况发生。而相比Adam，AdamW通过一种改进的实现方法解决了其正则化难以收敛的问题，使得网络参数能够更快地收敛到预期的位置。在超参数的设置上，我们通过网格搜索的方式对<strong>学习率（Learning Rate）</strong>进行了搜索，并最终确定学习率 <span class="math inline">\(lr = 0.01\)</span>。对于迭代次数，我们发现当网络迭代10次后 网络的损失不再出现明显的下降，因此我们设置迭代次数 <span class="math inline">\(epoch=10\)</span>。</p><h3 id="textcnn">TextCNN</h3><p>受到Word2Vec等词嵌入方法和图像处理任务中卷积方法的启发，Yoon Kim等人于2014年提出了用于文本分类的<strong>TextCNN</strong>方法。TextCNN方法本质上是一个<strong>N-Gram</strong>语言模型，这一方法将句子的词向量嵌入矩阵视为一个一维的<strong>特征图</strong>，通过使用多个不同大小的<strong>一维卷积核</strong>在词向量矩阵上做滑动，就可以获得句子中不同粒度上的语言特征。</p><figure><img src="textcnn_illustrate.png" alt="textcnn_illustrate" /><figcaption aria-hidden="true">textcnn_illustrate</figcaption></figure><p>通常来说，TextCNN由<strong>嵌入层（Embedding Layer）</strong>、<strong>卷积层（Convolutional Layer）</strong>、<strong>池化层（Max-Pooling Layer）</strong>和<strong>全连接层（Fully-Connected Layer）</strong>组成，其中所有的权重参数都会从数据集中学习得到。然而，由于当前任务中数据集规模并不大，网络可能会出现难以收敛或过拟合的问题。受到图像处理任务中<strong>迁移学习（Transfer Learning）</strong>方法的启发，我们使用一个经过预训练的词嵌入词典来直接作为嵌入层的输出，这样网络在初始化时，每个词的语义关系就能够被明确，网络也能够快速找出合适的分类特征。在当前项目中，我们使用了经过无监督预训练的<strong>GloVe</strong>通用词向量词典来对文本进行词嵌入。该词典使用<strong>Common Crawl</strong>数据集进行无监督训练，共包含了190万个词项，嵌入维度为300维，具有足够的通用性和较为合适的特征大小。</p><p>对于网络构架，我们参考了Ye Zhang等人的结果，使用了大小分别为<strong>2、3、4</strong>的卷积核，每种卷积核各有<strong>16</strong>个。随后，我们使用和多层感知机相同的<strong>ReLU</strong>作为激活函数，并通过池化核大小为 <span class="math inline">\(l_{sentence} - l_{kernel} + 1\)</span> 的池化层将其每个特征特征压缩至1个神经元内（其中 <span class="math inline">\(l_{sentence}\)</span> 为句子长度，<span class="math inline">\(l_{kernel}\)</span> 为卷积核大小）。最后，通过将这些特征神经元进行拼接并通过一层全连接层，网络即可输出文本的分类概率结果。</p><p>为了保证基准模型的公平性，我们将损失函数及优化器设置与上文中的多层感知机保持一致。对于迭代次数，我们发现当网络迭代20次后损失不再出现明显的下降，因此我们设置迭代次数 <span class="math inline">\(epoch=20\)</span>。</p><h3 id="bert">Bert</h3><p>随着<strong>语言模型（Language Model）</strong>和<strong>Transformer</strong>架构的提出，<strong>预训练（Pretrain）</strong>+<strong>微调（Finetune）</strong>方法逐渐成为了自然语言处理任务中的主流。其中最为经典的就是Google于2018年提出的<strong>Bert（Bidirectional Encoder Representation from Transformers）</strong>模型。</p><p>Bert模型是一个<strong>自编码语言模型（Autoencoder Language Model）</strong>，其网络构架如下图所示。Bert的主体由多个Transformer结构组成，网络首先接受一串由<strong>词项</strong>和<strong>特殊标识符（CLS、SEP）</strong>经过嵌入得到的句子向量，并使用Transformer构架计算句子的语言特征，得到一串同等长度的语言特征向量。通过将网络的输出与下游的网络结构相连接，我们就可以使用Bert模型进行各种自然语言处理任务。对于当前文本分类任务，我们只需要使用网络输出中的第一项（即CLS标识符的特征表示），并将其连接至一个全连接层即可得到文本的概率分类结果。</p><figure><img src="bert_classify.png" alt="bert_classify" /><figcaption aria-hidden="true">bert_classify</figcaption></figure><p>我们使用了Google提供的<strong>bert-base-uncased</strong>预训练模型作为网络构架及初始化参数，这一构架包含<strong>12</strong>个Transformer模块，每个Transformer模块中包含<strong>12</strong>个自注意力头以及一个维度为<strong>768</strong>的全连接层（共110万网络参数），并同样使用了AdamW作为网络的优化器。由于微调训练通常具有较小的网络梯度，我们将学习率设置为了 <span class="math inline">\(lr=5e-5\)</span>。</p><h2 id="xlnet文本分类器">XLNet文本分类器</h2><p>XLNet是Google于2019年提出的一种对Bert的改进模型。通过融合GPT中使用的<strong>自回归语言模型（Autoregressive Language Model）</strong>和Bert中使用的自编码语言模型并引入更多的构架改进，XLNet在许多下游任务中都获得了十分出色的表现，也是我们在当前实验中最终使用的文本分类模型。</p><h3 id="模型构架">模型构架</h3><p>XLNet的整体模型构架与Bert模型类似，其都由多组Transformer模块组成。然而，XLNet在进行预训练时的逻辑和Bert有很大的不同，其使用的自回归语言模型相比Bert可以解决其预训练/微调时的数据分布不一致的问题。而通过引入<strong>轮换语言模型（Permutation Language Modeling）</strong>，XLNet就能够在自回归语言模型中保留Bert中的双向语义视野的能力。为了在网络结构中实现这一点，XLNet在实现自注意力层时也使用了不同的方法，其基本构架如下图所示。可以看到，在实际实现过程中，XLNet并没有真正的对文本进行轮换，而是使用了<strong>掩盖（Masking）</strong>的方法来使得网络在预训练时无法得到目标词项的词义信息。</p><figure><img src="xlnet_architecture.png" alt="xlnet_architecture" /><figcaption aria-hidden="true">xlnet_architecture</figcaption></figure><h3 id="模型实现">模型实现</h3><p>由于该模型的实现细节较多且不是本文的重点，我们直接使用了<strong>HuggingFace</strong>提供的<strong>transformers</strong>工具包中所实现的XLNet模型。对于网络构架和参数，我们使用了HuggingFace提供的<strong>xlnet-large-cased</strong>进行初始化。相比<strong>xlnet-base-cased</strong>以及Bert的同级别模型，XLNet Large网络使用了更多的数据进行预训练，使得网络的语言特征捕捉能力得到了进一步的提升，其更大的网络结构（340万网络参数）也保证了网络足够的泛化能力，使得其不会出现过拟合的情况。</p><p>与使用Pytorch训练其他模型时一致，我们需要定义一个<strong>数据集对象（Dataset）</strong>来作为训练及测试时的数据源。在数据集初始化中，我们首先使用封装好的<strong>XLNetTokenizer</strong>对象对文本进行词条化及文本嵌入。通过对数据集的检查，我们发现当前数据集中文本的最大长度约为<strong>257</strong>个词项，因此我们将文本<strong>截断/补全长度</strong>设置为了<strong>256</strong>，这也作为了网络的输入尺寸。随后，通过覆写相应的数据集方法，我们就能得到一个可用的文本数据集对象。具体代码片段如下：<strong>（utils.py）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, XLNetTokenizer<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TextDatasetForTrainer</span>(<span class="hljs-params">Dataset</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, source_df, model_type</span>):</span><br>        self.model_type = model_type<br>        <span class="hljs-keyword">if</span> model_type == <span class="hljs-string">&#x27;bert&#x27;</span>:<br>            self.tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> model_type == <span class="hljs-string">&#x27;xlnet&#x27;</span>:<br>            self.tokenizer = XLNetTokenizer.from_pretrained(<span class="hljs-string">&#x27;xlnet-large-cased&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;label&#x27;</span> <span class="hljs-keyword">in</span> source_df:<br>            self.mode = <span class="hljs-string">&#x27;paired&#x27;</span><br>            self.labels = [label <span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> source_df[<span class="hljs-string">&#x27;label&#x27;</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            self.mode = <span class="hljs-string">&#x27;unpaired&#x27;</span><br>        self.texts = [self.tokenizer(text, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>, max_length=<span class="hljs-number">256</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br>                      <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> source_df[<span class="hljs-string">&#x27;text&#x27;</span>]]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> len(self.texts)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, index</span>):</span><br>        item_dict = self.texts[index]<br>        <span class="hljs-keyword">if</span> self.model_type == <span class="hljs-string">&#x27;xlnet&#x27;</span> <span class="hljs-keyword">or</span> self.model_type == <span class="hljs-string">&#x27;bert&#x27;</span>:<br>            item_dict[<span class="hljs-string">&#x27;attention_mask&#x27;</span>] = item_dict[<span class="hljs-string">&#x27;attention_mask&#x27;</span>].squeeze(<span class="hljs-number">0</span>)<br>            item_dict[<span class="hljs-string">&#x27;input_ids&#x27;</span>] = item_dict[<span class="hljs-string">&#x27;input_ids&#x27;</span>].squeeze(<span class="hljs-number">0</span>)<br>            item_dict[<span class="hljs-string">&#x27;token_type_ids&#x27;</span>] = item_dict[<span class="hljs-string">&#x27;token_type_ids&#x27;</span>].squeeze(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> self.mode == <span class="hljs-string">&#x27;paired&#x27;</span>:<br>            item_dict[<span class="hljs-string">&#x27;labels&#x27;</span>] = torch.tensor(self.labels[index])<br>        <span class="hljs-keyword">return</span> item_dict<br></code></pre></td></tr></table></figure><p>transformers包中提供了一组统一的模型训练调度器，我们可以直接通过创建训练器对象并传入相关参数来对模型进行训练。在<strong>TrainingArguments</strong>对象中，我们可以定义网络训练时的各种属性及网络、优化器的各种超参数。我们只需要将配置好的TrainingArguments对象传递给<strong>Trainer</strong>对象，即可开始对网络进行训练、评估和预测操作。相关代码片段如下：<strong>（xlnet_train.py）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer, TrainingArguments<br><br>train_args = TrainingArguments(<br>    output_dir=<span class="hljs-string">&#x27;output&#x27;</span>,<br>    evaluation_strategy=<span class="hljs-string">&#x27;epoch&#x27;</span>,<br>    save_strategy=<span class="hljs-string">&#x27;no&#x27;</span>,<br>    eval_steps=<span class="hljs-number">50</span>,<br>    per_device_train_batch_size=batch_size,<br>    per_device_eval_batch_size=batch_size,<br>    gradient_accumulation_steps=<span class="hljs-number">1</span>,<br>    num_train_epochs=epoch,<br>    seed=<span class="hljs-number">0</span>,<br>    logging_strategy=<span class="hljs-string">&#x27;step&#x27;</span>,<br>    logging_steps=<span class="hljs-number">64</span>,<br>    <span class="hljs-comment"># Other parameters to set</span><br>)<br>trainer = Trainer(<br>    model=model,<br>    args=train_args,<br>    train_dataset=train_dataset,<br>    eval_dataset=val_dataset,<br>    compute_metrics=compute_metrics<br>)<br>trainer.train()<br></code></pre></td></tr></table></figure><h3 id="超参调优">超参调优</h3><h4 id="batch-size">Batch Size</h4><p>首先我们来确定训练时的Batch Size。在使用随机梯度下降类算法对网络进行优化时，Batch Size往往决定了网络的<strong>收敛速度</strong>及<strong>泛化能力</strong>，过小的Batch Size可能导致网络难以收敛（Loss波动剧烈），而过大的Batch Size可能导致网络落入<strong>Sharp Minima</strong>，使其泛化能力降低（Loss无法降低）。在当前数据集上，不同Batch Size在训练时的Loss变化及在验证集上的正确率表现如下图所示。我们发现，当 <span class="math inline">\(Batch Size &gt; 16\)</span> 时，Training Loss就可以表现的较为稳定；而在相同的迭代次数下，<span class="math inline">\(Batch Size = 64\)</span> 时网络获得了最好的Training Loss表现。</p><figure><img src="batchsize_loss_acc.png" alt="batchsize_loss_acc" /><figcaption aria-hidden="true">batchsize_loss_acc</figcaption></figure><p>可以发现，由于XLNet模型本身的语言特征捕捉能力及预训练的存在，Batch Size本身对网络的表现影响并不明显。然而在实际应用场景下中，我们还需要考虑训练模型时的资源消耗情况。在使用了<strong>梯度累计（Gradient Accumulation）</strong>技巧时，显存占用随Batch Size的增长情况如下图所示。随着Batch Size的增长，训练XLNet时的显存占用急剧增长，在Batch Size=128时显存占用甚至达到了近50GB，这一资源消耗代价在平日的应用场景下显然是难以接受的。</p><figure><img src="gpu_mem.png" alt="gpu_mem" /><figcaption aria-hidden="true">gpu_mem</figcaption></figure><p>综合上面两种因素考虑，我们将训练时的Batch Size确定为<strong>64</strong>（或<strong>Batch Size=32 + Gradient Accumulation=2</strong>）。</p><h4 id="学习率">学习率</h4><p>由于我们使用了AdamW作为网络的优化器，因此每个参数的<strong>学习率（Learning Rate）</strong>会随着梯度的变化而不断发生变化。尽管如此，我们仍然需要决定一个整体学习率以确定各个参数学习率的变化尺度（由于后文所要介绍的学习率调度器的存在，这一学习率实际上为一个初始化学习率）。在当前数据集上，训练时的Loss随学习率的变化情况如下图所示（使用相同的学习率调度器）。可以看到，当学习率过大时，Loss的变化幅度巨大且难以收敛，而当学习率过小时，尽管Loss能够很快达到一个较低的水平，但由于每次优化幅度过小，使得其最终也难以收敛到一个较为合适的水平。</p><figure><img src="loss_lr.png" alt="loss_lr" /><figcaption aria-hidden="true">loss_lr</figcaption></figure><p>根据实验结果，最终我们将学习率设定为了<strong>5e-5</strong>。</p><h4 id="学习率调度器">学习率调度器</h4><p>在训练较为庞大的神经网络模型时，我们通常会在训练的不同阶段赋予优化器不同的基准学习率，这就需要一个较为合适的<strong>学习率调度器（Learning Rate Scheduler）</strong>。常用的学习率调度器包含恒定调度器、线性调度器、指数调度器、阶梯形调度器等，其对于学习率的影响如下图所示。可以看到，优化器的学习率在不同学习率调度器的控制下所表现出的变化情况呈现出不同的特征。</p><figure><img src="scheduler_lr.png" alt="scheduler_lr" /><figcaption aria-hidden="true">scheduler_lr</figcaption></figure><p>在实际的实验过程中，由于AdamW优化器本身的特性，学习率调度器对训练时Loss的变化影响及模型在验证集上的预测正确率并没有显著的影响。最终我们使用<strong>线形（Linear）调度器</strong>作为训练过程中的学习率调度器。</p><h4 id="迭代次数">迭代次数</h4><p>最后我们来确定训练时的<strong>迭代次数（Iterations）</strong>。通常来说，对于预训练语言模型的微调任务，我们会使用一个较小的迭代次数以防止其过拟合。在当前数据集上，训练时的Loss及模型在验证集上的分类正确率表现如下图所示。可以发现，当 <span class="math inline">\(epoch&lt;4\)</span> 时，网络在验证集上的正确率表现快速提升，而当 <span class="math inline">\(epoch &gt; 4\)</span>时，其正确率表现不再出现明显的提升，甚至开始出现下降。</p><figure><img src="epoch_loss_acc.png" alt="epoch_loss_acc" /><figcaption aria-hidden="true">epoch_loss_acc</figcaption></figure><p>因此，我们将训练时的迭代次数设定为<strong>4</strong>。</p><h2 id="交叉验证">交叉验证</h2><p>在验证机器学习模型时，模型的表现有很大一部分来自于数据集本身。若使用常规的方法固定的划分训练集和验证集，则可能会造成模型的表现带有<strong>偏向性（Bias）</strong>。因此，我们通常会使用<strong>交叉验证（Cross Validation）</strong>的方式来验证模型的性能。</p><p>交叉验证通常有两种方法。一种被称为<strong>留一法（Leave-one-out Cross Validation）</strong>，这种方法的问题在于每次验证集只有一个数据，若数据集规模很大，则需要循环迭代大量的次数。一个更常用的方法被称为<strong>K-折交叉验证（K-Fold Cross Validation）</strong>，其流程如下图所示（Figure ）。具体来说，我们将所有数据集分成K份，每次取其中一份作为验证集，其他的作为训练数据，依次对模型进行训练和测试，得到 <span class="math inline">\(K\)</span> 个验证集上的评价指标。</p><figure><img src="cross_val.png" alt="cross_val" /><figcaption aria-hidden="true">cross_val</figcaption></figure><p>随后，我们使用取平均值的方式得到最终的模型评价指标 <span class="math display">\[Score = \frac{1}{K} \sum_{i = 1}^K Score_i\]</span></p><p>Scikit-Learn提供了一个K-折交叉验证的数据集索引生成器，我们可以直接利用其来完成这一工作。这里我们选择 <span class="math inline">\(K = 5\)</span>。具体实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> KFold<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>kf = KFold(n_splits=<span class="hljs-number">5</span>, shuffle=<span class="hljs-literal">True</span>)<br>accuracy_list, precision_list, recall_list, f1_list = [], [], [], []<br>fold_cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> train_index, test_index <span class="hljs-keyword">in</span> kf.split(data_df):<br>    fold_cnt += <span class="hljs-number">1</span><br>    train_df = data_df.iloc[train_index]<br>    val_df = data_df.iloc[test_index]<br>    <span class="hljs-comment"># Irrelevant codes</span><br>    accuracy_list.append(eval_metrics[<span class="hljs-string">&#x27;eval_accuracy&#x27;</span>])<br>    precision_list.append(eval_metrics[<span class="hljs-string">&#x27;eval_precision&#x27;</span>])<br>    recall_list.append(eval_metrics[<span class="hljs-string">&#x27;eval_recall&#x27;</span>])<br>    f1_list.append(eval_metrics[<span class="hljs-string">&#x27;eval_f1&#x27;</span>])<br>accuracy_cross = np.array(accuracy_list).mean()<br>precision_cross = np.array(precision_list).mean()<br>recall_cross = np.array(recall_list).mean()<br>f1_cross = np.array(f1_list).mean()<br>print(<span class="hljs-string">&#x27;Average: Validation Accuracy: &#123;0&#125;, Precision: &#123;1&#125;, Recall: &#123;2&#125;, F1: &#123;3&#125;&#x27;</span>.format(accuracy_cross, precision_cross, recall_cross, f1_cross))<br></code></pre></td></tr></table></figure><h2 id="效果对比">效果对比</h2><p>我们使用<strong>Scikit-Learn</strong>及<strong>Pytorch</strong>工具包实现了本文中提到的各个模型，并使用上述的5折交叉验证方法对模型的分类效果进行了评估<strong>（具体代码请参考随附的README.md说明文档）</strong>。各个模型在训练集上的5折交叉验证结果如下表所示。可以看出，经过超参调优的XLNet模型在各个指标上均取得了所有模型中最好的分类表现，Bert和多层感知机模型的表现紧随其后，而传统的SVM分类器和TextCNN模型的表现则较为落后。</p><figure><img src="evaluation_score.png" alt="evaluation_score" /><figcaption aria-hidden="true">evaluation_score</figcaption></figure><p>进一步的，各个模型在各折验证结果中的正确率变化如下图所示。可以看出，基于传统机器学习和通用深度学习方法的分类模型在验证集上的正确率波动较大，而基于预训练+微调的语言模型分类方法则有着较好的稳定性。</p><figure><img src="models_acc_fold.png" alt="models_acc_fold" /><figcaption aria-hidden="true">models_acc_fold</figcaption></figure><p>最后，我们使用所有模型中效果最好的经过调优的XLNet模型对目标测试集进行了文本类别预测，其结果可见随附的<strong>test_output.txt</strong>文件。</p><h2 id="总结">总结</h2><p>在本实验中，我们实现了基于XLNet语言模型的文本分类器，并对其各个超参数进行了调优使其在验证集上得到较好的效果。随后，我们将其与其他几种经典文本分类模型的分类效果进行了对比，探索了几种不同的文本分类模型的特征及其在目标数据集上的表现。最后，我们使用训练完成的文本分类模型对目标测试集进行了标签预测，达到了预期的实验要求。</p><h2 id="references">References</h2><ol type="1"><li>Bernhard E. Boser, Isabelle M. Guyon, and Vladimir N. Vapnik. A training algorithm for optimal margin classifiers. In Proceedings of the Fifth Annual Workshop on Com- putational Learning Theory, COLT ’92, page 144–152, New York, NY, USA, 1992. Association for Computing Machinery.</li><li>Corinna Cortes and Vladimir Vapnik. Support-vector networks. Machine learning, 20(3):273–297, 1995.</li><li>Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre- training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Com- putational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171–4186, Minneapolis, Minnesota, June 2019. Association for Com- putational Linguistics.</li><li>Ben Dickson. What are artificial neural networks (ann)? https://bdtechtalks. com/2019/08/05/what-is-artificial-neural-network-ann/, 2019.</li><li>Yoon Kim. Convolutional neural networks for sentence classification. In Proceed- ings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 1746–1751, Doha, Qatar, October 2014. Association for Computa- tional Linguistics.</li><li>Scikit learn Developers. Cross-validation: evaluating estimator performance. https://scikit-learn.org/stable/modules/cross_validation.html, 2021.</li><li>Scikit learn Developers. Feature extraction. https://scikit-learn.org/stable/ modules/feature_extraction.html, 2021.</li><li>Ilya Loshchilov and Frank Hutter. Fixing weight decay regularization in adam. ArXiv, abs/1711.05101, 2017.</li><li>Katherine (Yi) Li. How to choose a learning rate scheduler for neural networks. https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler, 2021.</li><li>Jeffrey Pennington, Richard Socher, and Christopher D. Manning. Glove: Global vectors for word representation. In Empirical Methods in Natural Language Processing (EMNLP), pages 1532–1543, 2014.</li><li>Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, Rémi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. Transformers: State-of-the-art natural language processing. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations, pages 38–45, Online, October 2020. Association for Computational Linguistics.</li><li>Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Russ R Salakhutdinov, and Quoc V Le. Xlnet: Generalized autoregressive pretraining for language understanding. In H. Wallach, H. Larochelle, A. Beygelzimer, F. d'Alché-Buc, E. Fox, and R. Gar- nett, editors, Advances in Neural Information Processing Systems, volume 32. Curran Associates, Inc., 2019.</li><li>Ye Zhang and Byron C. Wallace. A sensitivity analysis of (and practitioners’guide to) convolutional neural networks for sentence classification. In IJCNLP, 2017.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;文本分类是自然语言处理领域中一项十分基本的任务，其在多个领域都有着广泛的应用。在本文中，我们实现了基于 XLNet 预训练语言模型的文本分类模型，并使用微调(Fine-Tuning)的方法对给定数据集进行了文 本分类。通过对验证集的分</summary>
      
    
    
    
    <category term="当代人工智能" scheme="http://gonggongjohn.me/categories/%E5%BD%93%E4%BB%A3%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Artificial-Intelligence" scheme="http://gonggongjohn.me/tags/Artificial-Intelligence/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程算法基础 文本摘要实验</title>
    <link href="http://gonggongjohn.me/2021/12/24/machine-learning/dase-alg-exp-summary/"/>
    <id>http://gonggongjohn.me/2021/12/24/machine-learning/dase-alg-exp-summary/</id>
    <published>2021-12-24T03:00:00.000Z</published>
    <updated>2022-03-06T15:03:20.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>文本摘要是自然语言处理中一个十分重要的任务，一个好的摘要可以通过少量的文字很好地概括一段长文的核心内容，帮助读者快速理解文章的意思。当前，对于文本摘要任务，其方法大致可分为抽取式（Extractive）和生成式（Generative）两种，而其中前者由于拥有语句级的语法完整性，已经被广泛的应用于各种应用场景下。在抽取式文本摘要中，一种经典的方法是将其转化为最大集合覆盖问题，并采用子模函数（Submodular Function）的方法进行求解。本文详细推导并实现了基于爬山算法的文本抽取方法，讨论了一系列优化及其变体算法，并用其对同一主题下的20段论文语料进行了抽取式文本摘要。随后，我们还将其与另一种经典的抽取式文本摘要方法TextRank进行了对比，比较了两者的适用场景和异同。</p><p><strong>关键字：文本摘要，集合覆盖，子模函数，爬山算法，TextRank</strong></p><p>Text summarization is an important task in natural language processing. A good summary can summarize the crucial content of a long article with a small amount of text and help readers quickly understand the meaning of the article. Currently, the methods for text summarization task can be roughly divided into two types: Extractive and Generative. The former has been widely used in various application scenarios due to its sentence-level grammatical integrity. A classic method in extractive text summarization is to convert it into a maximum coverage problem and use the submodular function method to solve it. In this paper, we derived and implemented the extractive text summarization method based on hill climbing algorithm in detail, discussed a series of optimization and its variant algorithms, and used it to extract text summaries from a corpus of 20 papers under the same topic. Moreover, we compared it with another classic extractive text summarization method —— TextRank, and compared the application scenarios and similarities and differences of the two.</p><p><strong>Keywords: Text summarization, Set coverage, Submodular function, Hill-climbing algorithm, TextRank</strong></p><h2 id="项目概述">项目概述</h2><p>自动文本摘要是自然语言中一个十分重要的任务。这项任务要求我们从一个给定的文本语料（通常拥有较大的文本长度）中生成一段短文本，并使得其能够最大程度上表达原文本的含义。现阶段的文本摘要方法主要分为抽取式和生成式两类。其中，固定长度的抽取式文本摘要可以看作是一个<strong>最大K-子覆盖（Maximum K-Coverage Problem）</strong>，因此我们可以使用组合优化的方法来对其进行求解。本项目要求我们实现一种基于最大K-子覆盖问题的抽取式文本摘要算法，通过其一个从互联网上爬取的语料库中抽取100句话作为其文本摘要，并对摘要的性能进行分析。</p><h2 id="问题描述">问题描述</h2><p>使用最大集合子覆盖问题的语言对抽取式文本摘要问题的描述如下：</p><p>给定一个语料库 <span class="math inline">\(D = \{s_1, s_2, \cdots, s_n \}\)</span>，其中 <span class="math inline">\(s_i(i \in \{1,2,\cdots, n\})\)</span> 为单个句子，我们设其概念单元为 <span class="math inline">\(C = \{c_1, c_2, \cdots, c_m\}\)</span>，其中 <span class="math inline">\(c_i (i \in \{1,2,\cdots, m\}\)</span> 为关键词。抽取式文本摘要的目标是寻找一个子集 <span class="math inline">\(S \subset D\)</span>（其中 <span class="math inline">\(|S| \leq K\)</span>），使其能够覆盖的概念单元 <span class="math inline">\(|C&#39;|(C&#39; \subset C)\)</span> 尽可能的多。若使用优化的语言，则该问题可以写为 <span class="math display">\[\begin{aligned}&amp;\textbf{maximize} &amp;|C&#39;| \\&amp;\textbf{s.t} &amp;|S| \leq K\end{aligned}\]</span> 事实上，我们可以通过<strong>指示器变量（Indicator Variable）</strong>更具体的刻画这一问题。若设 <span class="math inline">\(x_i(i \in \{1, \cdots, n\})\)</span> 为语句选择的指示器变量，<span class="math inline">\(a_{ij}(j \in \{1, \cdots, m\})\)</span> 为关键词选择的指示器变量，也即 <span class="math display">\[\begin{aligned}&amp;x_i = \left\{\begin{aligned}1, s_i \in S \\0, s_i \notin S\end{aligned}\right., \quad&amp;a_{ij} = \left\{\begin{aligned}1, c_j \in s_i \\0, c_j \notin s_i\end{aligned}\right.\end{aligned}\]</span> 则原问题还可以写为 <span class="math display">\[\begin{aligned}&amp;\textbf{maximize} &amp;\left|\left\{j \Big| \sum_{i = 1}^n a_{ij} x_i \geq 1\right\}\right| \\&amp;\textbf{s.t} &amp; \sum_{i = 1}^n x_i \leq K, x_i \in \{0, 1\}\end{aligned}\]</span></p><p>可以看出，这是一个<strong>带有背包限制的最大集合子覆盖问题（MCKP，Maximum Coverage Problem with Knapsack Constraint）</strong>。</p><h2 id="数据集描述">数据集描述</h2><p>为了比较文本摘要算法的性能和效果，我们需要一个相应的语料库。在本文中，我们使用了同一主题下的论文文本作为语料库，论文摘要作为单文档文本摘要的关键词集合，并将一篇同主题下的综述性论文作为多文档文本摘要的关键词集合。具体的，我们爬取了预印本网站<strong>Arxiv</strong>中<strong>计算机视觉和模式识别（Computer Vision and Pattern Recognition, cs.CV）</strong>主题下的20篇有关<strong>目标检测（Object Detection）</strong>的论文，并将其作为目标语料库。此外，我们使用了发表于期刊<strong>Computer Science Review</strong>上的一篇关于目标检测的综述性论文作为多文档文本摘要的目标关键词集。</p><h3 id="数据集获取">数据集获取</h3><p>我们首先来对论文数据进行爬取。论文爬取的过程分为两步，第一步我们搜索所有满足条件的候选论文的相关信息（标题、类别、论文编号等），第二步我们下载论文的实际数据（PDF源码等资源）。</p><p>Arxiv提供了一个可以按主题查看最近一周论文的网页界面（https://arxiv.org/list/cs.CV/pastweek），因此我们首先对该网页进行分析。论文列表网页的HTML元素布局如下图所示：</p><img src="/2021/12/24/machine-learning/dase-alg-exp-summary/overview_html_aspect.png" class="" title="overview_html_aspect"><p>可以看到，对于一个论文信息显示块，其论文编号、论文标题、作者、主题分类被分别放置在标记为<strong>Abstract</strong>、<strong>list-title mathjax</strong>、<strong>list-authors</strong>和<strong>list-subjects</strong>的HTML元素块里。</p><p>我们使用Python自带的<strong>requests</strong>模块对网站发起请求，拉取其页面的HTML字符串，并使用社区开发者提供的<strong>BeautifulSoup</strong>模块对HTML的DOM结构进行解析，取出上述的元素。随后，我们将标题中带有“Object”和“Detection”两个关键词（不区分大小写）的论文取出，作为我们候选语料库文档。筛选的部分结果如下图所示：</p><img src="/2021/12/24/machine-learning/dase-alg-exp-summary/scrap_selected.png" class="" title="scrap_selected"><p>得到了论文编号后，我们就可以对论文的各种元数据（MetaData）进行获取。我们可以通过解析https://arxiv.org/abs/{arXiv_ID}获得论文的摘要，通过{https://arxiv.org/pdf/{arXiv_ID}下载其PDF文档，通过https://arxiv.org/e-print/{arXiv_ID}下载其原始资源，在此不再赘述。</p><p>事实上，Arxiv本身提供了一个可供程序访问的论文资源获取的API（实现完才发现QAQ）。我们只需要使用<strong>布尔查询表达式（Boolean Query Expression）</strong>即可获得相应的论文结果。社区开发者对其接口请求和数据格式进行了封装，因此在Python我们只需直接引入arxiv包即可发起查询并获得论文的<strong>标题</strong>、<strong>摘要</strong>、<strong>PDF文档</strong>及<strong>原始文档（Latex文本及图片等源文件）</strong>等资源。</p><p>同样的，我们使用该API实现了自动爬取论文源数据的相关代码，并获得了最终的语料库。</p><h3 id="文本预处理">文本预处理</h3><h4 id="文本提取">文本提取</h4><p>得到了原始的论文文档后，我们需要对文档集进行整理和清洗，抽取出语料库，并对文本进行预处理。</p><p>我们首先尝试使用<strong>Pdfminer</strong>模块直接对论文的PDF文档进行分析，通过关键字的方式对文本进行抽取，结果如下图所示：</p><img src="/2021/12/24/machine-learning/dase-alg-exp-summary/pdfminer_success.png" class="" title="pdfminer_success"><img src="/2021/12/24/machine-learning/dase-alg-exp-summary/pdfminer_fail.png" class="" title="pdfminer_fail"><p>。可以看到，由于PDF是以矢量图的方式对元素进行排布，其排布并不完全按照视觉上的排布顺序，因此该方法并不能准确的抽取出文档中的相应文本。</p><p>事实上，我们可以通过对PDF文档进行<strong>版面分析（Layout Analysis）</strong>的方式提取论文的原始文本，但这一做法就导致不确定因素更多，使问题变得更为复杂，因此我们不做考虑。</p><p>幸运的是，Arxiv提供了论文源文件的下载地址，这也就意味着我们可以直接获取到论文的Latex源代码。因此，我们只需要直接从Latex文档中对纯文本进行抽取即可。Latex是一种标准化的排版工具，我们可以通过声明式的代码语言在一个Latex文档中插入各种元素。由于我们只需要对其中的纯文本进行分析，因此这些元素在当前的任务下是多余的。这时，我们就需要使用正则表达式对其进行替换。例如，对于<strong>\cite{}</strong>，我们就可以使用正则表达式 \\cite\{(.*?)\}将其匹配出来。</p><h2 id="方法">方法</h2><h3 id="朴素枚举法">朴素枚举法</h3><h3 id="贪心算法爬山算法">贪心算法（爬山算法）</h3><h3 id="带权的贪心算法">带权的贪心算法</h3><h3 id="stack-encoding">Stack Encoding</h3><h3 id="textrank">TextRank</h3><h2 id="实验结果">实验结果</h2><p>最后，我们从摘要质量和摘要推理时间两个方面来对上面的方法进行分析。</p><p>对于摘要质量，我们自然的可以想到使用关键词覆盖率作为其评价指标。沿用上面的记号，若我们将抽取出的概括文本 <span class="math inline">\(S\)</span> 看作词项的集合，则覆盖率被定义为 <span class="math display">\[Coverage = S \cap C\]</span> 。对于文本摘要任务，一个常用的评价指标被称为<strong>ROUGE-N（Recall-Oriented Understudy for Gisting Evaluation-N）</strong>，其定义为 <span class="math display">\[ROUGE-N = \frac{|N-Gram_{Extracted} \cap N-Gram_{Reference}|}{|N-Gram_{Reference}|}\]</span> ，也即抽取的摘要中匹配的N-Gram数除以标准摘要中的N-Gram总数。从定义中我们可以发现，ROUGE-N通常需要一个参考的摘要文本才能计算，而这里我们并没有这样的文本。不过，由于我们有目标关键字，而这可以视作一种1-Gram，因此我们仍然可以计算ROUGE-1的值。</p><h2 id="结论">结论</h2><p>在本实验中，我们首先从集合覆盖的角度分析了抽取式文本摘要问题，并将其转化了为了一个MCKP问题。由于该问题是一个NP-Hard问题，我们无法在可接受的时间内用朴素搜索算法求解出精确解。随后，我们实现了基于贪心算法的最大子覆盖算法，并用其实现了抽取式文本摘要。进一步的，我们对贪心算法实现了一系列的改进，包括考虑文本的权重，以及使用队列的方式进行聚合搜索。最后，我们实现了经典的TextRank算法，并将其与前面的算法进行了比较。</p><p>我们可以很容易的发现，基于最大子覆盖的文本摘要算法能够更好的贴合目标关键字，但其语义连贯性明显不如TextRank算法。这就意味着当我们有一个好的关键词集合或面对多文档摘要场景时，我们可以使用基于最大子覆盖问题的文本摘要算法。而在实际应用场景或单文本的摘要场景下，我们更倾向于使用TextRank等基于语义的文本摘要算法。</p><p>通过本实验，我们对抽取式文本摘要任务和子模函数、最大K-子覆盖问题有了更深入的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;文本摘要是自然语言处理中一个十分重要的任务，一个好的摘要可以通过少量的文字很好地概括一段长文的核心内容，帮助读者快速理解文章的意思。当前，对于文本摘要任务，其方法大致可分为抽取式（Extractive）和生成式（Generative）</summary>
      
    
    
    
    <category term="数据科学算法基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Machine-Learning" scheme="http://gonggongjohn.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程算法基础 PCA实验</title>
    <link href="http://gonggongjohn.me/2021/11/29/machine-learning/dase-alg-exp-pca/"/>
    <id>http://gonggongjohn.me/2021/11/29/machine-learning/dase-alg-exp-pca/</id>
    <published>2021-11-29T02:00:00.000Z</published>
    <updated>2022-02-12T10:16:50.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要">摘要</h2><p>图像压缩一直是图像处理中一个重要的任务，一个好的图像压缩算法可以大大降低存储和传输代价。主成分分析（Principal Component Analysis）作为一个经典的降维方法，已经在图像压缩领域得到了极为广泛的运用。在本文中，我们从主成分分析的原理出发，导出并实现了基于特征分解的朴素PCA算法，并使用奇异值分解方法对其计算进行了优化。随后，我们实现了更适合图像处理的2DPCA、其改进方法2D-2DPCA。此外，我们还实现了基于核方法的Kernel PCA来进一步提升主成分的表达能力，并对比了多种不同的核函数下图像的压缩效果。进一步的，我们尝试使用了较为现代的基于神经网络的GHA（Generalized Hebbian Algorithm）算法来迭代得到主成分。最后，我们将实现的结果与时下较为常用的基于离散余弦变换的JPEG图像压缩算法进行了对比。</p><p><strong>关键字：图像压缩，主成分分析，核方法，感知机，余弦变换</strong></p><p>Image compression has long be a fundamental task in image processing, a good image compression algorithm can massively reduce the cost of storage and transmission. As a classic dimension reduction algorithm, Principle Component Analysis has been widely used in the field of image compression. In this article, we derive and implement the naive PCA algorithm based on eigenvalue decomposition, and use the singular value decomposition method to optimize its calculation. Subsequently, we implemented 2DPCA and its improvement version 2D-2DPCA, which is more suitable for image processing. In addition, we implemented Kernel PCA based on the kernel method to further improve the expression ability of principal components, and compared the compression effects of images under a variety of different kernel functions. Further, we tried to use a more modern neural network-based GHA (Generalized Hebbian Algorithm) algorithm to iteratively obtain the principal components. Finally, we compared the achieved results with the contemporary mainstream JPEG image compression algorithm which is based on discrete cosine transform.</p><p><strong>Keywords: Image compression, Principle component analysis, Perceptron, Cosine transformation</strong></p><h2 id="项目概述">项目概述</h2><p>主成分分析（Principal Component Analysis）可以用来减少矩阵（图像）的维度，并将这些新的维度投射到图像上，使其保留质量。本项目要求我们使用PCA方法及其变体，对3组图像（每组包含100张图像）进行压缩，并对图像压缩的性能进行分析。</p><h2 id="问题描述">问题描述</h2><p>一张<span class="math inline">\(8\)</span>位三通道（RGB）正方形彩色图片可视为三个 <span class="math inline">\(N\)</span> 维矩阵 <span class="math inline">\(\boldsymbol{X}\)</span>，其中 <span class="math inline">\(x_{ij} \in \{0,1, \cdots, 255\}\)</span>，其存储代价为 <span class="math inline">\(b\)</span>。图像压缩的目标即为寻找一个映射 <span class="math inline">\(\mathcal{Q}\)</span>，使得 <span class="math inline">\(\mathcal{Q}(\boldsymbol{X}) \in \mathbb{R}^{k \times n}(k \ll n), \mathcal{Q}^{-1} (\mathcal{Q}(\boldsymbol{X})) \approx X\)</span>，且存储 <span class="math inline">\(\mathcal{Q} (\boldsymbol{X})\)</span> 和 <span class="math inline">\(\mathcal{Q}^{-1}\)</span> 所需的空间 <span class="math inline">\(\tilde{b} \ll b\)</span>。</p><h2 id="方法">方法</h2><h3 id="朴素pca">朴素PCA</h3><p>PCA的主要思想是通过将一个高维样本 <span class="math inline">\(\boldsymbol{x} \in \mathbb{R}^n\)</span> 左乘一个正交矩阵 <span class="math inline">\(\boldsymbol{Q} \in \mathbb{R}^{k \times n}(k \ll n)\)</span>，使得其映射到一个较低维的超平面 <span class="math inline">\(\boldsymbol{Q x} \in \mathbb{R}^k\)</span> 上，同时又保证多个数据点映射后的统计性质保持不变。具体来说，这样的超平面要具有如下的性质：</p><ul><li><strong>最近重构性：</strong>样本点到这个超平面的距离足够近</li><li><strong>最大可分性：</strong>样本点在这个超平面上的投影尽可能分开</li></ul><p>由此，我们就有两种角度来求解这一正交矩阵。事实上，在中心化条件下，这两者是等价的。这是由于有如下定理保证：</p><blockquote><p><strong>Theorem:</strong> 对于中心化数据集 <span class="math inline">\(\{\boldsymbol{x}^{(i)}\}_{i = 1}^N\)</span>，最小化重构距离等价于最大化投影方差</p><p><strong>Proof:</strong> 这里仅证明投影到一维时的情形，高维时的情况可自然推广</p><p>设投影直线的方向向量为 <span class="math inline">\(\boldsymbol{v}\)</span>，其中 <span class="math inline">\(||\boldsymbol{v}||^2 = 1\)</span></p><p>则由勾股定理可知，<span class="math inline">\(||\boldsymbol{x}^{(i)} - \boldsymbol{v^T} \boldsymbol{x}^{(i)}\boldsymbol{v}||^2 = ||\boldsymbol{x}^{(i)}||^2 - \left(\boldsymbol{v}^T \boldsymbol{x}^{(i)}\right)^2\)</span></p><p>于是 <span class="math inline">\(\boldsymbol{v}\)</span> 的最优解 <span class="math display">\[\begin{aligned}\boldsymbol{v}^* &amp;= \mathop{\arg\min}_{\boldsymbol{v}: ||\boldsymbol{v}||^2 = 1} \frac{1}{N} \sum_{i = 1}^N ||\boldsymbol{x}^{(i)} - \boldsymbol{v^T} \boldsymbol{x}^{(i)}\boldsymbol{v}||^2 \\&amp;= \mathop{\arg\min}_{\boldsymbol{v}: ||\boldsymbol{v}||^2 = 1} \frac{1}{N} \sum_{i = 1}^N \left( ||\boldsymbol{x}^{(i)}||^2 - \left(\boldsymbol{v}^T \boldsymbol{x}^{(i)}\right)^2 \right) \\&amp;= \mathop{\arg\max}_{\boldsymbol{v}: ||\boldsymbol{v}||^2 = 1} \frac{1}{N} \sum_{i = 1}^N \left(\boldsymbol{v}^T \boldsymbol{x}^{(i)}\right)^2\end{aligned}\]</span> 也即最小化重构距离与最大化投影方差等价</p></blockquote><p>这里我们通过最大化投影方差的方法来求解。 我们知道，对于一个中心化矩阵 <span class="math inline">\(\boldsymbol{X}\)</span>（即 <span class="math inline">\(E(\boldsymbol{X}) = \boldsymbol{0}\)</span>），其协方差矩阵 <span class="math display">\[\begin{aligned}\Sigma (\boldsymbol{X}) &amp;= E \left[ (\boldsymbol{X} - E(\boldsymbol{X})) (\boldsymbol{X} - E(\boldsymbol{X}))^T \right] \\&amp;= \begin{pmatrix}\textrm{Cov}(\boldsymbol{X}_1, \boldsymbol{X}_1) &amp; \textrm{Cov}(\boldsymbol{X}_1, \boldsymbol{X}_2) &amp;\cdots &amp;\textrm{Cov}(\boldsymbol{X}_1, \boldsymbol{X}_n) \\\textrm{Cov}(\boldsymbol{X}_2, \boldsymbol{X}_1) &amp; \textrm{Cov}(\boldsymbol{X}_2, \boldsymbol{X}_2) &amp;\cdots &amp;\textrm{Cov}(\boldsymbol{X}_2, \boldsymbol{X}_n) \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\\textrm{Cov}(\boldsymbol{X}_n, \boldsymbol{X}_1) &amp; \textrm{Cov}(\boldsymbol{X}_n, \boldsymbol{X}_2) &amp;\cdots &amp;\textrm{Cov}(\boldsymbol{X}_n, \boldsymbol{X}_n)\end{pmatrix} \\&amp;= \frac{1}{N} \boldsymbol{X} \boldsymbol{X}^T\end{aligned}\]</span> 若将投影矩阵 <span class="math inline">\(\boldsymbol{Q}\)</span> 按行划分为向量组，也即设 <span class="math display">\[\boldsymbol{Q} = \begin{pmatrix}\boldsymbol{q}_1 \\\boldsymbol{q}_2 \\\vdots \\\boldsymbol{q}_k\end{pmatrix}\]</span> ，则要使得投影方差和最大，也即求解 <span class="math display">\[\begin{aligned}\mathop{\arg\max}_{\boldsymbol{Q}: \boldsymbol{Q}\boldsymbol{Q}^T = \boldsymbol{I}} \sum_{i = 1}^k || \boldsymbol{q}_i \boldsymbol{X} ||_2^2 &amp;= \mathop{\arg\max}_{\boldsymbol{Q}: \boldsymbol{Q}\boldsymbol{Q}^T = \boldsymbol{I}} ||\boldsymbol{QX}||_F^2 \\&amp;=\mathop{\arg\max}_{\boldsymbol{Q}: \boldsymbol{Q}\boldsymbol{Q}^T = \boldsymbol{I}} \textrm{tr} \left( \boldsymbol{X}^T \boldsymbol{Q}^T \boldsymbol{Q} \boldsymbol {X} \right)\end{aligned}\]</span> 由此可得优化问题 <span class="math display">\[\begin{aligned}\min \quad &amp; - \textrm{tr} \left( \boldsymbol{X}^T \boldsymbol{Q}^T \boldsymbol{Q} \boldsymbol {X} \right) \\\textbf{s.t} \quad &amp; \boldsymbol{Q} \boldsymbol{Q}^T = \boldsymbol{I}_{k \times k}\end{aligned}\]</span> 利用拉格朗日乘子法，我们可得当目标函数取到最小值时，有 <span class="math display">\[\boldsymbol{Q} \boldsymbol{X} \boldsymbol{X}^T = \boldsymbol{Q} \boldsymbol{\lambda}\]</span> 也即 <span class="math inline">\(\boldsymbol{Q}\)</span> 中的第 <span class="math inline">\(i\)</span> 行为 <span class="math inline">\(\boldsymbol{X} \boldsymbol{X}^T\)</span> 的第 <span class="math inline">\(i\)</span> 个特征值 <span class="math inline">\(\lambda_i\)</span> 对应的特征向量。进一步的，将结果代回原式我们可以发现，由于 <span class="math inline">\(\boldsymbol{Q}\)</span> 为一个 <span class="math inline">\(k \times n\)</span> 的矩阵，因此若要使得目标函数取到最小值，<span class="math inline">\(\boldsymbol{Q}\)</span> 中的行向量应取前 <span class="math inline">\(k\)</span> 大的特征值所对应的特征向量。</p><p>在图像压缩任务中，当将数据集映射到低维空间后，我们还需要将其重构回原来的图像空间以保证图像的可用性。对于使用正交变换的PCA方法，这一重构任务是容易的。由于 <span class="math inline">\(\boldsymbol{Q}\)</span> 为一正交矩阵，其逆矩阵 <span class="math inline">\(\boldsymbol{Q}^{-1} = \boldsymbol{Q}^T\)</span>。因此要重构压缩后的图像，进行我们只需要对降维数据进行逆变换，即左乘 <span class="math inline">\(\boldsymbol{Q}^T\)</span> 即可。</p><p>由此，我们导出了使用朴素PCA方法进行图像压缩的一般过程。需要注意的是，要使用基于特征分解的PCA方法对图像进行分析和处理，我们需要将图像矩阵划分为向量组并进行中心化操作，这里我们采用按列划分的方法。算法的具体流程如下：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/naive_pca_alg.png" class="" title="naive_pca_alg"><p>在选择了不同主成分个数时，使用朴素PCA算法进行图像压缩的效果结果如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/naive_pca_pic.png" class="" title="naive_pca_pic"><p>可以看到，仅使用前10个主成分已经能还原出整体的图像轮廓，当 <span class="math inline">\(k=50\)</span> 时，图像的细节已基本得到恢复。</p><h3 id="基于奇异值分解的pca">基于奇异值分解的PCA</h3><p>可以看到，基于特征值分解的PCA算法中计算开销最大的部分为计算协方差矩阵 <span class="math inline">\(\boldsymbol{X} \boldsymbol{X}^T\)</span> 的特征值与特征向量。事实上，我们可以使用奇异值分解来避免这一高开销计算，一个 <span class="math inline">\(m \times n\)</span> 的矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的奇异值分解是指将其分解为三个特殊矩阵乘积的形式 <span class="math inline">\(\boldsymbol{A} = \boldsymbol{U} \boldsymbol{\Sigma} \boldsymbol{V}^T\)</span>，其中 <span class="math inline">\(\boldsymbol{U}\)</span> 为 <span class="math inline">\(m\)</span> 阶正交矩阵，<span class="math inline">\(\boldsymbol{V}\)</span> 为 <span class="math inline">\(n\)</span> 阶正交矩阵，<span class="math inline">\(\Sigma\)</span> 是由降序排列的非负的对角线元素组成的 <span class="math inline">\(m \times n\)</span> 对角矩阵。</p><p>对于任意实矩阵，我们都能找到它的奇异值分解。这是由于有如下定理保证：</p><blockquote><p><strong>Theorem:</strong> 若 <span class="math inline">\(\boldsymbol{A}\)</span> 为一 <span class="math inline">\(m \times n\)</span> 实矩阵，<span class="math inline">\(\boldsymbol{A} \in \mathbb{R}^{m \times n}\)</span>，则 <span class="math inline">\(\boldsymbol{A}\)</span> 的奇异值分解存在 <span class="math inline">\(\boldsymbol{A} = \boldsymbol{U} \boldsymbol{\Sigma} \boldsymbol{V}^T\)</span>其中 <span class="math inline">\(\boldsymbol{U}\)</span> 是 <span class="math inline">\(m\)</span> 阶正交矩阵，<span class="math inline">\(\boldsymbol{V}\)</span> 是 <span class="math inline">\(n\)</span> 阶正交矩阵，<span class="math inline">\(\boldsymbol{\Sigma}\)</span> 是 <span class="math inline">\(m \times n\)</span> 对角矩阵，其前 <span class="math inline">\(r\)</span> 个对角元素 <span class="math inline">\((\sigma_1, \cdots, \sigma_r)\)</span> 为正，且按降序排列，其余均为 <span class="math inline">\(0\)</span>。</p><p><strong>Proof:</strong> 由于 <span class="math inline">\(\boldsymbol{A}^T \boldsymbol{A}\)</span> 为对称半正定矩阵，因此可以对其进行特征分解 <span class="math inline">\(\boldsymbol{A}^T \boldsymbol{A} = \boldsymbol{V} \boldsymbol{\Lambda}_n \boldsymbol{V}^T\)</span>，其中 <span class="math inline">\(V \in \mathbb{R}^{n \times n}\)</span> 是正交矩阵，<span class="math inline">\(\boldsymbol{\Lambda}_n\)</span> 是对称矩阵，并且对角线元素是 <span class="math inline">\(\boldsymbol{A}^T \boldsymbol{A}\)</span> 的特征值 <span class="math inline">\(\lambda_i \geq 0, i = 1, \cdots, n\)</span>，并且是按降序排列的。因为 <span class="math inline">\(\textrm{rank} (\boldsymbol{A}) = \textrm{rank}(\boldsymbol{A}^T \boldsymbol{A}) = r\)</span>，所以前 <span class="math inline">\(r\)</span> 个特征值是正的。</p><p>注意到 <span class="math inline">\(\boldsymbol{A} \boldsymbol{A}^T\)</span> 和 <span class="math inline">\(\boldsymbol{A}^T \boldsymbol{A}\)</span> 有相同的非零特征值，因此他们的秩是相等的。我们定义 <span class="math display">\[\sigma_i = \sqrt{\lambda_i} &gt; 0, i = 1, \cdots, r\]</span> ，记 <span class="math inline">\(\boldsymbol{v}_1, \cdots,\boldsymbol{v}_r\)</span> 是 <span class="math inline">\(\boldsymbol{V}\)</span> 的前 <span class="math inline">\(r\)</span> 列，它们同时也是 <span class="math inline">\(\boldsymbol{A}^T \boldsymbol{A}\)</span> 前 <span class="math inline">\(r\)</span> 个特征值对应的特征向量。即有 <span class="math display">\[\boldsymbol{A}^T \boldsymbol{A} \boldsymbol{v}_i = \lambda_i \boldsymbol{v}_i, i = 1, \cdots, r\]</span> 。因此同时在两边左乘上 <span class="math inline">\(\boldsymbol{A}\)</span> 就有 <span class="math display">\[(\boldsymbol{A} \boldsymbol{A}^T) \boldsymbol{A} \boldsymbol{v}_i = \lambda_i \boldsymbol{A} \boldsymbol{v}_i,i = 1, \cdots, r\]</span> 。这就意味着 <span class="math inline">\(\boldsymbol{A} \boldsymbol{v}_i\)</span> 是 <span class="math inline">\(\boldsymbol{A} \boldsymbol{A}^T\)</span> 的特征向量，因为 <span class="math inline">\(\boldsymbol{v}_i^T \boldsymbol{A}^T \boldsymbol{A} \boldsymbol{v}_j = \lambda_j \boldsymbol{v}_i^T \boldsymbol{v}_j\)</span> 所以这些特征向量也是正交的。所以将他们标准化则有</p><p><span class="math display">\[\boldsymbol{u}_i = \frac{\boldsymbol{A} \boldsymbol{v}_i}{\sqrt{\lambda_i}} = \frac{\boldsymbol{A} \boldsymbol{v}_i}{\sigma_i}, i = 1, \cdots, r\]</span> 这些 <span class="math inline">\(\boldsymbol{u}_1, \cdots, \boldsymbol{u}_r\)</span> 是 <span class="math inline">\(r\)</span> 个 <span class="math inline">\(\boldsymbol{A} \boldsymbol{A}^T\)</span> 关于非零特征值 <span class="math inline">\(\lambda_1, \cdots, \lambda_r\)</span> 的特征向量。因此 <span class="math display">\[\boldsymbol{u}_i^T \boldsymbol{A} \boldsymbol{v}_j = \frac{1}{\sigma_i} \boldsymbol{v}_i^T \boldsymbol{A}^T \boldsymbol{A} \boldsymbol{v}_j = \frac{\lambda_j}{\sigma_i} \boldsymbol{v}_i^T \boldsymbol{v}_j = \left\{\begin{aligned}\sigma_i, &amp; i = j \\0, 其他\end{aligned}\right.\]</span> 以矩阵的方式重写即有</p><p><span class="math display">\[\begin{pmatrix}\boldsymbol{u}_1^T \\\vdots \\\boldsymbol{u}_r^T\end{pmatrix}\boldsymbol{A}(\boldsymbol{v}_1, \cdots, \boldsymbol{v}_r)= \textrm{diag} (\sigma_1, \cdots, \sigma_r) = \boldsymbol{\Sigma}_r\]</span></p><p>注意到根据定义 <span class="math display">\[\boldsymbol{A}^T \boldsymbol{A} \boldsymbol{v}_i = 0, i = r + 1, \cdots, n\]</span> 即有 <span class="math display">\[\boldsymbol{A} \boldsymbol{v}_i = 0, i = r + 1, \cdots, n\]</span> 取相互正交的单位向量 <span class="math inline">\(\boldsymbol{u}_{r+1}, \cdots, \boldsymbol{u}_m\)</span> 均与 <span class="math inline">\(\boldsymbol{u}_1, \cdots, \boldsymbol{u}_r\)</span> 正交，即有 <span class="math display">\[\boldsymbol{u}_i^T \boldsymbol{A} \boldsymbol{v}_j = 0. i = 1, \cdots, m; j = r + 1, \cdots, n\]</span> 它们共同构成了 <span class="math inline">\(\mathbb{R}^m\)</span> 的一组标准正交基。因此，扩展前述奇异值分解式即有 <span class="math display">\[\begin{pmatrix}\boldsymbol{u}_1^T \\\vdots \\\boldsymbol{u}_m^T\end{pmatrix}\boldsymbol{A}(\boldsymbol{v}_1, \cdots, \boldsymbol{v}_n)= \begin{pmatrix}\boldsymbol{\Sigma}_r &amp; \boldsymbol{0}^T \\\boldsymbol{0} &amp; \boldsymbol{O}\end{pmatrix}= \boldsymbol{\Sigma}\]</span> 令 <span class="math inline">\(\boldsymbol{U} = (\boldsymbol{u}_1, \cdots, \boldsymbol{u}_m)\)</span>，<span class="math inline">\(\boldsymbol{V} = (\boldsymbol{v}_1, \cdots, \boldsymbol{v}_n)\)</span>，即有 <span class="math inline">\(\boldsymbol{A} = \boldsymbol{U} \boldsymbol{\Sigma} \boldsymbol{V}^T\)</span>。 由此可知，矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 必存在奇异值分解。</p></blockquote><p>根据矩阵的奇异值分解定理，对于中心化图像矩阵 <span class="math inline">\(\boldsymbol{X}\)</span>，我们有 <span class="math display">\[\begin{aligned}\boldsymbol{X}^T \boldsymbol{X} &amp;= \left( \boldsymbol{U} \boldsymbol{\Sigma} \boldsymbol{V}^T \right)^T \left( \boldsymbol{U} \boldsymbol{\Sigma} \boldsymbol{V}^T \right) \\&amp;= \boldsymbol{V} \boldsymbol{\Sigma} \boldsymbol{V}^T\end{aligned}\]</span> 也即 <span class="math inline">\(\boldsymbol{X}^T \boldsymbol{X} \boldsymbol{V} = \boldsymbol{V} \boldsymbol{\Sigma}\)</span>。由此我们得知协方差矩阵的第 <span class="math inline">\(i\)</span> 个特征向量也即右奇异值矩阵 <span class="math inline">\(\boldsymbol{V}\)</span> 的第 <span class="math inline">\(i\)</span> 列。</p><p>基于奇异值分解的PCA图像压缩算法具体流程如下：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/svd_pca_alg.png" class="" title="svd_pca_alg"><p>同样的，我们使用Python实现了上述算法。对于奇异值分解操作，我们使用Numpy模块中提供的<strong>svd()</strong>函数来完成。Numpy模块使用了LAPACK科学计算包来完成矩阵分解的相关操作。其中，SVD分解采用了<strong>Householder变换</strong>的方式来完成，这一操作的时间开销远低于一般的采用<strong>Gram-Schimdt正交化</strong>的求解方式，也远低于对协方差矩阵作特征值分解的时间开销。</p><h3 id="dpca">2DPCA</h3><p>由于常规的PCA方法是对向量组进行操作，因此当我们使用该方法对图像进行压缩时，需要先将其划分为列向量组再进行处理。由此得到的协方差矩阵规模十分巨大，需要极大的时间开销来完成计算。此外，由于图像压缩通常被作为其他图像处理任务的上游任务，如此操作会导致图像的特征信息出现大量的丢失。因此，之后的研究者提出了另一种简单的图像投影技术，称为<strong>二维主成分分析(2DPCA)</strong>，专门用于图像特征提取。与传统的PCA方法不同，2DPCA基于2D矩阵直接构建图像的协方差矩阵。与PCA的协方差矩阵相比，使用2DPCA的图像协方差矩阵的大小要小得多，这就意味着确定相应的特征向量所需的时间更少。此外，由于其更多的利用了图像的空间信息，对图像的特征也能够更好的保留。</p><p>2DPCA的主要思想是直接利用一个 <span class="math inline">\(n \times k\)</span> 维矩阵对整张图像进行投影。这里我们先考虑投影矩阵为一维时的情况，再将其推广到 <span class="math inline">\(k\)</span> 维上去。</p><p>若设图像矩阵为 <span class="math inline">\(\boldsymbol{A}\)</span>，<span class="math inline">\(\boldsymbol{X}\)</span> 为投影向量，<span class="math inline">\(\boldsymbol{Y} = \boldsymbol{AX}\)</span> 为投影后的特征。则 <span class="math inline">\(\boldsymbol{Y}\)</span> 的协方差矩阵 <span class="math inline">\(\boldsymbol{S}_x\)</span> 可以写为 <span class="math display">\[\begin{aligned}\boldsymbol{S}_x &amp;= E \left[(\boldsymbol{Y} - E[\boldsymbol{Y}])(\boldsymbol{Y} - E[\boldsymbol{Y}])^T \right] \\&amp;=E \left[(\boldsymbol{AX} - E[\boldsymbol{AX}])(\boldsymbol{AX} - E[\boldsymbol{AX}])^T \right] \\&amp;= E \left[((\boldsymbol{A} - E[\boldsymbol{A}]) \boldsymbol{X})((\boldsymbol{A} - E[\boldsymbol{A}]) \boldsymbol{X})^T \right]\end{aligned}\]</span> 与一般的PCA方法类似，我们定义判断投影好坏的评价指标为 <span class="math inline">\(J(\boldsymbol{X}) = \textrm{tr} (\boldsymbol{S}_x)\)</span>，则代入上面的式子就可以写为 <span class="math display">\[\begin{aligned}J(\boldsymbol{X}) &amp;= \textrm{tr} (\boldsymbol{S}_x) \\&amp;= \boldsymbol{X}^T E \left[ (\boldsymbol{A} - E[\boldsymbol{A}])^T (\boldsymbol{A} - E[\boldsymbol{A}]) \right] \boldsymbol{X}\end{aligned}\]</span> 。从上面的式子我们可以看出，2DPCA通常是同时作用于多张图像矩阵上的，这也是其协方差矩阵维度相对较小的原因。若设图像集合为 <span class="math inline">\(\boldsymbol{A}_1, \cdots, \boldsymbol{A}_M\)</span>，则 <span class="math display">\[\begin{aligned}\boldsymbol{G} &amp;\overset{def}{=} E \left[ (\boldsymbol{A} - E[\boldsymbol{A}])^T (\boldsymbol{A} - E[\boldsymbol{A}]) \right] \\&amp;= \frac{1}{M} \sum_{i = 1}^M \left( \boldsymbol{A}_i - \bar{\boldsymbol{A}} \right)^T \left( \boldsymbol{A}_i - \bar{\boldsymbol{A}} \right)\end{aligned}\]</span> 现在我们将投影矩阵推广为 <span class="math inline">\(k\)</span> 维，也即设投影矩阵为 <span class="math inline">\(\boldsymbol{X} = \{\boldsymbol{X}_1, \cdots, \boldsymbol{X}_d \}\)</span>，则优化问题为 <span class="math display">\[\begin{aligned}\min \quad &amp; - J(\boldsymbol{X}) \\\textbf{s.t} \quad &amp; \boldsymbol{X}_i^T \boldsymbol{X}_j = 0, i \neq j\end{aligned}\]</span> 由拉格朗日乘子法我们可以得知，要提取前 <span class="math inline">\(k\)</span> 个特征，投影矩阵的最优解即为 <span class="math inline">\(\boldsymbol{G}\)</span> 前 <span class="math inline">\(k\)</span> 大个特征值对应的特征向量所组成的矩阵。</p><p>由此我们就得到了使用2DPCA进行图像压缩的一般算法：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/2d_pca_alg.png" class="" title="2d_pca_alg"><p>在选择了不同主成分个数时，使用2DPCA算法进行图像压缩的效果结果如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/2d_pca_pic.png" class="" title="2d_pca_pic"><h3 id="d-2dpca">2D-2DPCA</h3><p>在上述介绍的2DPCA中，若我们用 <span class="math inline">\(\boldsymbol{A}^{(t)}\)</span> 来表示矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的第 <span class="math inline">\(t\)</span> 行，则 <span class="math display">\[\begin{aligned}\boldsymbol{A}_i &amp;= \left( \left( \boldsymbol{A}_i^{(1)} \right)^T,  \cdots, \left( \boldsymbol{A}_i^{(n)} \right)^T \right)^T \\\bar{\boldsymbol{A}} &amp;= \left( \left( \bar{\boldsymbol{A}}^{(1)} \right)^T,  \cdots, \left( \bar{\boldsymbol{A}}^{(n)} \right)^T \right)^T\end{aligned}\]</span> ，于是协方差矩阵 <span class="math inline">\(\boldsymbol{G}\)</span> 就可以被写为 <span class="math display">\[\boldsymbol{G} = \frac{1}{M} \sum_{i = 1}^M \sum_{k = 1}^n \left( \boldsymbol{A}_i^{(k)} - \bar{\boldsymbol{A}}^{(k)}\right)^T \left( \boldsymbol{A}_i^{(k)} - \bar{\boldsymbol{A}}^{(k)}\right)\]</span> 。通过该式我们可以发现，<span class="math inline">\(\boldsymbol{G}\)</span> 可以通过图像集合中行向量的外积得到，这也就意味着2DPCA实际上仅按行提取了图像之间的联系。自然的，我们可以想到是否可以用类似的方法提取图像列之间的联系并将它们结合在一起，从而挖掘出图像更多的特征联系。这一想法也就形成了所谓的<strong>双方向二维主成分分析（2D-2DPCA）</strong>。</p><p>我们设 <span class="math inline">\(\boldsymbol{Z} \in \mathbb{R}^{n \times k}\)</span> 为另一投影矩阵，其作用即为对图像矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的列进行投影。于是与2DPCA的做法类似，我们设矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 投影得到的特征为 <span class="math display">\[\boldsymbol{B} = \boldsymbol{Z}^T \boldsymbol{A}\]</span> 。于是投影得到的协方差矩阵即为 <span class="math display">\[J(\boldsymbol{Z}) = \boldsymbol{Z}^T E \left[ (\boldsymbol{A} - E[\boldsymbol{A}]) (\boldsymbol{A} - E[\boldsymbol{A}])^T \right] \boldsymbol{Z}\]</span> 我们定义 <span class="math display">\[\begin{aligned}\boldsymbol{G}&#39; &amp;\overset{def}{=} E \left[ (\boldsymbol{A} - E[\boldsymbol{A}]) (\boldsymbol{A} - E[\boldsymbol{A}])^T \right] \\&amp;= \frac{1}{M} \sum_{i = 1}^M  \left( \boldsymbol{A}_i - \bar{\boldsymbol{A}} \right) \left( \boldsymbol{A}_i - \bar{\boldsymbol{A}} \right)^T \\&amp;= \frac{1}{M} \sum_{i = 1}^M \sum_{k = 1}^n \left( \boldsymbol{A}_i^{(k)} - \bar{\boldsymbol{A}}^{(k)}\right) \left( \boldsymbol{A}_i^{(k)} - \bar{\boldsymbol{A}}^{(k)}\right)^T\end{aligned}\]</span> 其中 <span class="math inline">\(\boldsymbol{A}^{(t)}\)</span> 为矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的第 <span class="math inline">\(t\)</span> 列。</p><p>与上面类似，我们最大化 <span class="math inline">\(J(\boldsymbol{Z})\)</span>，同样可以得到 <span class="math inline">\(\boldsymbol{Z}\)</span> 的最优解即为 <span class="math inline">\(\boldsymbol{G}\)</span> 的前 <span class="math inline">\(k\)</span> 大个特征值对应的特征向量所组成的矩阵。</p><p>将行投影和列投影结合，我们就能得到图像集合中的任一图像 <span class="math inline">\(\boldsymbol{A}\)</span> 经过投影后的特征为 <span class="math display">\[\boldsymbol{C} = \boldsymbol{Z}^T \boldsymbol{A} \boldsymbol{Z}\]</span> ，其重构图像为 <span class="math display">\[\tilde{\boldsymbol{A}} = \boldsymbol{Z} \boldsymbol{C} \boldsymbol{X}^T\]</span> 。由此我们就得到了使用2D-2DPCA进行图像压缩的一般算法：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/2d_2d_pca_alg.png" class="" title="2d_2d_pca_alg"><p>在选择了不同主成分个数时，使用2D-2DPCA算法进行图像压缩的效果结果如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/2d2d_pca_pic.png" class="" title="2d2d_pca_pic"><h3 id="generalized-hebbian-algorithm">Generalized Hebbian Algorithm</h3><p>可以看到，上面几种PCA方法均为基于矩阵分解的求解方法。近年来随着机器学习和神经网络模型的提出，研究者也提出了基于学习的方法来快速提取数据集的主成分。其中较为典型的即为基于Gram-Schmidt正交化方法的<strong>扩展Hebbian算法（Generalized Hebbian Algorithm）</strong>。GHA算法是一种无监督的学习算法，我们可以将其看作Oja方法的一种推广。</p><p>首先我们构建一个单层全连接神经网络（Single-layer Feed Forward Neural Network），如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/gha_network.png" class="" title="gha_network"><p>可以证明，通过GHA算法对该神经网络进行权重调整，则训练完成后，连接每个输出神经元的权重向量即为一个主成分向量。</p><p>首先我们考虑输出层只有 <span class="math inline">\(1\)</span> 个神经元的情况。若设第 <span class="math inline">\(t\)</span> 次迭代的输入向量为 <span class="math inline">\(\boldsymbol{x}_t \in \mathbb{R}\)</span>，网络的权重向量为 <span class="math inline">\(\boldsymbol{w}_t \in \mathbb{R}^n\)</span>，输出 <span class="math inline">\(y_t = \boldsymbol{w}_t^T \boldsymbol{x}_t\)</span>，<span class="math inline">\(\eta\)</span> 为学习率。则根据Oja方法，权重更新公式为 <span class="math display">\[\boldsymbol{w}_{t + 1} = \boldsymbol{w}_{t} + \eta \boldsymbol{y}_{t} (\boldsymbol{x}_{t} - \boldsymbol{y}_{t} \boldsymbol{w}_{t})\]</span> 。现在我们将其推广到 <span class="math inline">\(k\)</span> 个输出时的情况，即求解前 <span class="math inline">\(k\)</span> 个主成分。设 <span class="math inline">\(\boldsymbol{W}_t \in \mathbb{R}^{k \times n}\)</span>，输出 <span class="math inline">\(\boldsymbol{y}_t = \boldsymbol{W}_t \boldsymbol{x}_t\)</span>，则 <span class="math display">\[\boldsymbol{W}_{t + 1} = \eta \left( \boldsymbol{y}_t \boldsymbol{x}_t^T - \textrm{LOWER}(\boldsymbol{y}_t \boldsymbol{y}_t^T) \boldsymbol{W}_t \right)\]</span> ，其中 <span class="math inline">\(\textrm{LOWER}(\boldsymbol{A})\)</span> 为取矩阵 <span class="math inline">\(\boldsymbol{A}\)</span> 的下三角操作（上三角部分置为 <span class="math inline">\(0\)</span>）。</p><p>于是，使用GHA进行图像压缩的算法流程如下：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/gha_alg.png" class="" title="gha_alg"><p>对于训练结果的评价指标，我们定义损失函数 <span class="math display">\[\mathcal{L}(\boldsymbol{W}, \boldsymbol{Q}) = \sum_{i = 1}^k ||\boldsymbol{w}_i - \boldsymbol{q}_i||^2 = ||\boldsymbol{W} - \boldsymbol{Q}||_F^2\]</span> 及向量夹角 <span class="math display">\[\mathcal{A}(\boldsymbol{w}_i, \boldsymbol{q}_i) = \arccos \left(  \frac{\boldsymbol{w}_i \cdot \boldsymbol{q}_i}{|| \boldsymbol{w}_i ||_2 \cdot ||\boldsymbol{q}_i||_2} \right)\]</span> 由于该算法的收敛速度较为不可控，因此这里我们仅使用网络提取前两个主成分。我们使用正态分布 <span class="math inline">\(\mathcal{N}(0, 0.5)\)</span> 随机初始化了权重矩阵，并设置学习率 <span class="math inline">\(\eta = 10^{-4}\)</span> 进行了两次模拟，每次对网络进行了 <span class="math inline">\(20000\)</span> 次训练迭代。两次迭代过程中Loss和向量夹角的变化情况如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/gha_pca_exp1.png" class="" title="gha_pca_exp1"><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/gha_pca_exp2.png" class="" title="gha_pca_exp2"><p>可以发现，随着权重矩阵初始值的不同，网络的收敛特征也会随之发生变化。</p><p>使用神经网络算法进行模型训练时一个经典的问题即为学习率过大。事实上，在训练该模型的过程中，我们同样遇到了这一问题，并且固定的学习率很难保证适合整个损失超平面。为此，研究者提出了适用于GHA的自适应学习率优化方法。由于该方法实现过于复杂，在此仅作为了解。</p><h3 id="kernel-pca">Kernel PCA</h3><p>由PCA的推导过程我们可以看出，要对一个数据集使用PCA方法进行降维的一大前提即为数据集必须在当前维度下线性可分，而类似图像这样高度紧凑的数据集通常会出现线性不可分的问题。在这种情况下，我们通常会尝试使用一个映射 <span class="math inline">\(\phi: \mathbb{R}^n \to \mathbb{R}^d, d &gt; n\)</span> 将数据集映射到更高维度的特征空间，使得其在该空间下线性可分，该方法被称为<strong>核方法（Kernel Method）</strong>。利用核方法，我们可以对朴素的PCA方法进行改进，使其能够表达更多的原始特征，这就形成了所谓的<strong>核主成分分析（Kernel PCA）</strong>。</p><p>若设图像矩阵为 <span class="math inline">\(\boldsymbol{X}\)</span>，非线性映射 <span class="math inline">\(\phi(\boldsymbol{X})\)</span> 对应的核函数 <span class="math inline">\(\boldsymbol{K} = \phi(\boldsymbol{X})^T \phi(\boldsymbol{X})\)</span>，特征空间为 <span class="math inline">\(\mathcal{F}\)</span>，则特征空间中的协方差矩阵就可以写为 <span class="math display">\[\boldsymbol{C}_{\mathcal{F}} = \frac{1}{N} \phi(\boldsymbol{X}) (\phi(\boldsymbol{X}))^T\]</span> 其特征值问题的方程 <span class="math inline">\(\boldsymbol{C}_{\mathcal{F}} \boldsymbol{v} = \lambda \boldsymbol{v}\)</span> 就可以写为 <span class="math display">\[\sum_{i = 1}^N \phi(\boldsymbol{x}_i) \phi(\boldsymbol{x}_i)^T \boldsymbol{v} = \lambda \boldsymbol{v}\]</span> 由此我们发现其每一个特征向量 <span class="math inline">\(\boldsymbol{v}_j\)</span> 都可以表示为 <span class="math inline">\(\phi(\boldsymbol{x}_i)\)</span> 的线性组合 <span class="math display">\[\boldsymbol{v} = \sum_{i = 1}^N a_i \phi(\boldsymbol{x}_i) = \phi (\boldsymbol{X}) \boldsymbol{a}\]</span> ，其中 <span class="math inline">\(\boldsymbol{a} = (a_1, \cdots, a_N)^T\)</span>。 引入核函数，化简即可得到 <span class="math display">\[\boldsymbol{K}(\boldsymbol{X}) \boldsymbol{a} = \lambda \boldsymbol{a}\]</span> ，也即经过特征空间所得的降维变换向量即为矩阵 <span class="math inline">\(\boldsymbol{K}\)</span> 的特征向量。</p><p>使用Kernel PCA进行图像压缩时所涉及的变换如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/kernel_pca.png" class="" title="kernel_pca"><p>通常来说，核函数要求矩阵为正定矩阵。在本文中，我们实现了以下几种核函数：</p><ul><li><strong>线性核（Linear Kernel）</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \boldsymbol{x}^T \boldsymbol{y}\]</span></p><ul><li><strong>多项式核（Polynomial Kernel）</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \left( \boldsymbol{x}^T \boldsymbol{y} + c \right)^d\]</span></p><ul><li><strong>高斯核（Gaussian Kernel/Radial Basis Function Kernel）</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \exp \left( - \frac{|| \boldsymbol{x} - \boldsymbol{y} ||^2}{2 \sigma^2} \right) = \exp \left( - \gamma || \boldsymbol{x} - \boldsymbol{y} ||^2 \right)\]</span></p><ul><li><strong>指数核（Exponential Kernel）</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \exp \left( - \frac{|| \boldsymbol{x} - \boldsymbol{y} ||}{2 \sigma^2} \right) = \exp \left( - \gamma || \boldsymbol{x} - \boldsymbol{y} || \right)\]</span></p><ul><li><strong>ANOVA核</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \exp \left( -\sigma \left( \boldsymbol{x}^k - \boldsymbol{y}^k \right)^2 \right)^d\]</span></p><ul><li><strong>Sigmoid核</strong></li></ul><p><span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) = \tanh \left( a \boldsymbol{x}^T \boldsymbol{y} + r \right)\]</span></p><p>对于部分核函数，我们还需要给定合适的超参数以达到最好的特征提前效果。以高斯核为例，我们采用网格搜索的方式来选取合适的超参数 <span class="math inline">\(\gamma\)</span>。图像的重构误差随 <span class="math inline">\(\gamma\)</span> 的变化如下图所示：（左一）</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/rbf_param.png" class="" title="rbf_param"><p>可以看到，随着 <span class="math inline">\(\gamma\)</span> 值的增大，图像的重构误差逐渐减少。然而这并不意味着 <span class="math inline">\(\gamma\)</span> 值越大越好，这是由于当 <span class="math inline">\(\gamma\)</span> 值过大时，模型会出现<strong>过拟合（overfitting）</strong>的问题。具体来说，当 <span class="math inline">\(\gamma\)</span> 值过大时，核函数 <span class="math display">\[\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y}) \approx\left\{\begin{aligned}&amp;e^0 = 1 &amp;,\boldsymbol{x} = \boldsymbol{y} \\&amp;e^{-\infty} = 0 &amp;,\boldsymbol{x} \neq \boldsymbol{y}\end{aligned}\right.\]</span> ，此时核矩阵退化为 <span class="math inline">\(\boldsymbol{I}_n\)</span>，也即单位变换。这就导致了降维空间成为原空间的一个子空间，自然就失去了特征提取的功能。</p><p>若设核矩阵 <span class="math inline">\(\boldsymbol{K}\)</span> 的前 <span class="math inline">\(k\)</span> 个特征值为 <span class="math inline">\(\lambda_1, \cdots, \lambda_k\)</span>，我们定义其方差（该指标衡量了特征值的分散程度）为 <span class="math display">\[Var(\lambda_1, \cdots, \lambda_k) = \frac{1}{k} \sum_{i = 1}^k \left(\lambda_i - \bar{\lambda} \right)^2\]</span> ，则核矩阵方差及核矩阵行列式的值如图所示（上图左二、左三）。易见当 <span class="math inline">\(\gamma \gg 10^{-3}\)</span> 时，核矩阵的方差趋近于 <span class="math inline">\(0\)</span>，其行列式趋近于 <span class="math inline">\(1\)</span>，这也印证了上述的理论论述，表明模型确实出现了过拟合。</p><p>可以看到，由于核函数基本都为非线性函数，其逆变换通常难以求得。因此使用核方法对数据集进行降维的一个很大的问题在于对数据集进行重构，这对于图像压缩问题来说是十分不友好的。</p><p>若设 <span class="math inline">\(\mathcal{H}_K\)</span> 为核 <span class="math inline">\(\boldsymbol{K}(\boldsymbol{x}, \boldsymbol{y})\)</span> 所生成的再生希尔伯特核空间，其对应的特征变换 <span class="math inline">\(\phi(\boldsymbol{x}): \mathbb{R}^n \to \mathcal{H}_k\)</span>，则图像重构问题即为给定 <span class="math inline">\(\mathcal{H}_K\)</span> 中的一点 <span class="math inline">\(\boldsymbol{\Psi}\)</span>，求输入空间中的一点 <span class="math inline">\(\boldsymbol{z} \in \mathbb{R}^n\)</span>，使得 <span class="math display">\[\boldsymbol{z} = \mathop{\arg\min}_{\boldsymbol{z}} || \boldsymbol{\Psi} - \phi (\boldsymbol{z}) ||^2\]</span> 事实上自Kernel PCA被提出以来，已经有大量的研究提出了一系列对KPCA降维后数据进行重构的方法，这些方法大多都是基于近似拟合的方法。其中，基于<strong>梯度下降（Gradient Descent）</strong>的方法和基于<strong>回归（Regression）</strong>的方法是两大较为有代表性的求解方法。由于这一过程实现过于复杂，我们直接使用了Scikit-Learn工具包中提供的<strong>inverse_transform()</strong>函数来完成。</p><p>使用Kernel PCA进行图像压缩的算法流程如下：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/kpca_alg.png" class="" title="kpca_alg"><p>以高斯核为例，在选择了不同主成分个数时，使用Kernel PCA算法进行图像压缩的效果结果如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/kernel_pca_pic.png" class="" title="kernel_pca_pic"><p>可以发现，与朴素PCA方法不同，当选择的主成分个数为10时图像的主要特征仍然没有得到恢复，而当 <span class="math inline">\(k=50\)</span> 时，图像的质量得到了极大的改善。这也表明经过变换后的数据集在核空间下的特征分离方式与原空间下是不同的。</p><h3 id="jpeg">JPEG</h3><p>上面使用的几种图像压缩算法均为即为基于PCA的方法。事实上，在日常场景下，人们更常使用基于信号处理和特殊编码的方法来对图像进行压缩。其中较为典型的代表即为基于离散余弦变换的<strong>JPEG（JFIF）算法</strong>。</p><p>JPEG图像压缩算法的具体流程如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/jpeg_pipeline.png" class="" title="jpeg_pipeline"><p>压缩算法主要分为如下几个步骤：</p><ul><li><p><span class="math inline">\(RGB \to YC_bC_r\)</span> <strong>空间转换</strong></p></li><li><p><strong>下采样</strong></p></li><li><p><strong>图像分割</strong></p></li><li><p><strong>离散余弦变换</strong></p></li><li><p><strong>数据量化</strong></p></li><li><p><strong>Huffman编码</strong></p></li></ul><p>使用JPEG算法进行图像压缩的效果结果如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/jpeg_pic.png" class="" title="jpeg_pic"><p>可以看到，尽管JPEG为有损压缩算法，重构后的图片与原图几乎看不到可见的差异，这也从一定程度上解释了该算法流行的原因。</p><p>事实上，近年来的许多压缩方法还会将JPEG算法及其变体JPEG2000与PCA方法相结合，从而进一步提高压缩率及重构的准确率。例如在高光谱成像领域，由于原始图像通常还会附带许多频谱信息，将这两种方法相结合可以极大的压缩存储图像所需的空间，从而减少数据传输的开销。</p><h2 id="实验结果">实验结果</h2><p>前文中我们提及了一系列图像压缩的方法，现在我们从<strong>压缩率</strong>、<strong>重构质量</strong>和压缩耗时三个维度来对上述提及的所有方法进行分析和比较。</p><p>图像的压缩率被定义为 <span class="math display">\[\eta = 1 - \frac{\textrm{Size}(\tilde{\boldsymbol{X}}) + \textrm{Size}(\boldsymbol{Q})}{\textrm{Size}(\boldsymbol{X})}\]</span> ，其中 <span class="math inline">\(\textrm{Size}(\boldsymbol{A})\)</span> 为 <span class="math inline">\(\boldsymbol{A}\)</span> 的空间度量，<span class="math inline">\(\boldsymbol{X}\)</span> 为原始图像，<span class="math inline">\(\tilde{\boldsymbol{X}}\)</span> 为重构图像，<span class="math inline">\(\boldsymbol{Q}\)</span> 为重构变换矩阵。</p><p>以 <span class="math inline">\(k = 50\)</span> 为例，本文中实现的不同算法的压缩率如下表所示：</p><table><thead><tr class="header"><th>压缩算法</th><th>单张图片压缩率</th><th>100张图片压缩率</th><th>300张图片压缩率</th></tr></thead><tbody><tr class="odd"><td>PCA</td><td><span class="math inline">\(60.94\%\)</span></td><td><span class="math inline">\(60.94\%\)</span></td><td><span class="math inline">\(60.94\%\)</span></td></tr><tr class="even"><td>2DPCA</td><td><span class="math inline">\(60.94\%\)</span></td><td><span class="math inline">\(80.27\%\)</span></td><td><span class="math inline">\(80.40\%\)</span></td></tr><tr class="odd"><td>2D-2DPCA</td><td><span class="math inline">\(41.41\%\)</span></td><td><span class="math inline">\(80.08\%\)</span></td><td><span class="math inline">\(80.34\%\)</span></td></tr><tr class="even"><td>Kernel PCA</td><td><span class="math inline">\(60.94\%\)</span></td><td><span class="math inline">\(60.94\%\)</span></td><td><span class="math inline">\(60.94\%\)</span></td></tr><tr class="odd"><td>JPEG</td><td><span class="math inline">\(84.54\%\)</span></td><td><span class="math inline">\(86.09\%\)</span></td><td><span class="math inline">\(87.22\%\)</span></td></tr></tbody></table><p>可以发现，朴素PCA和Kernel PCA对单张图片计算主成分，因此其在单张图片和多张图片上的压缩率相同；而2DPCA和2D-2DPCA由于对整个数据集计算特征，因此随着数据集的增长，总体的图像压缩率逐渐增长。JPEG在所有算法中拥有最高的压缩率。</p><p>对于重构质量，我们使用<strong>均方误差（Mean Square Error）</strong>和<strong>峰值信噪比（Peak Signal-to-Noise Ratio）</strong>来进行评估。其中，原始图像 <span class="math inline">\(\boldsymbol{X}\)</span> 和重构图像 <span class="math inline">\(\tilde{\boldsymbol{X}}\)</span> 间的均方误差被定义为 <span class="math display">\[\textrm{MSE}(\boldsymbol{X}, \tilde{\boldsymbol{X}}) = \frac{1}{N^2} \sum_{i = 1}^N \sum_{j = 1}^N (x_{ij} - \tilde{x}_{ij})^2\]</span> 其之间的峰值信噪比被定义为 <span class="math display">\[\textrm{PSNR}(\boldsymbol{X}, \tilde{\boldsymbol{X}}) = 10 \cdot \log_{10} \left( \frac{\textrm{MAX}_{\boldsymbol{X}}^2}{\textrm{MSE}(\boldsymbol{X}, \tilde{\boldsymbol{X}})}\right)\]</span> ，其中 <span class="math inline">\(\textrm{MAX}_{\boldsymbol{X}}\)</span> 为矩阵 <span class="math inline">\(\boldsymbol{X}\)</span> 每个元素可能的最大值（对于一张 <span class="math inline">\(8\)</span> 位图像即为 <span class="math inline">\(255\)</span>）。</p><p>当 <span class="math inline">\(k\)</span> 为 <span class="math inline">\(50\)</span> 时，使用不同算法进行压缩重构后得到的MSE和PSNR值由下表给出：</p><table><thead><tr class="header"><th>压缩算法</th><th>MSE</th><th>PSNR</th></tr></thead><tbody><tr class="odd"><td>PCA</td><td><span class="math inline">\(47.8774\)</span></td><td><span class="math inline">\(31.3295\)</span></td></tr><tr class="even"><td>2DPCA</td><td><span class="math inline">\(76.1444\)</span></td><td><span class="math inline">\(29.3144\)</span></td></tr><tr class="odd"><td>2D-2DPCA</td><td><span class="math inline">\(90.1605\)</span></td><td><span class="math inline">\(28.5806\)</span></td></tr><tr class="even"><td>Kernel PCA</td><td><span class="math inline">\(11.1868\)</span></td><td><span class="math inline">\(37.6437\)</span></td></tr><tr class="odd"><td>JPEG</td><td><span class="math inline">\(53.2189\)</span></td><td><span class="math inline">\(30.8701\)</span></td></tr></tbody></table><p>更进一步的，当主成分选择数 <span class="math inline">\(k\)</span> 从 <span class="math inline">\(1\)</span> 上升到 <span class="math inline">\(200\)</span> 的过程中，不同算法的重构质量如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/reconstruct_quality.png" class="" title="reconstruct_quality"><p>可以看到，在所有实现的方法中，Kernel PCA在两项指标中均获得了最好的结果。然而，由于其重构变换使用了近似的方法，这一过程并不稳定，因此其误差曲线出现了一定程度的波动。相比较而言，一般的PCA方法两项评价指标随主成分选择数增加的变化十分稳定。</p><p>最后我们来考察不同压缩算法的压缩耗时。压缩耗时的计算公式被定义为 <span class="math display">\[\mathcal{T} = \mathcal{T}_{Compress} + \mathcal{T}_{Reconstruct}\]</span> 其中 <span class="math inline">\(\mathcal{T}_{Compress}\)</span> 为编码耗时，<span class="math inline">\(\mathcal{T}_{Reconstruct}\)</span> 重构耗时。</p><p>不同算法随着待压缩的图片总量从单张到 <span class="math inline">\(100\)</span> 张所用的时间如下图所示：</p><img src="/2021/11/29/machine-learning/dase-alg-exp-pca/time.png" class="" title="time"><p>可以发现，基于特征分解的朴素PCA算法随着数据集的增长进行压缩所用的时间迅速的增大，这是由于其计算协方差矩阵的特征值和特征向量的巨额时间开销。基于奇异值分解的PCA算法由于使用了更为高效的Householder变换算法，其耗时相比特征值分解得到了显著的下降。在我们的实现中，Kernel PCA同样使用了SVD方法进行优化，但其时间开销仍然十分巨大，表明其主要耗时在图像重构上。2DPCA和2D-2DPCA由于对整个数据集进行统一变换，因此在多张图像数据集上拥有极高的压缩效率。</p><h2 id="结论">结论</h2><p>在本实验中，我们完整推导并实现了<strong>基于特征值分解的 PCA 算法</strong>、基于奇异值分解的 PCA 算法、<strong>基于 GHA 的 PCA 算法</strong>、<strong>2DPCA 算法</strong>、<strong>2D-2DPCA 算法</strong>、<strong>Kernel PCA 算法</strong>及 <strong>JPEG 算法</strong>，并将它们应用于图像压缩任务中。经过比较我们可以发现，在不同的度量标准下， 不同的算法均有着相应的优势和劣势。一般的 PCA 算法具有较好的稳定性和可解释性，2DPCA 和 2D-2DPCA 算法拥有较高的压缩效率，Kernel PCA 算法拥有较高的重构精度。这也表明这些 方法没有严格的好坏之分，在不同任务下需要根据实际情况选择合适的方法。</p><h2 id="参考文献">参考文献</h2><ol type="1"><li>Daniel Báscones, Carlos González, and Daniel Mozos. Hyperspectral image compression using vector quantization, pca and jpeg2000. Remote sensing, 10(6):907, 2018.</li><li>Liang-Hwa Chen and Shyang Chang. An adaptive learning algorithm for principal component analysis. IEEE Transactions on Neural Networks, 6(5):1255–1263, 1995.</li><li>COMP-652 and ECSE-608. Dimensionality reduction. pca. kernel pca. https://www.cs.mcgill.ca/~dprecup/courses/ML/Lectures/ml-lecture13.pdf, 2016.</li><li>Alberto García-González, Antonio Huerta, Sergio Zlotnik, and Pedro Díez. A kernel principal component analysis (kpca) digest with a new backward mapping (pre-image reconstruction) strategy, 2021.</li><li>Matt Gormley. Deriving principal component analysis (pca). https://www.cs.cmu. edu/~mgormley/courses/606-607-f18/slides606/lecture11-pca.pdf, October 2018.</li><li>R.B. Lehoucq. The computation of elementary unitary matrices. Technical report, University of Tennessee, 1994.</li><li>Graphics Mill. Working with jpeg. https://www.graphicsmill.com/docs/gm/ working-with-jpeg.htm.</li><li>Sebastian Mika, Bernhard Schölkopf, Alex Smola, Klaus-Robert Müller, Matthias Scholz, and Gunnar Rätsch. Kernel pca and de-noising in feature spaces. In M. Kearns, S. Solla, and D. Cohn, editors, Advances in Neural Information Processing Systems, volume 11. MIT Press, 1999.</li><li>Erkki Oja. Simplified neuron model as a principal component analyzer. Journal of mathematical biology, 15(3):267–273, 1982.</li><li>Terence D. Sanger. Optimal unsupervised learning in a single-layer linear feedforward neural network, 1989.</li><li>Bernhard Schölkopf, Alexander Smola, and Klaus-Robert Müller. Nonlinear component analysis as a kernel eigenvalue problem. Neural Computation, 10(5):1299–1319, 1998.</li><li>Wikipedia contributors. Jpeg — Wikipedia, the free encyclopedia. https://en.wikipedia.org/w/index.php?title=JPEG&amp;oldid=1056557277, 2021. [Online; accessed 23-November-2021].</li><li>Wikipedia contributors. Singular value decomposition — Wikipedia, the free encyclopedia. https://en.wikipedia.org/w/index.php?title=Singular_value_decomposition&amp;oldid=1055826758, 2021. [Online; accessed 24-November-2021].</li><li>Chih-Wen Wang and Jyh-Horng Jeng. Image compression using pca with clustering. In 2012 International Symposium on Intelligent Signal Processing and Communications Systems, pages 458–462, 2012.</li><li>Frank Wood. http://www.stat.columbia.edu/~fwood/Teaching/w4315/Fall2009/pca.pdf, December 2009.</li><li>Jason Weston, Bernhard Schölkopf, and Gökhan Bakir. Learning to find pre-images. In S. Thrun, L. Saul, and B. Schölkopf, editors, Advances in Neural Information Processing Systems, volume 16. MIT Press, 2004.</li><li>Jian Yang, D. Zhang, A.F. Frangi, and Jing yu Yang. Two-dimensional pca: a new approach to appearance-based face representation and recognition. IEEE Transactions on Pattern Analysis and Machine Intelligence, 26(1):131–137, 2004.</li><li>Daoqiang Zhang and Zhi-Hua Zhou. (2d)2pca: Two-directional two-dimensional pca for eﬀicient face representation and recognition. Neurocomputing, 69(1):224–231, 2005. Neural Networks in Signal Processing.</li><li>周志华. 机器学习. 清华大学出版社, 2016.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;
&lt;p&gt;图像压缩一直是图像处理中一个重要的任务，一个好的图像压缩算法可以大大降低存储和传输代价。主成分分析（Principal Component Analysis）作为一个经典的降维方法，已经在图像压缩领域得到了极为广泛的运用。在本文中，我</summary>
      
    
    
    
    <category term="数据科学算法基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Machine-Learning" scheme="http://gonggongjohn.me/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>寻宝游戏(MongoDB)</title>
    <link href="http://gonggongjohn.me/2021/10/08/database/db-assignment-1/"/>
    <id>http://gonggongjohn.me/2021/10/08/database/db-assignment-1/</id>
    <published>2021-10-08T02:00:00.000Z</published>
    <updated>2021-12-10T05:51:04.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验要求">实验要求</h2><p>考虑以下游戏场景：</p><p>每个游戏玩家都有一定数量的金币、宝物。有一个市场供玩家们买卖宝物。玩家可以将宝物放到市场上挂牌，自己确定价格。其他玩家支付足够的金币，可购买宝物。</p><p>宝物分为两类:一类为工具，它决定持有玩家的工作能力;一类为配饰，它决定持有玩家的运气。</p><p>每位玩家每天可以通过寻宝获得一件宝物，宝物的价值由玩家的运气决定。每位玩家每天可以通过劳动赚取金币，赚得多少由玩家的工作能力决定。（游戏中的一天可以是现实中的 1 分钟、5 分钟、10 分钟，自主设定。）</p><p>每个宝物都有一个自己的名字（尽量不重复）。每位玩家能够佩戴的宝物是有限的（比如一个玩家只能佩戴一个工具和两个配饰）。多余的宝物被放在存储箱中，不起作用，但可以拿到市场出售。</p><p>在市场上挂牌的宝物必须在存储箱中并仍然在存储箱中，直到宝物被卖出。挂牌的宝物可以被收回，并以新的价格重新挂牌。当存储箱装不下时，运气或工作能力值最低的宝物将被系统自动回收。</p><p>假设游戏永不停止而玩家的最终目的是获得最好的宝物。</p><p>请根据以上场景构建一个假想的 Web 游戏，可供多人在线上玩耍。后台的数据库使用 MongoDB。对游戏玩家提供以下几种操作：寻宝（可以自动每天一次）、赚钱（可以自动每天一 次）、佩戴宝物、浏览市场、买宝物、挂牌宝物、收回宝物。</p><h2 id="实验过程">实验过程</h2><h3 id="网站构架">网站构架</h3><p>本次寻宝游戏网站的整体构架如下图所示。</p><figure><img src="system_structure.png" alt="system_structure" /><figcaption aria-hidden="true">system_structure</figcaption></figure><p>由于游戏平台通常会由多个不同的模块构成，且需要不断的迭代和集成，因此我们采用了前后端分离的架构来设计网站。整个网站分为 四个部分，分别为前端维生服务器、前端页面、后端请求服务器及服务器数据库。</p><p>对于前端维生服务器，我们使用了基于 NodeJS 的经典 Web 服务器维持框架 Express。这一 框架提供了一个快速的 Web 应用搭建流程，我们只需要直接将前端页面框架生成的相关资源统 一放在相应的位置，Express 就会帮我们自动托管之后的服务器维持事务。</p><p>对于前端页面，我们使用了经典的 Vue 3 框架来进行搭建。这一框架提供了一整套完善的 UI 及前后端交互流程，可以十分清晰的梳理出各个模块之间的继承及通信关系，方便后续维护。对于 UI 样式，我们使用了基于 Vue 3 的 Quasar Framework 2 框架，这一框架支持流式数据加载 及响应式的交互访问，可以吸引用户访问并使用该平台。</p><p>由于需要应对各种不同的情况，后端服务器由多个模块联合构成。首先，我们使用了 Flask 作为容器实现框架，并通过蓝图（Blueprint）功能将接口分摊至五个子接口集合上以实现业务隔离。随后，由于我们使用了前后端分离架构，自然会涉及到跨域问题。因此我们在请求处理接口 上加上了一层 CORS 包装器。最后，为了应对高并发请求，我们使用了 Gunicorn 网关容器对全 应用进行了封装，并对 Flask 开启了多线程支持。这样在面对高并发请求时系统可以较为均衡的分摊整个负载。</p><p>本次实验使用了 MongoDB 作为服务器存储数据库。作为一个文档型数据库，其类 Json 格 式的数据管理模型更贴近 Web 交互时的数据格式，这使得我们在后续在设计接口数据协议时更为方便。</p><h3 id="数据库设计">数据库设计</h3><h4 id="内嵌存储-v.s-归一化存储">内嵌存储 v.s 归一化存储</h4><p>对于当前应用，我们主要需要存储以下几种数据:系统中可用的宝物及其价值、用户的各种 基本信息、用户正在佩戴的物品、用户当前拥有的物品、市场上正在出售的宝物。</p><p>对于文档型数据库，一个最直接的想法便是将所有的用户数据全部存储在同一个集合中。因此，对于当前应用，一个可能的数据库设计如下图所示。</p><figure><img src="embed_db.png" alt="embed_db" /><figcaption aria-hidden="true">embed_db</figcaption></figure><p>其中，用户已佩戴的物品及储物箱中的物品被以数组的形式嵌入用户集合中。这样做的好处是在每次用户访问其拥有物品 时，我们始终能够以 <span class="math inline">\(O(1)\)</span> 的代价（获取到用户文档之后）完成对用户物品查询。然而，当用户想要变更物品的状态时，系统就需要遍历整个数组以找到对应的物品，此时其时间开销便会变得极为糟糕，在最坏情况下甚至能达到 <span class="math inline">\(O(n)\)</span>（获取到用户文档之后），且索引功能很难帮助优化这 一查询代价。此外，这一存储方式会带来大量的数据冗余，且由于宝物的全部信息均被存储在了用户表中，当系统要对宝物信息进行更新时，就需要对所有集合中的所有玩家的每一条宝物数据进行遍历，当用户规模较大时，这一代价将变得十分巨大，且此时可能出现数据不一致的问题， 破坏了数据库的 ACID 原则。</p><p>在数据库设计中，我们通常还会尽可能的让同一数据在所有集合中尽可能只保留一份以减少数据冗余，即所谓的存储归一化（Storage Normalization）。在这种模式下，数据库可以以下图所示的方式设计。</p><figure><img src="normalize_db.png" alt="normalize_db" /><figcaption aria-hidden="true">normalize_db</figcaption></figure><p>这样做的好处是极大的减少了数据冗余，且从灾备的角度来看， 即使发生了数据丢失，由于宝物和用户的信息是单独存储的，其数据损失的概率也相对较小。此外，当宝物状态需要发生改变时，我们只需要移动其唯一标识即可进行更改，数据移动的开销较小。然而，由于宝物与用户的信息发生了分离，对于用户的每一件物品，我们都需要至少访问两个集合才能获取到所有需要的数据，而访问不同的集合对于 MongoDB 而言开销是巨大的，因此对于本应用来说仍然不是一个合适的选择。</p><h4 id="缓存型存储">缓存型存储</h4><p>为了解决上面两种方式的问题，对于本应用，我们采用了一种称为缓存型存储（或存储反归一化， Storage Denormalization）的思想来设计本应用的数据库结构。与直接存储不同的是，缓存 型存储是先将数据进行归一化，随后再将数据以最适合访问的方式进行冗余缓存，这样既保证了数据修改时的数据一致性，又使得数据能以较高的效率被访问。 本应用的数据库集合设计如下图所示。</p><figure><img src="denormalize_db.png" alt="denormalize_db" /><figcaption aria-hidden="true">denormalize_db</figcaption></figure><p>其中，用户集合包含了用户的全部基本信息，而宝物集合则维护了当前系统中能够被提供的全部宝物信息。持有物品集合中存储了所有玩家所拥有的物品及其相关状态，其在本应用中既用作玩家存储箱信息的维护，也用作市场上物品信息的维护。此外，根据实际的查询需求，我们对宝物集合的 gain 键建立了索引，对持有物品集合的 owner 和 status 两个键分别建立了索引。</p><p>更具体的，每个集合中各个键的数据类型定义如下表所示。</p><figure><img src="table_db_structure.png" alt="table_db_structure" /><figcaption aria-hidden="true">table_db_structure</figcaption></figure><p>这里需要注意的是，对于用户的头像，我们使用了一个对象标识符类型将其指向一个外部的位置。由于 MongoDB 采用了 BSON 作为其文档存储实现，其最大单个文档的大小限制为 4MB。而若要将用户头像这样的二进制数据直接存储在单个文档中，则很容易超过这一限制导致无法存储。为了解决这一问题，MongoDB 提供了一个名为 GridFS 的存储方案。通过将二进制文件拆分为多 个小块（Chunk，通常为 256KB/个），我们便可以将图片等媒体数据存储在数据库中。因此事实上该应用一共有 5 个集合，额外的两个集合（分别名为 fs.chunks 和 fs.files）分别用于存储 大文件的二进制数据及其块索引。</p><p>作为归一化集合，当数据进行更新时，用户集合和宝物集合拥有最高的更新优先级。持有物品集合作为本应用的缓存集合，包含了玩家可能频繁访问的全部物品数据。因此无论玩家是在访问自己的装备物品、存储箱还是市场上正在出售的物品时，我们都只需要访问持有物品这一个集合，极大地提高了数据查询的效率。</p><p>此外，为了保证数据一致性，在每一次应用启动时，系统都会对缓存集合中的数据进行检查。 由于缓存集合中记录了其他集合相关条目的唯一标识符，因此这一同步是可行的。当管理员需要进行某些更新(例如对某件宝物的属性进行调整时)，系统也会先更新宝物和用户集合，再将数据同步至持有物品集合中。</p><p>可以注意到，这里我们没有单独为市场设计一个缓存集合，这是由于用户查询市场上的物品就等价于查询所有玩家中 status=3 的物品，而我们已经对持有物品集合中的 status 键建立了索引，这一查询的效率是极高的，因此无需再另设一个集合专门对市场上的物品进行缓存。此外， 若再设一个缓存集合，则需要花费更高的代价去解决数据不一致的问题，得不偿失，可见这样做是并不合适的。</p><h4 id="odm-与数据库交互实现">ODM 与数据库交互实现</h4><p>MongoDB 提供了对 Python 的原生访问接口模块 pymongo。通过这一模块，我们可以使用和 命令行中类似的类 JSON 方式对数据库中的对象进行 CRUD（Create-Retrieve-Update-Delete）操作。然而，由于其没有与 Python 中对象的直接映射关系，我们无法快速获知当前操作对数据库及 Python 对象进行了怎样的数据变化，这样很容易使得操作逻辑变得不可控（尤其是考虑到文档型数据库中可以动态加入键值的特性）。</p><p>受到 MySQL 等关系型数据库中 ORM 概念的启发，对于对象型编程语言与数据库间的交互，一个极好的办法便是实用所谓的对象-文档映射（ODM，Object Document Mapping）模型。 通过将数据库中的对象映射为 Python 中的类，我们便可以直接使用 Python 中的类操作方法对数据库中的对象进行操作。由于每一个数据库文档中的键都与对象中的一个变量有一一对应关系，我们便可以随时掌握当前操作的内容及其可能的行为，这样就使得整个系统更易于维护。</p><p>幸运的是，对于 MongoDB，Python 中已经存在了一款十分完善的 ODM 实现模块 Mongo-Engine。对于本应用，我们直接使用专门针对 Flask 框架封装的 Flask-MongoEngine 来实现对应的 ODM 模型。对于上述提出的集合结构，其 ODM 模型申明代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">db.Document</span>):</span><br>username = db.StringField(required=<span class="hljs-literal">True</span>)<br>password = db.StringField(required=<span class="hljs-literal">True</span>)<br>nickname = db.StringField()<br>permission = db.IntField(default=<span class="hljs-number">1</span>) <span class="hljs-comment"># 1 - Player; 2 - Admin</span><br>  avatar = db.FileField()<br>coin = db.IntField(default=<span class="hljs-number">10</span>)<br>power = db.IntField(default=<span class="hljs-number">1</span>)<br>luck = db.IntField(default=<span class="hljs-number">1</span>)<br>regtime = db.DateTimeField(default=datetime.now()) tool_equipped = db.IntField(default=<span class="hljs-number">0</span>)<br>accessory_equipped = db.IntField(default=<span class="hljs-number">0</span>)<br>container_usage = db.IntField(default=<span class="hljs-number">0</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Treasure</span>(<span class="hljs-params">db.Document</span>):</span><br>name = db.StringField(required=<span class="hljs-literal">True</span>)<br>type = db.IntField(required=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 1 - Tools; 2 - Accessories</span><br>  gain = db.IntField()<br>meta = &#123;<br><span class="hljs-string">&#x27;indexes&#x27;</span>: [ <span class="hljs-string">&#x27;gain&#x27;</span><br>] &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Container</span>(<span class="hljs-params">db.Document</span>):</span><br>treasure_id = db.ObjectIdField(required=<span class="hljs-literal">True</span>)<br>treasure_name = db.StringField()<br>treasure_type = db.IntField()<br>treasure_gain = db.IntField()<br>owner = db.ObjectIdField(required=<span class="hljs-literal">True</span>)<br>owner_name = db.StringField()<br>status = db.IntField() <span class="hljs-comment"># 1 - Equipped; 2 - In inventory; 3 - On sale</span><br>  price = db.IntField() <span class="hljs-comment"># Only exists when status = 3</span><br>meta = &#123;<br><span class="hljs-string">&#x27;indexes&#x27;</span>: [ <span class="hljs-string">&#x27;owner&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span><br>] &#125;<br></code></pre></td></tr></table></figure><p>在该种映射模型下，数据库的 CRUD 操作变得异常简单。下面以用户表的一次 CRUD 操作 代码为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">user_create = User(username=username, password=password) <span class="hljs-comment"># Create</span><br>user_item = User.objects(username=username).first() <span class="hljs-comment"># Retrieve</span><br>user_item.nickname = abc <span class="hljs-comment"># Update</span><br>user_item.delete() <span class="hljs-comment"># Delete</span><br>user_create.save() <span class="hljs-comment"># Save</span><br></code></pre></td></tr></table></figure><h3 id="业务实现">业务实现</h3><h4 id="账户管理">账户管理</h4><p>对于玩家来说，一款游戏的账户管理系统主要涉及用户注册及用户登录两个功能，因此我们分别设计两个接口/register 及/login 来完成这一交互逻辑。</p><p>首先我们来设计注册接口。当用户发起注册请求时，我们首先从请求中拿到用户所要注册的用户名和密码，随后使用 MongoEngine 提供的查询语句查询数据库中用户名是否已经存在。若用户名不存在，则向数据库的 User 文档集合中插入一条新的用户文档，否则则报错。为了方便后续维护，我们约定/register 接口的返回状态码如下：</p><figure><img src="register_status.png" alt="register_status" /><figcaption aria-hidden="true">register_status</figcaption></figure><p>对于登录接口，我们首先从 request 请求体中获得用户名及密码，随后使用 MongoEngine 查询数据库中用户名符合的第一条记录（由于在注册时对数据库中是否存在重名用户进行了检查， 因此这里可以保证获得的第一条记录是整个数据库中唯一符合条件的记录）。得到记录后，我们只需要对其密码进行比对，并将判断结果返回给用户（前端）即可。</p><p>同样的，这里我们约定/login 接口的返回状态码如下：</p><figure><img src="login_status.png" alt="login_status" /><figcaption aria-hidden="true">login_status</figcaption></figure><p>对于账户管理页面的前端设计，我们使用了 Layout+Page 的模式对其进行了样式统一，并使 界面尽可能的保持简洁。其效果如下图所示。</p><figure><img src="login_page.png" alt="login_page" /><figcaption aria-hidden="true">login_page</figcaption></figure><figure><img src="register_page.png" alt="register_page" /><figcaption aria-hidden="true">register_page</figcaption></figure><h4 id="session-与用户组">Session 与用户组</h4><p>由于后续的请求中大量涉及到用户验证，若每次都需要在请求体中加入用户名和密码，则后续操作将会变得十分复杂，且由于用户信息始终在端与端之间传输，会造成极大的安全隐患。因此这里我们使用会话（Session）技术来保持用户的登录状态。同时，为了保证请求安全性，我们还需要对 Session 进行加密。</p><p>Flask原生提供了对Session的支持，我们可以直接使用键值对的方式对一个应用中的Session 进行操作。对于本应用，我们对除登录注册外的所有接口都设置了 Session 验证，当检测到用户发来的请求头中没有 Session 信息的话，则会直接返回 100 状态码告诉用户无权访问。</p><p>在实际场景下，有时我们需要对游戏中的内容进行更新操作（如添加新的可用宝物），为了方便这一操作，我们将其引入前端的交互界面中。然而一旦将修改全局数据库的操作暴露在公开接口中，我们就需要开始考虑操作的权限验证问题，否则就有可能产生安全问题。得益于 Session 用户验证机制，我们可以通过设置用户组来对用户的访问权限进行限制。</p><p>对于当前应用，我们进行如下的权限组约定：</p><figure><img src="permission_table.png" alt="permission_table" /><figcaption aria-hidden="true">permission_table</figcaption></figure><p>可以看到，在前面的数据库结构设计中，我们在用户集合中设置了一个 permission 键用于标识用户所在的组。当用户注册完成后，该键默认被设置为 1，且不可通过接口请求的方式进行更改。为了方便统一管理，我们将所有的管理员操作专门放到一个/admin 蓝图中。该蓝图中的所有接口均进行了用户组认证。当用户发起请求时，系统会首先检查请求头 Session 中包含的用户信息，若用户的权限组高于 2，则继续处理用户所请求的操作，否则直接返回用户码 2 告诉用户无权修改服务器。</p><p>对于不同的用户组，前端界面的呈现也进行了一定的区分。其中当用户为管理员时，菜单中会多出一栏管理员界面可供用户进行操作，这与常规游戏中的设计也基本吻合。</p><figure><img src="normal_player_navigate.png" alt="normal_player_navigate" /><figcaption aria-hidden="true">normal_player_navigate</figcaption></figure><figure><img src="command_player_navigate.png" alt="command_player_navigate" /><figcaption aria-hidden="true">command_player_navigate</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验要求&quot;&gt;实验要求&lt;/h2&gt;
&lt;p&gt;考虑以下游戏场景：&lt;/p&gt;
&lt;p&gt;每个游戏玩家都有一定数量的金币、宝物。有一个市场供玩家们买卖宝物。玩家可以将宝物放到市场上挂牌，自己确定价格。其他玩家支付足够的金币，可购买宝物。&lt;/p&gt;
&lt;p&gt;宝物分为两类:一类为工具，它决</summary>
      
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Database" scheme="http://gonggongjohn.me/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业7</title>
    <link href="http://gonggongjohn.me/2021/06/30/dase-math/dase-math-assignment-7/"/>
    <id>http://gonggongjohn.me/2021/06/30/dase-math/dase-math-assignment-7/</id>
    <published>2021-06-30T02:00:00.000Z</published>
    <updated>2022-02-10T14:38:31.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>下面的集合哪些是凸集？</p><ol type="1"><li>平板， 即形如 <span class="math inline">\(\left\{ x \in \mathbb{R}^n | \alpha \leq a^T x \leq \beta \right\}\)</span> 的集合。</li><li>矩形， 即形如 <span class="math inline">\(\left\{ x \in \mathbb{R}^n | \alpha_i \leq x_i \leq \beta_i, i = 1, \cdots, n \right\}\)</span> 的集合。当 <span class="math inline">\(n &gt; 2\)</span> 使，矩形有时也称为超矩形。</li><li>楔形，即 <span class="math inline">\(\left\{ x \in \mathbb{R}^n | a_1^T x \leq b_1, a_2^T x \leq b_2 \right\}\)</span>。</li><li>距离给定点比距离给定集合近的点构成的集合，即</li></ol><p><span class="math display">\[\left\{ x | || x - x_0 ||_2 \leq || x - y ||_2, \forall y \in S \right\}\]</span></p><p>，其中 <span class="math inline">\(S \subseteq \mathbb{R}^n\)</span></p></blockquote><p><strong>(a)</strong> 该集合可写为 <span class="math inline">\(\{x \in \mathbb{R}^n | a^Tx \leq \beta \} \cap \{x \in \mathbb{R}^n | a^Tx &gt; \alpha \}\)</span>，故为一个凸集</p><p><strong>(b)</strong> 该集合可写为一组半空间的交集，故为一个凸集</p><p><strong>(c)</strong> 该集合可写为 <span class="math inline">\(\{x \in \mathbb{R}^n | a_1^T x \leq b_1\} \cap \{x \in \mathbb{R}^n | a_2^T x \leq b_2\}\)</span>，故为一个凸集</p><p><strong>(d)</strong> 该集合可写为 <span class="math display">\[\bigcap_{y \in S} \{x | ||x - x_0||_2 \leq ||x-y||_2 \}\]</span> 故为一个凸集</p><h2 id="二">二</h2><blockquote><p>下面的函数哪些是凸函数? 请说明理由：</p><ol type="1"><li><span class="math inline">\(f(x)=e^{x}+1, x \in \mathbb{R}\)</span></li><li><span class="math inline">\(f(x)=\max \left(\|A x+b\|_{2},\left\|x^{T} A x\right\|_{1}\right), A \in \mathbb{R}^{m \times n} x \in \mathbb{R}^{n} b \in \mathbb{R}^{m}\)</span></li><li><span class="math inline">\(f(x)=-\cos x, x \in[-\pi / 2, \pi / 2]\)</span></li></ol></blockquote><p><strong>(a)</strong> <span class="math display">\[f&#39;(x) = e^x, f&#39;&#39;(x) = e^x &gt; 0, x \in \mathbb{R}\]</span> 故 <span class="math inline">\(f(x)\)</span> 为凸函数</p><p><strong>(b)</strong> 由于仿射映射、仿射函数取范数、取最大值为保凸运算，故 <span class="math inline">\(f(x)\)</span> 为凸函数</p><p><strong>(c)</strong> <span class="math display">\[f&#39;(x) = \sin x, f&#39;&#39;(x) = \cos x \geq 0, x \in [-\frac{\pi}{2}, \frac{\pi}{2}]\]</span> 故 <span class="math inline">\(f(x)\)</span> 为凸函数</p><h2 id="三">三</h2><blockquote><p>证明 <span class="math inline">\(x^* = (1, 0.5, -1)\)</span> 是如下优化问题的最优解： <span class="math display">\[\begin{aligned}&amp;\min &amp;\frac{1}{2} x^T P x + q^T x + r \\&amp;\textrm{s.t} &amp; -1 \leq x_i \leq 1, i = 1,2,3\end{aligned}\]</span> 其中 <span class="math display">\[P = \begin{pmatrix}13 &amp; 12 &amp; -2 \\12 &amp; 17 &amp; 6 \\-2 &amp; 6 &amp; 12\end{pmatrix},q = \begin{pmatrix}-22 \\-14.5 \\13\end{pmatrix},r = 1\]</span></p></blockquote><p>由于 <span class="math inline">\(\nabla f_0 = \frac{1}{2} (P+P^T) x +q = px+q\)</span></p><p>故 <span class="math inline">\(\nabla f_0(x^*) = (-1,0,2)^T\)</span></p><p>因此 <span class="math inline">\(\forall y \in [-1,1]^n\)</span>，<span class="math inline">\(\nabla f_0(x^*)^T(y-x) \geq 0\)</span></p><p>即 <span class="math inline">\(x^*\)</span> 满足最优性条件，也即目标函数的最优点</p><h2 id="四">四</h2><blockquote><p>计算函数 <span class="math inline">\(f(x)\)</span> 的共轭函数，以及共轭函数的定义域：</p><ol type="1"><li><span class="math inline">\(f(x) = - \log x\)</span></li><li><span class="math inline">\(f(x) = e^x\)</span></li></ol></blockquote><p><strong>(a)</strong> 由 <span class="math inline">\(f(x)=- \log x\)</span> 可知 <span class="math inline">\(domf = \{x|x&gt;0\}\)</span></p><p>令 <span class="math inline">\(g(x,y) = xy + \log x\)</span></p><p>当 <span class="math inline">\(y \geq 0\)</span> 时，<span class="math inline">\(\sup g(x,y) = +\infty\)</span></p><p>当 <span class="math inline">\(y &lt; 0\)</span> 时，<span class="math inline">\(\sup g(x,y) = -1- \log(-y)\)</span> 当且仅当 <span class="math inline">\(x = -\frac{1}{y}\)</span></p><p>故 <span class="math inline">\(f^*(y) = -1-\log(-y),y &lt; 0\)</span></p><p><strong>(b)</strong> <span class="math inline">\(domf = \mathbb{R}\)</span></p><p>令 <span class="math inline">\(g(x,y) = xy- e^x\)</span></p><p>当 <span class="math inline">\(y&gt;0\)</span> 时，<span class="math inline">\(\sup g(x,y) = y \log y - y\)</span> 当且仅当 <span class="math inline">\(x = \log y\)</span></p><p>当 <span class="math inline">\(y = 0\)</span> 时，<span class="math inline">\(\sup g(x,y) = \sup (-e^x) = 0\)</span></p><p>当 <span class="math inline">\(y &lt;0\)</span> 时，<span class="math inline">\(\sup g(x,y) = +\infty\)</span></p><p>故 <span class="math display">\[f^*(y) = \left\{\begin{aligned}y \log y - y, y &gt; 0 \\0, y = 0\end{aligned}\right.\]</span></p><h2 id="五">五</h2><blockquote><p>求解线性规划 <span class="math display">\[\begin{aligned}&amp;\min &amp;e^T x \\&amp;\textrm{s.t} &amp;G x \leq h \\&amp; &amp;Ax = b\end{aligned}\]</span> 的对偶函数，给出对偶问题。</p></blockquote><p>拉格朗日函数 <span class="math display">\[\begin{aligned}L(x, \lambda, \mu) &amp;= e^T x + \lambda^T (Gx-h) + \mu^T(Ax-b) \\&amp;= (e^T + \lambda G+\mu^T A)x - \lambda^T h - \mu^T b\end{aligned}\]</span> 故 <span class="math display">\[g(\lambda, \mu) = \left\{\begin{aligned}-\lambda^T h - \mu^T b &amp;,&amp; e + G^T \lambda + A^T \mu = 0 \\-\infty&amp;,&amp; otherwise\end{aligned}\right.\]</span> 因此其对偶问题为 <span class="math display">\[\max_{\lambda, \mu} \left( -\lambda^Th-\mu^Tb \right) \\s.t. \ \ e + G^T \lambda + A^T \mu = 0, \lambda \geq 0\]</span></p><h2 id="六">六</h2><blockquote><p>证明：Gauss概率密度函数的累积分布函数 <span class="math display">\[\Phi(x) = \frac{1}{\sqrt{2 \pi}} \int_{- \infty}^x e^{-\frac{u^2}{2}} du\]</span> 是对数-凹函数。即 <span class="math inline">\(\log(\Phi(x))\)</span> 是凹函数。</p></blockquote><p>由于 <span class="math display">\[\Phi&#39;(x) = \frac{1}{\sqrt{2 \pi}} e^{-\frac{x^2}{2}} \\\Phi&#39;&#39;(x) = -\frac{x}{\sqrt{2 \pi}} e^{-\frac{x^2}{2}}\]</span> 故 <span class="math display">\[(\Phi&#39;(x))^2 = \frac{1}{2 \pi} e^{-\frac{x^2}{2}} \\\Phi(x) \Phi&#39;&#39;(x) = -\frac{x}{2 \pi} e^{-\frac{x^2}{2}} \int_{-\infty}^x e^{-\frac{u^2}{2}} du\]</span> 当 <span class="math inline">\(x \geq 0\)</span> 时，易见 <span class="math inline">\(\Phi(x) \Phi&#39;&#39;(x) \leq (\Phi&#39;(x))^2\)</span></p><p>当 <span class="math inline">\(x &lt; 0\)</span> 时，由 <span class="math inline">\(\frac{u^2}{2}\)</span> 的凸性可知 <span class="math display">\[\begin{aligned}\Phi(x) \Phi&#39;&#39;(x) &amp;= -\frac{x}{2 \pi} e^{-\frac{x^2}{2}} \int_{-\infty}^x e^{-\frac{u^2}{2}} du \\&amp;\leq -\frac{x}{2 \pi} e^{-\frac{x^2}{2}} \int_{-\infty}^x e^{-\frac{x^2}{2}-(u-x)x} du \\&amp;=\frac{1}{2\pi} e^{-\frac{x^2}{2}} \\&amp;= \left(\Phi&#39;(x)\right)^2\end{aligned}\]</span> 由此可知 <span class="math inline">\(\Phi(x)\)</span> 时对数凸函数</p><h2 id="七">七</h2><blockquote><p>求优化问题 <span class="math inline">\(\arg\min_{x_1, x_2, x_3} x_1x_2x_3\)</span> 当 <span class="math inline">\(x_1,x_2,x_3\)</span> 满足 <span class="math inline">\(x_1^2 + x_2^2 + x_3^2 = 1\)</span> 的解</p></blockquote><p>拉格朗日函数 <span class="math inline">\(L = x_1x_2x_3 + \lambda (x_1^2 + x_2^2+x_3^2 - 1)\)</span></p><p>令 <span class="math inline">\(\nabla L = 0\)</span>，即 <span class="math display">\[\left\{\begin{aligned}&amp;\frac{\partial L}{\partial x_1} = x_2 x_3 + 2\lambda x_1 = 0 \\&amp;\frac{\partial L}{\partial x_2} = x_1 x_3 + 2\lambda x_2 = 0 \\&amp;\frac{\partial L}{\partial x_3} = x_1 x_2 + 2\lambda x_3 = 0 \\&amp;\frac{\partial L}{\partial \lambda} = x_1^2 + x_2^2 + x_3^2 - 1 = 0 \\\end{aligned}\right.\]</span> 解得 <span class="math inline">\(|x_1| = |x_2| = |x_3| = \frac{1}{\sqrt{3}}\)</span></p><p>故 <span class="math inline">\(|x_1x_2x_3| = \frac{\sqrt{3}}{9}\)</span></p><p>代入原方程可知 <span class="math inline">\(x_1x_2x_3 = -\frac{\sqrt{3}}{9}\)</span></p><h2 id="八">八</h2><blockquote><p>已知矩阵 <span class="math inline">\(A \in \mathbb{R}^{p \times q}, B \in \mathbb{R}^{p \times r}, \textrm{rank}(A) = \min (p,q)\)</span>，未知矩阵 <span class="math inline">\(X \in \mathbb{R}^{q \times r}\)</span>，求以下优化问题：</p><p>若 <span class="math inline">\(p &lt; q\)</span>，求Frobenius范数最小的矩阵 <span class="math inline">\(X\)</span>，使得 <span class="math inline">\(AX = B\)</span>，也即优化问题为 <span class="math display">\[\begin{aligned}&amp;\min &amp;f(X) = \frac{1}{2} ||X||_F^2 \\&amp;\textrm{s.t} &amp;AX = B\end{aligned}\]</span></p></blockquote><p>拉格朗日函数 <span class="math inline">\(L = Tr(\frac{1}{2} X^T X) - Tr(\Lambda^T(AX-B))\)</span></p><p>令 <span class="math inline">\(\nabla L = 0\)</span>，即 <span class="math display">\[\left\{\begin{aligned}&amp;\frac{\partial L}{\partial X} = X-A^T \Lambda = 0 \\&amp;\frac{\partial L}{\partial \Lambda} = AX-B = 0\end{aligned}\right.\]</span> 由于 <span class="math inline">\(A\)</span> 行满秩，故 <span class="math inline">\(AA^T\)</span> 可逆</p><p>故 <span class="math inline">\(AX = B = AA^T(AA^T)^{-1}B\)</span></p><p>即 <span class="math inline">\(X = A^T(AA^T)^{-1} B\)</span></p><h2 id="九">九</h2><blockquote><p>给出优化问题 <span class="math inline">\(\min_x (x^3 - ax)\)</span> 使用牛顿法时的迭代格式。</p></blockquote><p><span class="math display">\[f&#39;(x) = 3x^2-a, f&#39;&#39;(x) = 6x\]</span></p><p>故 <span class="math display">\[x_n = x_{n-1} - \frac{f&#39;(x_n)}{f&#39;&#39;(x_n)} = x_{n-1} - \frac{3x_n^2-a}{6x_n}\]</span></p><h2 id="十">十</h2><blockquote><p>梯度下降法是最常用的优化方法之一。考虑优化问题 <span class="math display">\[\min f(x) = x_1^2 + x_2^2 + 2x_3^2\]</span> 证明:在点 <span class="math inline">\(x_0 = (x_1, x_2, x_3)\)</span> 处沿负梯度方向迭代的最佳步⻓为 <span class="math display">\[\lambda = \frac{x_1^2 + x_2^2 + 4x_3^2}{2x_1^2 + 2x_2^2 + 16 x_3^2}\]</span></p></blockquote><p>令 <span class="math inline">\(x&#39; = x - \lambda \nabla f(x)\)</span></p><p>故 <span class="math display">\[\begin{aligned}g(\lambda) &amp;= f(x&#39;) \\&amp;= f(x - \lambda \nabla f(x)) \\&amp;= (1-2\lambda)^2 x_1^2 + (1-2\lambda)^2 x_2^2 + 2 (1-4\lambda)^2 x_3^2\end{aligned}\]</span> 于是 <span class="math display">\[g&#39;(\lambda) = -4(1-2\lambda)^2 x_1^2 - 4 (1-2\lambda)^2x_2^2 - 16(1-4\lambda)x_3^2\]</span> 令 <span class="math inline">\(g&#39;(\lambda) = 0\)</span></p><p>解得 <span class="math display">\[\lambda = \frac{x_1^2+x_2^2+4x_3^2}{2x_1^2+2x_2^2+16x_3^2}\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的集合哪些是凸集？&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;平板， 即形如 &lt;span class=&quot;math inline&quot;&gt;\(\left\{ x \in \mathbb{R}^n | \alpha </summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业6</title>
    <link href="http://gonggongjohn.me/2021/06/30/dase-math/dase-math-assignment-6/"/>
    <id>http://gonggongjohn.me/2021/06/30/dase-math/dase-math-assignment-6/</id>
    <published>2021-06-30T01:00:00.000Z</published>
    <updated>2022-02-10T14:36:32.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>证明：若 <span class="math inline">\(H(Y|X) = 0\)</span> 则 <span class="math inline">\(Y\)</span> 是 <span class="math inline">\(X\)</span> 的函数（即对于满足 <span class="math inline">\(p(x) &gt; 0\)</span> 的任意 <span class="math inline">\(x\)</span>，仅存在一个可能的取值 <span class="math inline">\(y\)</span>，使得 <span class="math inline">\(p(x,y) &gt; 0\)</span>）</p></blockquote><p>由 <span class="math inline">\(H(Y|X) = 0\)</span> 可知，对任意 <span class="math inline">\(x_i\)</span>，存在唯一的 <span class="math inline">\(y_j\)</span> 使得 <span class="math inline">\(P(Y=y_j|X=x_i) = 1\)</span></p><p>故 <span class="math display">\[\begin{aligned}p(x_i, y_j) &amp;= p(y_j|x_i) \cdot p(x_i) \\&amp;=p(x_i), X=x_i \land Y=y_j\end{aligned}\]</span> 也即 <span class="math inline">\(Y\)</span> 是 <span class="math inline">\(X\)</span> 的函数</p><h2 id="二">二</h2><blockquote><p>一个容器里面装有 <span class="math inline">\(a\)</span> 个红球和 <span class="math inline">\(b\)</span> 个白球，若从容器中取出 <span class="math inline">\(k(k \geq 2)\)</span> 个球。对于有放回和无放回两种情况，哪种情况的熵更大?请回答并给予说明。</p></blockquote><p>有放回时，第 <span class="math inline">\(i\)</span> 次摸出红球和白球的概率是相同的</p><p>无放回时， 第 <span class="math inline">\(i\)</span> 次摸出红球和白球的概率与前 <span class="math inline">\(i-1\)</span> 次的结果有关</p><p>于是由熵的极值性可知，有放回的熵更大。</p><h2 id="三">三</h2><blockquote><p>投掷一枚均匀的硬币。硬币出现正面和反面的互信息是多少？</p></blockquote><p><span class="math display">\[I(H,T) = \log \frac{P(H|T)}{P(H)} = -\infty\]</span></p><h2 id="四">四</h2><blockquote><p>投掷一颗 <span class="math inline">\(6\)</span> 面均匀的骰子，出现顶面和前面的互信息是多少？</p></blockquote><p><span class="math display">\[I(Top, Front) = \log \frac{P(Top|Front)}{P(Top)} = -\infty\]</span></p><h2 id="五">五</h2><blockquote><p>求均匀分布 <span class="math inline">\(X \sim U(a,b)\)</span> 的微分熵</p></blockquote><p><span class="math display">\[\begin{aligned}h(X) &amp;= -\int_a^b \frac{1}{b-a} \log \frac{1}{b-a} dx \\&amp;=\log(b-a)\end{aligned}\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;证明：若 &lt;span class=&quot;math inline&quot;&gt;\(H(Y|X) = 0\)&lt;/span&gt; 则 &lt;span class=&quot;math inline&quot;&gt;\(Y\)&lt;/span&gt; 是 &lt;span clas</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>树莓派在线教学系统</title>
    <link href="http://gonggongjohn.me/2021/06/29/web/remote-teaching/"/>
    <id>http://gonggongjohn.me/2021/06/29/web/remote-teaching/</id>
    <published>2021-06-29T03:28:35.000Z</published>
    <updated>2021-07-02T16:20:12.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="树莓派部署">树莓派部署</h2><p>​ <strong>树莓派（Raspberry Pi）</strong>是由英国慈善组织“Raspberry Pi基金会”开发的一款ARM微型单片机，其具备了一台标准计算机的绝大部分功能，常被用于提供各类小型服务类应用及嵌入式产品驱动。本项目基于Raspberry Pi 4B型号进行开发。</p><p>​ 树莓派官方提供了一个基于Linux内核的专为树莓派硬件设计的<strong>Raspberry Pi OS</strong>操作系统，可以直接在其官网进行镜像的下载。这里我们使用当前最新版<strong>（Kernel Version: 5.10）</strong>进行开发。</p><a id="more"></a><p><img src="raspberry_os.png" alt="raspberry_os" style="zoom:50%;" /></p><p>​ 将系统烧录至SD卡并引导进入系统后，我们首先打开系统的SSH及VNC服务，使得其可以通过远程访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">&gt; sudo raspi-config<br></code></pre></td></tr></table></figure><p>在弹出的GUI界面中选择<strong>Interfacing Options</strong>，依次打开SSH及VNC配置项即可。</p><p>​ 接下来我们来为树莓派创建一个热点，使得其他设备可以连接到树莓派的WIFI网络中以通过局域网访问后续的教学网站页面。首先我们安装在系统中安装<strong>hostapd</strong>（一个类Unix系统下可以提供热点访问的服务端工具）和<strong>dnsmasq</strong>（一个用于配置DNS和DHCP的工具）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo apt-get install hostapd<br>&gt; sudo apt install dnsmasq<br></code></pre></td></tr></table></figure><p>在<strong>/etc/hostapd/</strong>目录下创建一个<strong>hostapd.conf</strong>配置文件，并在其中指定要创建热点的相关信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">interface</span>=wlan0<br><span class="hljs-attr">driver</span>=nl80211<br><span class="hljs-attr">ssid</span>=graspberry<br><span class="hljs-attr">hw_mode</span>=g<br><span class="hljs-attr">channel</span>=<span class="hljs-number">7</span><br><span class="hljs-attr">wmm_enabled</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">macaddr_acl</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">auth_algs</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">ignore_broadcast_ssid</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">wpa</span>=<span class="hljs-number">2</span><br><span class="hljs-attr">wpa_passphrase</span>=<span class="hljs-number">1029384756</span><br><span class="hljs-attr">wpa_key_mgmt</span>=WPA-PSK<br><span class="hljs-attr">wpa_pairwise</span>=TKIP<br><span class="hljs-attr">rsn_pairwise</span>=CCMP<br></code></pre></td></tr></table></figure><p>随后我们将这一配置文件添加到<strong>/etc/default/hostapd</strong>中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DAEMON_CONF</span>=<span class="hljs-string">&quot;/etc/hostapd/hostapd.conf&quot;</span><br></code></pre></td></tr></table></figure><p>重启系统后，我们打开hostapd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo systemctl unmask hostapd<br>&gt; sudo systemctl <span class="hljs-built_in">enable</span> hostapd<br>&gt; sudo systemctl start hostapd<br></code></pre></td></tr></table></figure><p>现在，我们便可以在其他设备上搜索到树莓派的热点信号了：</p><p><img src="raspberry_hotspot.png" alt="raspberry_hotspot" style="zoom:50%;" /></p><p>连接热点后，我们只需要使用SSH工具，便可以远程访问树莓派：</p><p><img src="raspberry_ssh.png" alt="raspberry_ssh" style="zoom:50%;" /></p><p>​ 由于Raspberry Pi OS是Linux系统的一种，我们可以使用与开发环境类似的方式部署网站。首先我们从官网下载并安装Node运行环境包（https://nodejs.org/zh-cn/download/），并配置相应的环境变量：<strong>（.bash_profile）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NODE_HOME=/home/pi/ node-v14.17.2-linux-armv7l<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NODE_HOME</span>/bin <br><span class="hljs-built_in">export</span> NODE_PATH=<span class="hljs-variable">$NODE_HOME</span>/lib/node_modules<br></code></pre></td></tr></table></figure><p>随后我们使用apt-get安装<strong>MariaDB-Server</strong>作为服务端数据库环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo apt-get install mariadb-server-10.0<br></code></pre></td></tr></table></figure><p>以安全模式进入数据库并修改数据库默认密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sudo service mysql stop<br>&gt; sudo mysqld_safe --skip-grant-tables &amp;<br>&gt; mysql -u root<br>MariaDB&gt; update mysql.user <span class="hljs-built_in">set</span> authentication_string=PASSWORD(<span class="hljs-string">&#x27;1029384756&#x27;</span>), plugin=<span class="hljs-string">&#x27;mysql_native_password&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>&gt; sudo service mysql stop<br>&gt; sudo service mysql start<br></code></pre></td></tr></table></figure><p>现在我们的树莓派系统已经可以支持网页应用的部署了。</p><h2 id="系统构架">系统构架</h2><p>​ 整个树莓派在线教学系统分为<strong>用户端（前端）</strong>及<strong>服务端（后端）</strong>，其中用户端又分为<strong>学生端</strong>和<strong>教师端</strong>，其基本系统构架如下图所示：</p><figure><img src="structure.png" alt="structure" /><figcaption aria-hidden="true">structure</figcaption></figure><p>​ 可以看到，整个系统的构架是十分清晰的。用户首先通过用户管理系统登录在线教学系统，系统会根据教师或学生身份分别跳转到教师端的课程路由界面或学生端课程路由界面。随后，系统通过请求后端的课程数据库来返回用户当前参与或教授的所有课程，用户可根据界面提示进入到相应的课程界面中。对于一个课程界面，系统提供了签到、实时聊天、文件下载、在线答题及视频推流5个基本模块，每个模块经过后端路由再传递给服务器文件系统或另一学生/教师客户端。对于学生签到机制，后端会通过深度学习模型对前端传入的照片进行人脸识别，并将相应的签到结果传给教师客户端；而对于在线答题机制，则由教师端先上传一定格式的题目描述及答题限制，再由后端的试题结构解析器进行解析分发给学生客户端，当学生完成答题后，再通过路由送到后端进行结果统计，并将统计结果发送回教师端展示。</p><p>​ 以用户视角来看，教学系统的主体界面效果如下：</p><p><img src="lesson.png" alt="lesson" style="zoom:50%;" /></p><h2 id="quasar-framework与前端整合">Quasar Framework与前端整合</h2><p>​ 由于该网站的前端元素较为繁杂，我们需要一个合适易用的前端框架来避免大量不必要的重复编码。Quasar Framework是一款基于Vue.js的前端UI框架，其开箱即用和跨平台的属性使得我们可以快速的对各类UI元素进行整合。要构架Quasar Framework开发环境是容易的，Quasar官方提供了一个基于Vuex的脚手架，我们以此为起点来进行网站前端的构建。</p><p>​ 首先我们使用npm工具全局安装Quasar-CLI最新版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install -g @quasar/cli<br></code></pre></td></tr></table></figure><p>系统会自动安装相关的必要的组建，包括Vue-CLI脚手架（如果没有自动安装的话，可以手动安装Vue-CLI最新版本）。</p><p>随后，我们在目标位置使用Quasar-CLI生成一个前端开发环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; quasar create frontend<br></code></pre></td></tr></table></figure><p>系统会自动解析并生成所需的相应配置文件，并会在其中询问我们若干次相关参数的设置值，这里我们直接使用默认选项即可。</p><p><img src="quasar_create.png" alt="quasar_create" style="zoom:50%;" /></p><p>生成完成后，我们进入目录安装相应的Node依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install<br></code></pre></td></tr></table></figure><p>现在，我们的前端开发环境就配置完成了。我们可以使用如下命令即时查看开发效果，也可以对整个应用进行打包送至后端进行整合：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; quasar dev <span class="hljs-comment"># 开发环境测试</span><br>&gt; quasar build <span class="hljs-comment"># 打包至生产环境</span><br></code></pre></td></tr></table></figure><p><img src="quasar_build.png" alt="quasar_build" style="zoom:50%;" /></p><p>​ Vue将<strong>布局（Layout）</strong>和<strong>页面（Page）</strong>进行了分离，使得在同种布局下网站中的内容可以进行缺省替换，这正是本项目所需要的。对于本项目，我们设计了两种不同的界面布局，分别用于用户管理和授课窗口。网站的前端路由结构如下图所示：</p><p><img src="frontend_structure.png" alt="frontend_structure" style="zoom:80%;" /></p><h2 id="express与后端路由">Express与后端路由</h2><p>​ 为了与前端达到最佳的适配，我们使用<strong>NodeJS+Express框架</strong>作为服务端的实现基础。与Quasar类似，Express同样提供了一个官方脚手架用于搭建后端的开发环境。我们只需使用npm工具全局安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; npm install -g express<br>&gt; npm install -g express-generator<br></code></pre></td></tr></table></figure><p>安装完成后，我们在目标位置生成一个新的后端项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; express backend<br></code></pre></td></tr></table></figure><p>Express脚手架会在目标位置自动生成相关的依赖文件：</p><p><img src="express_create.png" alt="express_create" style="zoom:50%;" /></p><p>生成完后端环境后，我们进入目录，使用npm安装相应的依赖包，即可使用如下命令进行后端的测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; node bin/www<br></code></pre></td></tr></table></figure><p>​ 本项目后端路由的整体结构如图所示：</p><p><img src="backend_structure.png" alt="backend_structure" style="zoom:80%;" /></p><p>可以发现，除了根目录为网页推送接口，其他接口均为前端请求响应接口，故这些接口可以向用户隐去。此外，本项目还需要额外创建一个WebSocket服务器来响应实时的前后端数据交互请求。</p><h2 id="用户管理">用户管理</h2><p>​ 我们在数据库中创建一张表<strong>user</strong>来管理用户的基本信息。对于一个用户而言，我们需要记录其<strong>用户名（username）</strong>、<strong>密码（password）</strong>、<strong>邮箱（email）</strong>和<strong>身份（identity）</strong>。此外，我们还需要记录其<strong>参加/开设的课程编号（lessons）</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE user(<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;username&#96; TEXT NOT NULL,<br>    &#96;password&#96; TEXT NOT NULL,<br>    &#96;email&#96; TEXT,<br>    &#96;identity&#96; INT NOT NULL,<br>    &#96;lessons&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>​ 用户的基本管理逻辑分为注册和登录。我们将两个逻辑分别封装在两个独立的函数中，并采用<strong>回调函数</strong>的方式让路由调用。对于用户登录，我们只需要查询表中是否存在对应username键和password键的行即可。由于Node.JS中的Mysql插件为<strong>异步</strong>访问的，这里我们需要使用<strong>Promise</strong>函数来确保其执行顺序。为了向回调函数提供统一的接口，我们使用<strong>status</strong>状态字来指示查询的结果和状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> login = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, password, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT username,password FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 未确定; 1 - 成功; 2 - 用户名不存在; 3 - 密码错误 */</span><br>        <span class="hljs-keyword">if</span>(result == <span class="hljs-literal">undefined</span> || result.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>].password == password)&#123;<br>            status = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            status = <span class="hljs-number">3</span>;<br>        &#125;<br>        callback(status);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 注册的逻辑同登录类似，只需将Mysql查询语句改为插入语句即可。这里需要注意的是，为了确保用户名的唯一性，我们在插入数据之前需首先查询表中是否已经存在对应的username键值，如果存在相同用户名，我们需要返回用户一个“用户名已存在”的错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> register = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, password, email, identity, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT username FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise_query = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_query.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 未确定; 1 - 成功; 2 - 用户名已存在 */</span><br>        <span class="hljs-keyword">if</span>(result.length &gt; <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql_str = <span class="hljs-string">&quot;INSERT INTO user(username, password, email, identity) VALUES (?,?,?,?)&quot;</span>;<br>            sql_param = [username, password, email, identity];<br>            <span class="hljs-keyword">var</span> promise_insert = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_insert.then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;)<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="课程管理">课程管理</h2><p>​ 为了提高整个系统的可扩展性，我们希望能够并行的同时进行多个课程的在线教学。要做到这一点，我们需要将每个课程的工作环境隔离开来。幸运的是，在Mysql数据库中，我们可以创建一个唯一的ID使得其在每次插入数据的时候进行自增，因此我们可以直接使用这一ID作为课程的唯一标识。</p><p>​ 我们首先创建一张<strong>lesson</strong>表用于维护整个系统中的全局课程信息，这张表中应当维护<strong>课程名（name）</strong>、<strong>授课教师ID（teacher）</strong>及<strong>学生列表（students）</strong>三个关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE lesson(<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;name&#96; TEXT NOT NULL,<br>    &#96;teacher&#96; TEXT,<br>    &#96;students&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>​ 随后，我们需要封装一系列函数来对这一表格内容进行维护。当教师新创建一门课程时，前端会向教师询问课程名，并请求后端的<strong>/lesson_create</strong>口进行课程创建：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; margin-top: 2%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;create_btn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 3%&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建课程&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;createLesson = true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">q-dialog</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;createLesson&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-card</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-card-section</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">q-input</span> <span class="hljs-attr">outlined</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lesson_name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-pa-sm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[val =&gt; !!val || &#x27;课程名称不能为空！&#x27;]&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;课程名称&quot;</span> /&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;创建课程&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onCreateLesson&quot;</span> <span class="hljs-attr">v-close-popup</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">q-card-section</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">q-card</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-dialog</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lessonList&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">                createLesson: <span class="hljs-literal">false</span>,</span><br><span class="javascript">                lesson_name: <span class="hljs-string">&quot;&quot;</span>,</span><br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            onCreateLesson()&#123;<br><span class="javascript">                <span class="hljs-keyword">var</span> full_url = <span class="hljs-string">&#x27;lesson_create?name=&#x27;</span> + <span class="hljs-built_in">this</span>.lesson_name + <span class="hljs-string">&#x27;&amp;teacher=&#x27;</span> + <span class="hljs-built_in">this</span>.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.axios.get(full_url).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> status = response.data.status;</span><br>                    if(status == 1)&#123;<br><span class="javascript">                        alert(<span class="hljs-string">&quot;创建成功！&quot;</span>);</span><br>                    &#125;<br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Error occurred!&quot;</span>);</span><br>                    &#125;<br><span class="javascript">                &#125;).catch(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response);</span><br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建课程的基本逻辑为<strong>无重名确认-&gt;创建课程-&gt;查询课程ID-&gt;将课程信息添加到教师授课列表中</strong>，我们可以快速写出相应的实现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> createLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name, teacher, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT name FROM lesson WHERE name=? AND teacher=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [name, teacher];<br>    <span class="hljs-keyword">var</span> promise_check = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_check, reject_check</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_check(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_check(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_check.then(<span class="hljs-function">(<span class="hljs-params">result_check</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 课程重名; 3 - 内部错误 */</span><br>        <span class="hljs-keyword">if</span>(result_check.length &gt; <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql_str = <span class="hljs-string">&quot;INSERT INTO lesson(name, teacher) VALUES (?,?)&quot;</span>;<br>            sql_param = [name, teacher];<br>            <span class="hljs-keyword">var</span> promise_create = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_create, reject_create</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_create(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_create(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_create.then(<span class="hljs-function">(<span class="hljs-params">result_create</span>) =&gt;</span> &#123;<br>                sql_str = <span class="hljs-string">&quot;SELECT id FROM lesson WHERE name=? AND teacher=?&quot;</span>;<br>                sql_param = [name, teacher];<br>                <span class="hljs-keyword">var</span> promise_getid = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_getid, reject_getid</span>)</span>&#123;<br>                    mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                        <span class="hljs-keyword">if</span>(err)&#123;<br>                            reject_getid(err);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span>&#123;<br>                            resolve_getid(result);<br>                        &#125;<br>                    &#125;);<br>                &#125;);<br>                promise_getid.then(<span class="hljs-function">(<span class="hljs-params">result_getid</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span>(result_getid == <span class="hljs-literal">undefined</span> || result_getid.length == <span class="hljs-number">0</span>)&#123;<br>                        status = <span class="hljs-number">3</span>;<br>                        callback(status);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        appendLesson(teacher, result_getid[<span class="hljs-number">0</span>].id, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">status_append</span>)</span>&#123;<br>                            <span class="hljs-keyword">if</span>(status_append != <span class="hljs-number">1</span>)&#123;<br>                                status = <span class="hljs-number">3</span>;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span>&#123;<br>                                status = <span class="hljs-number">1</span>;<br>                                callback(status);<br>                            &#125;<br>                        &#125;);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> appendLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, lesson_id, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 用户名不存在 */</span><br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">undefined</span> || lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                lesson_str = <span class="hljs-built_in">String</span>(lesson_id);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                lesson_str = lesson_str + <span class="hljs-string">&quot;,&quot;</span> + lesson_id;<br>            &#125;<br>            sql_str = <span class="hljs-string">&quot;UPDATE user SET lessons=? WHERE username=?&quot;</span>;<br>            sql_param = [lesson_str, username];<br>            <span class="hljs-keyword">var</span> promise_update = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_update, reject_update</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_update(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_update(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_update.then(<span class="hljs-function">(<span class="hljs-params">resule_update</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，由于MySQL中没有“数组”这一基本数据类型，因此我们使用字符串拼接的方式将课程ID以字符串的形式存储到用户的lessons字段中，当需要查询用户的课程列表时，再通过字符串拆分的方式将其还原为ID列表。</p><p>参与已有的课程与查询用户参与的课程列表的逻辑也基本类似，基本都是对通过课程ID作为唯一的键桥梁分别在user和lesson中进行查询操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getLessons = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> errno = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 0 - 无错误; 1 - 用户名不存在; 2 - 课程不存在 */</span><br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            errno = <span class="hljs-number">1</span>;<br>            callback(errno, <span class="hljs-literal">undefined</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                callback(errno, []);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">var</span> lesson_list = lesson_str.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-keyword">var</span> fetch_total = lesson_list.length;<br>                <span class="hljs-keyword">var</span> fetched_num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">var</span> promise_loop = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_loop, reject_loop</span>)</span>&#123;<br>                    <span class="hljs-keyword">var</span> detail_list = [];<br>                    lesson_list.forEach(<span class="hljs-function">(<span class="hljs-params">lesson</span>) =&gt;</span> &#123;<br>                        sql_str = <span class="hljs-string">&quot;SELECT name,teacher FROM lesson where id=?&quot;</span>;<br>                        sql_param = [lesson];<br>                        <span class="hljs-keyword">var</span> promise_detail = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_detail, reject_detail</span>)</span>&#123;<br>                            mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                                <span class="hljs-keyword">if</span>(err)&#123;<br>                                    reject_detail(err);<br>                                &#125;<br>                                <span class="hljs-keyword">else</span>&#123;<br>                                    resolve_detail(result);<br>                                &#125;<br>                            &#125;);<br>                        &#125;);<br>                        promise_detail.then(<span class="hljs-function">(<span class="hljs-params">result_detail</span>) =&gt;</span> &#123;<br>                            <span class="hljs-keyword">if</span>(result_detail == <span class="hljs-literal">undefined</span> || result_detail.length == <span class="hljs-number">0</span>)&#123;<br>                                errno = <span class="hljs-number">2</span>;<br>                                reject_loop(<span class="hljs-string">&quot;Lesson doesn&#x27;t exist!&quot;</span>);<br>                            &#125;<br>                            <span class="hljs-keyword">else</span>&#123;<br>                                detail_list.push(&#123;<span class="hljs-attr">id</span>: lesson, <span class="hljs-attr">name</span>: result_detail[<span class="hljs-number">0</span>].name, <span class="hljs-attr">teacher</span>: result_detail[<span class="hljs-number">0</span>].teacher&#125;);<br>                                fetched_num += <span class="hljs-number">1</span>;<br>                                <span class="hljs-keyword">if</span>(fetched_num == fetch_total)&#123;<br>                                    resolve_loop(detail_list);<br>                                &#125;<br>                            &#125;<br>                        &#125;);<br>                    &#125;);<br>                &#125;);<br>                promise_loop.then(<span class="hljs-function">(<span class="hljs-params">result_loop</span>) =&gt;</span> &#123;<br>                    callback(errno, result_loop);<br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">var</span> appendLesson = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">username, lesson_id, callback</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> sql_str = <span class="hljs-string">&quot;SELECT lessons FROM user WHERE username=?&quot;</span>;<br>    <span class="hljs-keyword">var</span> sql_param = [username];<br>    <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 成功; 2 - 用户名不存在 */</span><br>    <span class="hljs-keyword">var</span> promise_showlist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_showlist, reject_showlist</span>)</span>&#123;<br>        mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>                reject_showlist(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                resolve_showlist(result);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>    promise_showlist.then(<span class="hljs-function">(<span class="hljs-params">result_showlist</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(result_showlist == <span class="hljs-literal">undefined</span> || result_showlist.length == <span class="hljs-number">0</span>)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> lesson_str = result_showlist[<span class="hljs-number">0</span>].lessons;<br>            <span class="hljs-keyword">if</span>(lesson_str == <span class="hljs-literal">undefined</span> || lesson_str == <span class="hljs-literal">null</span>)&#123;<br>                lesson_str = <span class="hljs-built_in">String</span>(lesson_id);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                lesson_str = lesson_str + <span class="hljs-string">&quot;,&quot;</span> + lesson_id;<br>            &#125;<br>            sql_str = <span class="hljs-string">&quot;UPDATE user SET lessons=? WHERE username=?&quot;</span>;<br>            sql_param = [lesson_str, username];<br>            <span class="hljs-keyword">var</span> promise_update = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve_update, reject_update</span>)</span>&#123;<br>                mysql.query(sql_str, sql_param, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, result</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(err)&#123;<br>                        reject_update(err);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        resolve_update(result);<br>                    &#125;<br>                &#125;);<br>            &#125;);<br>            promise_update.then(<span class="hljs-function">(<span class="hljs-params">resule_update</span>) =&gt;</span> &#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们可以在界面中自由创建/加入并随时查看当前参与的课程了：</p><p><img src="lesson_list_page.png" alt="lesson_list_page" style="zoom:50%;" /></p><h2 id="文件管理">文件管理</h2><p>​ 接下来我们来实现文件共享的功能。Quasar Framework提供了一个用于文件上传的UI组件，我们可以直接通过调用它来提示用户选择文件并发送至后端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">q-uploader</span></span><br><span class="hljs-tag">            <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file_upload&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:headers</span>=<span class="hljs-string">&quot;[&#123;name: &#x27;lesson_id&#x27;, value: this.lesson_id &#125;]&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">field-name</span>=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里为了方便后续的资源隔离，我们在其发送的请求头中加入了课程ID号。</p><p>​ Quasar文件上传器使用了HTTP协议进行文件上传，因此我们需要在后端实现符合这一协议的文件接受通道。这里我们使用了一个名为<strong>multer</strong>的NodeJS插件，它可以以极高的效率处理前端发来的文件数据。我们先在服务端文件系统上新建一个file_upload目录，用于专门管理课堂中的共享资源。随后，我们在后端路由中附上这一组件，并将接收到的文件统一保存至file_upload目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><span class="hljs-keyword">var</span> file_upload = multer(&#123;<span class="hljs-attr">dest</span>: <span class="hljs-string">&#x27;file_upload/&#x27;</span>&#125;);<br><br>router.post(<span class="hljs-string">&#x27;/file_upload&#x27;</span>, file_upload.single(<span class="hljs-string">&#x27;file&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>)</span>&#123;<br>  file.file_redirect(request.file.destination, request.file.path, request.headers.lesson_id, request.file.originalname, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;);<br>    response.write(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">1</span>&#125;));<br>    response.end();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于需要支持多个课堂同时进行，我们需要将每个课程的资源隔离。为此，我们在创建课程时，为每个课程创建一个相应的子目录，以课程ID作为目录名。随后，我们封装一个文件重定位函数，当multer将前端发来的文件保存到目标位置后，随即将其移动至相应的子文件夹下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> file_redirect = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">origin_path, origin_fullname, lesson_id, target_name, callback</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(origin_path, origin_fullname, lesson_id, target_name);<br>    fs.exists(origin_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>          fs.mkdir(origin_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(err)&#123;<br>              <span class="hljs-built_in">console</span>.log(err);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>              fs.rename(origin_fullname, origin_path + lesson_id + <span class="hljs-string">&quot;/&quot;</span> + target_name, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(err)&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Rename error!&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    callback();<br>                &#125;<br>              &#125;);<br>            &#125;<br>          &#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            fs.rename(origin_fullname, origin_path + lesson_id + <span class="hljs-string">&quot;/&quot;</span> + target_name, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;<br>              <span class="hljs-keyword">if</span>(err)&#123;<br>                  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Rename error!&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">else</span>&#123;<br>                  callback();<br>              &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 现在，我们可以正常将文件上传至服务端并共享给其他用户了：</p><p><img src="file_upload.png" alt="file_upload" style="zoom:50%;" /></p><p>​ 对于学生端而言，每当学生用户进入课程时，我们只需要列出对应文件夹下的文件名，并将其发回给前端，就可以让用户随时看到课堂中的所有共享文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list_files = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">base_path, lesson_id, callback</span>)</span>&#123;<br>    fs.exists(base_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>            callback([]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            fs.readdir(base_path + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(err)&#123;<br>                    <span class="hljs-built_in">console</span>.log(err);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    callback(data);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 当一个客户端请求下载某个课堂中的文件时，我们可以使用NodeJS自带的fs插件中的流式传输功能，将其输出管道重定向到请求回应流中即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.get(<span class="hljs-string">&#x27;/file_download&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> lesson_id = request.query.id;<br>  <span class="hljs-keyword">var</span> filename = request.query.filename;<br>  <span class="hljs-keyword">if</span>(lesson_id == <span class="hljs-literal">undefined</span> || filename == <span class="hljs-literal">undefined</span>)&#123;<br>    response.end();<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>    response.writeHead(<span class="hljs-number">200</span>, &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>,<br>      <span class="hljs-string">&#x27;Content-Disposition&#x27;</span>: <span class="hljs-string">&#x27;attachment; filename=&#x27;</span> + <span class="hljs-built_in">encodeURI</span>(filename)<br>    &#125;);<br>    fs.createReadStream(<span class="hljs-string">&#x27;file_upload/&#x27;</span> + lesson_id + <span class="hljs-string">&#x27;/&#x27;</span> + filename).pipe(response);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>至此，我们已经实现了一个基本的文件共享功能，效果如下：</p><p><img src="file_download.png" alt="file_download" style="zoom:50%;" /></p><h2 id="实时做题">实时做题</h2><p>​ 在在线课堂系统中，有时教师希望能够即时给学生分发一道课堂练习，并实时看到学生的答题状况，这就需要我们实现一套在线做题系统。</p><p>​ 在线做题首先需要教师端上传一道指定的题目。以选择题为例，为了方便结构化解析，我们要求教师上传一个固定格式的json文件作为题目（当然也可使用深度学习技术自动解析非结构化的题目信息，不过这一工程量将大幅度增长，在此我们不做讨论）：</p><p><img src="problem_upload.png" alt="problem_upload" style="zoom:50%;" /></p><p>​ 题目共享功能实现的主体思路与文件共享类似，我们只需要让教师端将题目以文件的形式发送给服务端，再通过服务端将题目分发给学生端即可。不过，为了让用户即时看到可阅读的题目信息，我们还需要在后端将题目文件解析为格式化信息，并通过json字符串的方式将结构化的题目发送给前端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> get_problem = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">problem_base, lesson_id, callback</span>)</span>&#123;<br>    fs.exists(problem_base + lesson_id + <span class="hljs-string">&#x27;/question.json&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> status = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 1 - 读取成功; 2 - 文件不存在; 3 - 读取错误 ;*/</span><br>        <span class="hljs-keyword">if</span>(!exists)&#123;<br>            status = <span class="hljs-number">2</span>;<br>            callback(status, <span class="hljs-literal">undefined</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">var</span> data = fs.readFileSync(problem_base + lesson_id + <span class="hljs-string">&#x27;/question.json&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> data == <span class="hljs-string">&#x27;string&#x27;</span>)&#123;<br>                status = <span class="hljs-number">1</span>;<br>                callback(status, data);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                status = <span class="hljs-number">3</span>;<br>                callback(status, <span class="hljs-literal">undefined</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>前端展示实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 3%; margin-left: 3%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;secondary&quot;</span> <span class="hljs-attr">padding</span>=<span class="hljs-string">&quot;sm xl&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 5%&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;上传题目&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onProblemUpload&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-form</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;onSubmitAnswer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-gutter-md&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> 实时题目 <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;problem_description&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-option-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;chosen_answer&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;answer_options&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;提交答案&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lesson&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                problem_description: <span class="hljs-string">&quot;3466645r15&quot;</span>,</span><br><span class="javascript">                chosen_answer: <span class="hljs-string">&quot;&quot;</span>,</span><br>                answer_options: [<br>                    &#123;<br><span class="javascript">                        label: <span class="hljs-string">&quot;Answer1&quot;</span>,</span><br><span class="javascript">                        value: <span class="hljs-string">&quot;A&quot;</span></span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br>        &#125;,<br>        methods: &#123;<br>            onInitLesson()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.$route.query.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.lesson_id = <span class="hljs-built_in">this</span>.$route.query.lesson_id;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.getProblem();</span><br>            &#125;,<br>            getProblem()&#123;<br><span class="javascript">                <span class="hljs-keyword">var</span> full_url = <span class="hljs-string">&#x27;problem_get?id=&#x27;</span> + <span class="hljs-built_in">this</span>.lesson_id;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.axios.get(full_url).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> problem_json = response.data;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(problem_json != <span class="hljs-literal">undefined</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.problem_description = problem_json.description;</span><br><span class="javascript">                        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> problem_json.options)&#123;</span><br><span class="javascript">                            <span class="hljs-built_in">this</span>.answer_options.push(&#123;</span><br>                                label: problem_json.options[key],<br>                                value: key<br>                            &#125;);<br>                        &#125;<br><span class="javascript">                        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.answer_options);</span><br>                    &#125;<br><span class="javascript">                &#125;).catch(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(response);</span><br>                &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​ 现在，学生用户已经可以随时接受教师下发的课堂练习并做答了。接下来，我们需要让教师端能够实时得到学生的做题反馈。为了实现这一功能，我们需要让前端实时监听后端的数据变化，并在后端产生数据变化时发送消息给前端。在NodeJS中，我们可以使用WebSocket插件来实现。</p><p>​ 首先，我们在服务端创建一个WebSocket服务器，并监听8000端口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;nodejs-websocket&#x27;</span>);<br><br><span class="hljs-keyword">var</span> ws_server = ws.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>)</span>&#123;<br>  <span class="hljs-comment">//Irrelevant codes</span><br>&#125;).listen(<span class="hljs-number">8000</span>);<br></code></pre></td></tr></table></figure><p>当学生前端点击提交答案按钮时，我们通过这一端口将回答信息通知给后端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-top-left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 3%; margin-left: 3%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">q-form</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;onSubmitAnswer&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;q-gutter-md&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span> 实时题目 <span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;problem_description&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-option-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;chosen_answer&quot;</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">&quot;answer_options&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">q-btn</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;提交答案&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">q-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;lesson&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                chosen_answer: <span class="hljs-string">&quot;&quot;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> full_path = <span class="hljs-built_in">window</span>.document.location.href;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> route_path = <span class="hljs-built_in">this</span>.$route.path;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path = full_path.substring(<span class="hljs-number">7</span>, full_path.indexOf(route_path));</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path_stripped = base_path.substring(<span class="hljs-number">0</span>, base_path.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://&quot;</span> + base_path_stripped + <span class="hljs-string">&quot;:8000&quot;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onopen = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Websocket连接成功！&quot;</span>)</span><br>            &#125;<br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onmessage = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(event.data);</span><br>            &#125;<br>        &#125;,<br><span class="javascript">        destroyed: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.close();</span><br>        &#125;,<br>        methods: &#123;<br>            onSubmitAnswer()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.web_socket.send(<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&quot;problem_answer&quot;</span>, <span class="hljs-attr">username</span>: <span class="hljs-built_in">this</span>.username, <span class="hljs-attr">lesson_id</span>: <span class="hljs-built_in">this</span>.lesson_id, <span class="hljs-attr">answer</span>: <span class="hljs-built_in">this</span>.chosen_answer&#125;));</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于每一个课程实例，服务端维护着一个当前题目的回答列表，每当后端收到前端发来的回答通知时，便将对应的计数器加一。随后，服务端会通知教师客户端更新实时统计信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ws_server = ws.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">socket</span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> answer_status = &#123;<br>    <span class="hljs-string">&quot;6&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;B&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&quot;D&quot;</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>  socket.on(<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">var</span> obj=<span class="hljs-built_in">JSON</span>.parse(str);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj == <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj )&#123;<br>          <span class="hljs-keyword">if</span>(obj.type == <span class="hljs-string">&quot;problem_answer&quot;</span>)&#123;<br>            <span class="hljs-keyword">var</span> lesson_id = obj.lesson_id;<br>            <span class="hljs-keyword">var</span> answer = obj.answer;<br>            <span class="hljs-keyword">if</span>(lesson_id != <span class="hljs-literal">undefined</span> &amp;&amp; answer != <span class="hljs-literal">undefined</span>)&#123;<br>              answer_status[lesson_id][answer] += <span class="hljs-number">1</span>;<br>              ws_server.connections.forEach(<span class="hljs-function">(<span class="hljs-params">connection</span>) =&gt;</span> &#123;<br>                connection.sendText(<span class="hljs-built_in">JSON</span>.stringify(answer_status));<br>              &#125;);<br>            &#125;<br>          &#125;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Error phasing json!&quot;</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-built_in">console</span>.log(e);<br>    &#125;<br>  &#125;);<br>&#125;).listen(<span class="hljs-number">8000</span>);<br></code></pre></td></tr></table></figure><p>对于前端统计信息，这里我们使用Echarts图表的形式将答题的即时情况展现给教师：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q-page</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex flex-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;answer_chart&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width: &#x27;300px&#x27;, height: &#x27;300px&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">q-page</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;problemStatistics&#x27;</span>,</span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                username: <span class="hljs-string">&quot;&quot;</span>,</span><br>                lesson_id: 0,<br><span class="javascript">                web_socket: <span class="hljs-literal">null</span>,</span><br><span class="javascript">                chart: <span class="hljs-literal">null</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        mounted: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.onInitLesson();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> echarts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.chart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;answer_chart&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.chart.setOption(&#123;</span><br><span class="javascript">                title: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学生实时答题情况统计&#x27;</span> &#125;,</span><br>                tooltip: &#123;&#125;,<br>                xAxis: &#123;<br><span class="javascript">                    data: [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>]</span><br>                &#125;,<br>                yAxis: &#123;&#125;,<br>                series: [&#123;<br><span class="javascript">                    name: <span class="hljs-string">&#x27;选择人数&#x27;</span>,</span><br><span class="javascript">                    type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br>                    data: [0, 0, 0, 0]<br>                &#125;]<br>            &#125;);<br><span class="javascript">            <span class="hljs-keyword">var</span> full_path = <span class="hljs-built_in">window</span>.document.location.href;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> route_path = <span class="hljs-built_in">this</span>.$route.path;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path = full_path.substring(<span class="hljs-number">7</span>, full_path.indexOf(route_path));</span><br><span class="javascript">            <span class="hljs-keyword">var</span> base_path_stripped = base_path.substring(<span class="hljs-number">0</span>, base_path.indexOf(<span class="hljs-string">&#x27;:&#x27;</span>));</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&quot;ws://&quot;</span> + base_path_stripped + <span class="hljs-string">&quot;:8000&quot;</span>);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onopen = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Websocket连接成功！&quot;</span>)</span><br>            &#125;<br><span class="javascript">            <span class="hljs-built_in">this</span>.web_socket.onmessage = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> latest_data = <span class="hljs-built_in">JSON</span>.parse(event.data);</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(latest_data != <span class="hljs-literal">undefined</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> stat_dict = latest_data[<span class="hljs-built_in">this</span>.lesson_id];</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> x_tags = [];</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> y_values = [];</span><br><span class="javascript">                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> stat_dict)&#123;</span><br>                        x_tags.push(key);<br>                        y_values.push(stat_dict[key]);<br>                    &#125;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.refreshChart(x_tags, y_values);</span><br>                &#125;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            onInitLesson()&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.username = <span class="hljs-built_in">this</span>.$route.query.username;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.lesson_id = <span class="hljs-built_in">this</span>.$route.query.lesson_id;</span><br>            &#125;,<br>            refreshChart(x, y)&#123;<br><span class="javascript">                <span class="hljs-built_in">this</span>.chart.setOption(&#123;</span><br><span class="javascript">                title: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学生实时答题情况统计&#x27;</span> &#125;,</span><br>                tooltip: &#123;&#125;,<br>                xAxis: &#123;<br>                    data: x<br>                &#125;,<br>                yAxis: &#123;&#125;,<br>                series: [&#123;<br><span class="javascript">                    name: <span class="hljs-string">&#x27;选择数&#x27;</span>,</span><br><span class="javascript">                    type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br>                    data: y<br>                &#125;]<br>            &#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面效果如下：</p><p><img src="problem_stat.png" alt="problem_stat" style="zoom:50%;" /></p><h2 id="快速签到">快速签到</h2><h2 id="视频推流">视频推流</h2><h2 id="远程访问">远程访问</h2><p>​ 至此，我们已经实现了树莓派在线教学系统的绝大部分基本功能。我们将其通过SFTP上传至树莓派中的目标目录下，并启动服务。通过树莓派提供的热点，我们在另一台设备上远程访问树莓派的网站接口，发现其已经可以正常工作：</p><p><img src="remote_comp.png" alt="remote_comp" style="zoom:50%;" /></p><p>同样的，我们也可以使用移动端访问树莓派上的教学服务：</p><p><img src="remote_phone.PNG" alt="remote_phone" style="zoom:30%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;树莓派部署&quot;&gt;树莓派部署&lt;/h2&gt;
&lt;p&gt;​ &lt;strong&gt;树莓派（Raspberry Pi）&lt;/strong&gt;是由英国慈善组织“Raspberry Pi基金会”开发的一款ARM微型单片机，其具备了一台标准计算机的绝大部分功能，常被用于提供各类小型服务类应用及嵌入式产品驱动。本项目基于Raspberry Pi 4B型号进行开发。&lt;/p&gt;
&lt;p&gt;​ 树莓派官方提供了一个基于Linux内核的专为树莓派硬件设计的&lt;strong&gt;Raspberry Pi OS&lt;/strong&gt;操作系统，可以直接在其官网进行镜像的下载。这里我们使用当前最新版&lt;strong&gt;（Kernel Version: 5.10）&lt;/strong&gt;进行开发。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Web" scheme="http://gonggongjohn.me/tags/Web/"/>
    
    <category term="Frontend" scheme="http://gonggongjohn.me/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业5</title>
    <link href="http://gonggongjohn.me/2021/06/12/dase-math/dase-math-assignment-5/"/>
    <id>http://gonggongjohn.me/2021/06/12/dase-math/dase-math-assignment-5/</id>
    <published>2021-06-12T02:00:00.000Z</published>
    <updated>2022-02-10T14:31:28.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>求随机变量 <span class="math inline">\(X \sim b(n,p)\)</span> 的期望与方差。</p></blockquote><p>由 <span class="math inline">\(X \sim b(n, p)\)</span> 可知 <span class="math display">\[P(X=k) = \binom{n}{k} p^k (1-p)^{1-k}, k \in \{0,1,2,\cdots,n\}\]</span> 故其期望为 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_\limits{k = 0}^n k \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= \sum_\limits{k = 1}^n k \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= \sum_\limits{k = 1}^n n \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;=np \sum_\limits{k = 1}^n \binom{n-1}{k-1} p^{k-1} (1-p)^{n-k} \\&amp;=np \sum_\limits{m = 0}^{n-1} \binom{n-1}{m} p^m (1-p)^{n-1-m} \\&amp;=np \cdot (p+1-p)^{n-1} \\&amp;=np\end{aligned}\]</span> 又由 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_\limits{k = 0}^n k^2 \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n k \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n (k - 1 + 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \left[ \sum_\limits{k = 1}^n (k - 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} + \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \right] \\&amp;=n \cdot \sum_\limits{k = 2}^n (n - 1) \binom{n-2}{k-2} p^k (1-p)^{n-k} + n \cdot \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n(n-1)p^2 + np\end{aligned}\]</span> 可知其方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=n(n-1)p^2 + np - n^2p^2 \\&amp;=n^2p^2-np^2+ np - n^2p^2 \\&amp;=np(1-p)\end{aligned}\]</span></p><h2 id="二">二</h2><blockquote><p>设连续性随机变量 <span class="math inline">\(X\)</span> 的分布函数为 <span class="math display">\[F_X(x) = \left\{\begin{aligned}&amp;0 ,&amp; x &lt; 1 \\&amp;\ln x ,&amp; 1 \leq x &lt; e \\&amp;1 ,&amp; x \geq e\end{aligned}\right.\]</span></p><ol type="1"><li>求 <span class="math inline">\(P(X &lt; 2), P(0 &lt; X &lt;3)\)</span></li><li>求概率密度函数 <span class="math inline">\(f_X(x)\)</span></li></ol></blockquote><ol type="1"><li></li></ol><p><span class="math display">\[P(X&lt;2) = F_X(2)= \ln 2 \\P(0&lt;X&lt;3) = F_X(3)-F_X(0)=1-0=1\]</span></p><ol start="2" type="1"><li></li></ol><p>由 <span class="math display">\[f_X(x) = \frac{d}{dx}F_X(x)\]</span> 可知</p><p>当 <span class="math inline">\(x&lt;1\)</span> 时，<span class="math inline">\(f_X(x) = 0\)</span></p><p>当 <span class="math inline">\(1&lt;x&lt;e\)</span> 时，<span class="math inline">\(f_X(x)=\frac{1}{x}\)</span></p><p>当 <span class="math inline">\(x&gt;e\)</span> 时，<span class="math inline">\(f_X(x) = 0\)</span></p><p>又 <span class="math display">\[F&#39;_-(1) = \lim_{x \to 1^-} \frac{f(1)-f(x)}{1-x}= 0 \neq 1 = F&#39;_+(1) \\F&#39;_-(e) = \lim_{x \to e^-} \frac{f(e)-f(x)}{e-x}= \frac{1}{e} \neq 0 = F&#39;_+(e)\]</span> 故 <span class="math inline">\(f_X(x)\)</span> 在 <span class="math inline">\(x=1\)</span> 和 <span class="math inline">\(x=e\)</span> 处不存在</p><p>因此 <span class="math display">\[f_X(x) = \left\{\begin{aligned}0 &amp;,&amp; x &lt; 1 \\\frac{1}{x} &amp;,&amp; 1 &lt; x &lt; e \\0 &amp;,&amp; x&gt;e\end{aligned}\right.\]</span></p><h2 id="三">三</h2><blockquote><p>下表为二维离散随机变量 <span class="math inline">\((X,Y)\)</span> 的联合分布列，其中最后一列为随机变量 <span class="math inline">\(Y\)</span> 的边缘分布列，最后一行为随机变量 <span class="math inline">\(X\)</span> 的边缘分布列，且 <span class="math inline">\(X,Y\)</span> 独立。试将下表补充完整，并给出 <span class="math inline">\(X,Y\)</span> 的协方差 <span class="math inline">\(\textrm{Cov}(X,Y)\)</span></p></blockquote><table><thead><tr class="header"><th></th><th><span class="math inline">\(X=1\)</span></th><th><span class="math inline">\(X=2\)</span></th><th><span class="math inline">\(X=3\)</span></th><th><span class="math inline">\(P_Y(Y)\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(Y=1\)</span></td><td><span class="math inline">\(0.03\)</span></td><td><span class="math inline">\(0.15\)</span></td><td><span class="math inline">\(0.12\)</span></td><td><span class="math inline">\(0.3\)</span></td></tr><tr class="even"><td><span class="math inline">\(Y=2\)</span></td><td><span class="math inline">\(0.03\)</span></td><td><span class="math inline">\(0.15\)</span></td><td><span class="math inline">\(0.12\)</span></td><td><span class="math inline">\(0.3\)</span></td></tr><tr class="odd"><td><span class="math inline">\(Y=3\)</span></td><td><span class="math inline">\(0.02\)</span></td><td><span class="math inline">\(0.1\)</span></td><td><span class="math inline">\(0.08\)</span></td><td><span class="math inline">\(0.2\)</span></td></tr><tr class="even"><td><span class="math inline">\(Y=4\)</span></td><td><span class="math inline">\(0.02\)</span></td><td><span class="math inline">\(0.1\)</span></td><td><span class="math inline">\(0.08\)</span></td><td><span class="math inline">\(0.2\)</span></td></tr><tr class="odd"><td><span class="math inline">\(P_X(X)\)</span></td><td><span class="math inline">\(0.1\)</span></td><td><span class="math inline">\(0.5\)</span></td><td><span class="math inline">\(0.4\)</span></td><td><span class="math inline">\(/\)</span></td></tr></tbody></table><p>由于 <span class="math inline">\(X,Y\)</span> 独立，故 <span class="math inline">\(Cov(X,Y) = 0\)</span></p><h2 id="四">四</h2><blockquote><p>已知所有的胰腺癌患者都有某症状，若一个人有该症状的概率为万分之一，并且胰腺癌的发病概率也为万分之一。问若一个人有该症状，则他也是胰腺癌患者的概率为多少。</p></blockquote><p>设 <span class="math inline">\(A=\{有该症状\},B=\{有胰腺癌\}\)</span></p><p>由于 <span class="math inline">\(B \subset A\)</span></p><p>故 <span class="math display">\[P(B|A) = \frac{P(A \cap B)}{P(A)} = \frac{P(B)}{P(A)} = 1\]</span></p><h2 id="五">五</h2><blockquote><p>一个不透明的箱子中有一些红球和白球，有放回地在箱子中随机摸出5个球，分别为红、白、白、白、红，试估计箱子中红球与白球的比例。</p></blockquote><p>设箱子中摸出红球的概率为 <span class="math inline">\(p\)</span>， <span class="math display">\[X_i = \left\{\begin{aligned}1, 第i次摸出红球 \\0, 第i次摸出白球\end{aligned}\right.\]</span> 故 <span class="math inline">\(X_i \stackrel{i.i.d}{\sim} b(1,p) \ , i \in \{1,2,3,4,5\}\)</span></p><p>于是 <span class="math display">\[L(p) = p^{\sum_\limits{i = 1}^n x_i} (1-p)^{n-\sum_\limits{i = 1}^n x_i}\]</span> 故 <span class="math display">\[\frac{\partial \ln L(p)}{\partial p} = \frac{\sum_\limits{i = 1}^n x_i}{p} - \frac{n - \sum_\limits{i = 1}^n x_i}{1-p}\]</span> 于是 <span class="math inline">\(p\)</span> 的极大似然估计 <span class="math display">\[\hat{p} = \bar{x} = \frac{1+0+0+0+1}{5} = \frac{2}{5}\]</span> 故 <span class="math display">\[\frac{红球}{白球} = \frac{2}{3}\]</span></p><h2 id="六">六</h2><blockquote><p>随机地取8只活塞环，测得他们的直径为(以mm计)</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">74</span>.<span class="hljs-number">001</span> <span class="hljs-number">74</span>.<span class="hljs-number">005</span> <span class="hljs-number">74</span>.<span class="hljs-number">003</span> <span class="hljs-number">74</span>.<span class="hljs-number">001</span><br><span class="hljs-attribute">74</span>.<span class="hljs-number">000</span> <span class="hljs-number">73</span>.<span class="hljs-number">998</span> <span class="hljs-number">74</span>.<span class="hljs-number">006</span> <span class="hljs-number">74</span>.<span class="hljs-number">002</span><br></code></pre></td></tr></table></figure><p>试求总体均值 <span class="math inline">\(\mu\)</span> 以及方差 <span class="math inline">\(\sigma^2\)</span> 的矩估计值。</p></blockquote><p><span class="math display">\[\begin{aligned}\hat{\mu} &amp;= \bar{x} \\&amp;= \frac{74.001+74.005+74.003+74.001+74.000+73.998+74.006+74.002}{8} \\&amp;=74.002\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}\hat{\sigma^2} &amp;= s^2 \\&amp;=\frac{1}{7} \left[ (74.001 - 74.002)^2 + (74.005 - 74.002)^2 + (74.003 - 74.002)^2 + (74.001 - 74.002)^2 + (74.000 - 74.002)^2 + (73.998 - 74.002)^2 + (74.006 - 74.002)^2 + (74.002 - 74.002)^2 \right] \\&amp; \approx 6.8571 \times 10^{-6}\end{aligned}\]</span></p><h2 id="七">七</h2><blockquote><p>给定 <span class="math inline">\(N\)</span> 个独立同分布样本 <span class="math inline">\(x_t\)</span>，服从多元正态分布 <span class="math display">\[G(x_t) = \frac{1}{(2 \pi)^{\frac{d}{2}} |\Sigma|^{\frac{1}{2}}} \exp \left\{ -\frac{1}{2} (x_t - \mu)^T \Sigma^{-1} (x_t - \mu) \right\}\]</span> ，其中 <span class="math inline">\(\Sigma\)</span> 是可逆对称矩阵，<span class="math inline">\(x_t, \mu \in \mathbb{R}^d\)</span>。 利用极大似然估计(MLE)估计参数 <span class="math inline">\(\mu, \Sigma\)</span>。</p></blockquote><p>似然函数 <span class="math display">\[\begin{aligned}L(\mu, \Sigma) &amp;= \prod_{i = 1}^n \frac{1}{(2 \pi)^{\frac{d}{2}} |\Sigma|^{\frac{1}{2}}} e^{-\frac{1}{2} (x_i - \mu)^T \Sigma^{-1} (x_i - \mu)} \\&amp;=\frac{1}{(2\pi)^{\frac{nd}{2}} |\Sigma|^{\frac{n}{2}}} e^{-\frac{1}{2} \sum_\limits{i = 1}^n (x_i-\mu)^T \Sigma^{-1} (x_i - \mu)}\end{aligned}\]</span> 故其对数似然函数 <span class="math display">\[l(\mu, \Sigma) = -\frac{nd}{2} \ln(2\pi) - \frac{n}{2} \ln |\Sigma| - \frac{1}{2}\sum_{i = 1}^n (x_i - \mu)^T \Sigma^{-1} (x_i - \mu)\]</span> 由于 <span class="math display">\[\begin{aligned}dl &amp;= Tr\left[ d \left( -\frac{nd}{2} \ln(2\pi) - \frac{n}{2} \ln |\Sigma| - \frac{1}{2}\sum_{i = 1}^n (x_i - \mu)^T \Sigma^{-1} (x_i - \mu) \right) \right] \\&amp;=Tr \left[ -\frac{1}{2} \sum_{i = 1}^n \left( d (x_i- \mu)^T \cdot \Sigma^{-1} \cdot (x_i - \mu) + (x_i - \mu)^T \cdot \Sigma^{-1} \cdot d(x_i - \mu) \right)\right] \\&amp;=Tr \left[  \frac{1}{2} \sum_{i = 1}^n \left( d \mu^T \cdot \Sigma^{-1} \cdot (x_i - \mu) + (x_i - \mu)^T \cdot \Sigma^{-1} \cdot d \mu \right) \right] \\&amp;=Tr \left[  \frac{1}{2} \sum_{i = 1}^n \left( (x_i - \mu)^T \cdot \left( \Sigma^{-1} \right)^T \cdot d \mu + (x_i - \mu)^T \cdot \Sigma^{-1} \cdot d \mu \right) \right] \\&amp;=Tr \left[ \sum_{i = 1}^n  \left( (x_i - \mu)^T \cdot \Sigma^{-1}\right) d\mu \right]\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial l}{\partial \mu} = \Sigma^{-1} \sum_{i = 1}^n (x_i - \mu)\]</span> 因此 <span class="math display">\[\hat{\mu} = \frac{1}{n}\sum_{i = 1}^n x_i = \bar{x}\]</span> 又由于 <span class="math display">\[\begin{aligned}dl &amp;= Tr \left[ -\frac{n}{2} d \ln |\Sigma| -\frac{1}{2} \sum_{i = 1}^n (x_i - \mu)^T \cdot d \Sigma^{-1} \cdot (x_i - \mu) \right] \\&amp;=Tr \left[ -\frac{n}{2 |\Sigma|} |\Sigma|\Sigma^{-1} d \Sigma + \frac{1}{2}\sum_{i = 1}^n \left( (x_i - \mu)^T \cdot \Sigma^{-1} d\Sigma \cdot \Sigma^{-1} \cdot (x_i - \mu) \right)\right] \\&amp;=Tr \left[-\frac{n}{2}\Sigma^{-1} d \Sigma \right] + \frac{1}{2} \sum_{i = 1}^n Tr \left[ \Sigma^{-1} \cdot (x_i - \mu)(x_i - \mu)^T \cdot \Sigma^{-1} d \Sigma \right] \\&amp;=Tr \left[\left( -\frac{n}{2}\Sigma^{-1} + \frac{1}{2}\sum_{i = 1}^n \left( \Sigma^{-1} (x_i - \mu)(x_i - \mu)^T \Sigma^{-1} \right) \right) d \Sigma \right]\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial l}{\partial \Sigma} = \frac{1}{2} \sum_{i = 1}^n \left(\Sigma^{-1} (x_i - \mu)(x_i - \mu)^T \Sigma^{-1} \right) - \frac{n}{2}\Sigma^{-1}\]</span> 因此 <span class="math display">\[\begin{aligned}\hat{\Sigma} &amp;= \frac{1}{n}\sum_{i = 1}^n (x_i - \mu)(x_i - \mu)^T \\&amp;=\frac{1}{n}\sum_{i = 1}^n (x_i - \bar{x})(x_i - \bar{x})^T\end{aligned}\]</span></p><h2 id="八">八</h2><blockquote><p>证明：在多分类问题中，利用交叉熵函数作为损失函数和用KL散度作为损失函数是等价的。</p></blockquote><p>对于多分类问题，若设 <span class="math inline">\(p_i\)</span> 为第 <span class="math inline">\(i\)</span> 个数据的目标输出，<span class="math inline">\(q_i\)</span> 为第 <span class="math inline">\(i\)</span> 个数据的实际输出，则 <span class="math display">\[L_{CrossEntropy} = -\sum_{i = 1}^n p_i \ln q_i \\L_{KL} = \sum_{i = 1}^n p_i \ln p_i - \sum_{i = 1}^n p_i \ln q_i\]</span> 二者仅相差一个与 <span class="math inline">\(q_i\)</span> 无关的常数，即 <span class="math display">\[\frac{\partial L_{CrossEntropy}}{\partial q_i} = \frac{\partial L_{KL}}{\partial q_i} = -\frac{p_i}{q_i}\]</span> 故二者作为损失函数等价</p><h2 id="九">九</h2><blockquote><p>同时抛2颗骰子，事件 <span class="math inline">\(A,B,C\)</span> 分别表示为 <span class="math display">\[A: 仅有一个骰子是3 \\B: 至少一个骰子是4 \\C: 骰子上点数总和为偶数\]</span> 试计算事件 <span class="math inline">\(A,B,C\)</span> 发生后所提供的信息量</p></blockquote><p><span class="math display">\[\begin{aligned}I_1 &amp;= - \lg \frac{5}{18} \approx 1.8480 \\I_2 &amp;= -\lg \frac{11}{36} \approx 1.7105 \\I_3 &amp;= -\lg \frac{1}{2} = 1\end{aligned}\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;求随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X \sim b(n,p)\)&lt;/span&gt; 的期望与方差。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由 &lt;span class=&quot;math </summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 内存管理</title>
    <link href="http://gonggongjohn.me/2021/06/08/os/os-exp-memory/"/>
    <id>http://gonggongjohn.me/2021/06/08/os/os-exp-memory/</id>
    <published>2021-06-08T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:33.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>修改Minix3.1.2a的内存分配机制，使得当调用brk系统调用时，系统重新给进程分配一块更大的空间并将数据复制至新空间中。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>将Minix系统中的内存分配机制由<strong>First-Fit</strong>修改为<strong>Best-Fit</strong>。</li><li>修改<strong>brk</strong>系统调用行为，使得当被调用时系统重新开辟空间并分配给进程。</li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix3.1.2a的内存管理策略">Minix3.1.2a的内存管理策略</h3><p>在较早的Minix3版本中，内存管理机制是十分固定和清晰的（Minix3.1.4引入了页式存储管理，使得分配给进程的内存空间可能实际分布在内存地址的各个地方）。系统的<strong>进程管理器（Process Manager）</strong>维护一个空闲空间列表，根据内存地址从低到高排列：</p><img src="/2021/06/08/os/os-exp-memory/free_list.png" class="" title="free_list"><p>当一个进程请求内存时，进程管理器会采用最先匹配法在空闲列表中找到第一个符合要求的空闲区，并将其分配给该进程。一旦进程被装入内存后，该片内存空间就被固定了下来，不会再被扩展。</p><p>Minix3的程序大多被编译为进程的各个部分共用一个内存块的形式以方便作为一个整体进行加载，其中，栈和数据/代码段分别位于内存空间的顶部和底部，整体结构大体如下：</p><img src="/2021/06/08/os/os-exp-memory/minix_program.png" class="" title="minix_program"><h3 id="内存分配原则修改">内存分配原则修改</h3><p>Minix系统中的空闲块由一个链接来维护其元信息，其单元结构如下：<strong>（include/minix/type.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Memory allocation by PM. */</span>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> &#123;</span>  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> *<span class="hljs-title">h_next</span>;</span>          <span class="hljs-comment">/* pointer to next entry on the list */</span>  <br>  phys_clicks h_base;           <span class="hljs-comment">/* where does the hole begin? */</span>  <br>  phys_clicks h_len;            <span class="hljs-comment">/* how big is the hole? */</span>  <br>&#125;;<br></code></pre></td></tr></table></figure><p>在Minix3.1.2a中，内存分配遵循首次<strong>适配原则（First-Fit）</strong>，即在遍历到第一个能够容纳该进程的空闲块时，便将这一空闲块分配给进程。</p><p>现在我们来将这一分配机制修改为<strong>最优适配原则（Best-Fit）</strong>。Best-Fit原则需要遍历整个空闲块链表，找出与进程所需空间最接近的空闲块。由于要保证空闲块大小大于进程所需内存大小，因此我们采用外部逼近的更新思路来实现。若在现有的空闲块中能够找到满足要求的空闲块，我们还需要更新空闲块的信息并将已被完全分配的空闲块从空闲链表中移出：<strong>（servers/pm/alloc.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC phys_clicks <span class="hljs-title">alloc_mem</span><span class="hljs-params">(clicks)</span>  </span><br><span class="hljs-function">phys_clicks clicks</span>;     <span class="hljs-comment">/* amount of memory requested */</span>  <br>&#123;  <br>    <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hole</span> *<span class="hljs-title">hp</span>, *<span class="hljs-title">prev_ptr</span>,*<span class="hljs-title">best</span>,*<span class="hljs-title">prev_best</span>;</span>  <br>    phys_clicks old_base,best_clicks;  <br>    <span class="hljs-keyword">int</span> flag= <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">do</span> &#123;  <br>        prev_ptr = NIL_HOLE;  <br>        hp = hole_head;  <br>        <span class="hljs-comment">//Procedure of finding the best-fit block  </span><br>        <span class="hljs-keyword">while</span> (hp != NIL_HOLE &amp;&amp; hp-&gt;h_base &lt; swap_base) &#123;   <br>            <span class="hljs-keyword">if</span> (hp-&gt;h_len &gt;= clicks) &#123;  <br>                <span class="hljs-keyword">if</span>(!flag)&#123;  <br>                    best = hp;  <br>                    prev_best=prev_ptr;  <br>                    flag=<span class="hljs-number">1</span>;  <br>                    best_clicks=best-&gt;h_len;  <br>                &#125;  <br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag &amp;&amp; hp-&gt;h_len&lt;best_clicks)&#123;    <br>                    best=hp;  <br>                    prev_best=prev_ptr;  <br>                    best_clicks=best-&gt;h_len;  <br>                &#125;  <br>            &#125;  <br>            prev_ptr = hp;  <br>            hp = hp-&gt;h_next;  <br>        &#125;  <br>    &#125; <span class="hljs-keyword">while</span> (swap_out());       <span class="hljs-comment">/* try to swap some other process out */</span>  <br>    <span class="hljs-comment">//Update the status of the hole  </span><br>    <span class="hljs-keyword">if</span> (flag)&#123;    <br>        old_base = best-&gt;h_base;    <br>        best-&gt;h_base += clicks;    <br>        best-&gt;h_len -= clicks;   <br>  <br>        <span class="hljs-keyword">if</span> (best-&gt;h_base &gt; high_watermark)    <br>        high_watermark = best-&gt;h_base;  <br>  <br>        <span class="hljs-keyword">if</span> (best-&gt;h_len == <span class="hljs-number">0</span>) del_slot(prev_best,best);    <br>  <br>        <span class="hljs-keyword">return</span>(old_base);  <br>  <br>    &#125;  <br>    <span class="hljs-keyword">return</span>(NO_MEM);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存申请行为修改">内存申请行为修改</h3><p>在Minix3.1.2中，系统为进程分配的内存空间是不可变的。一旦进程使用完了分配的空间，程序便将报错退出，这可以在系统代码中直观的体现出来：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">adjust</span><span class="hljs-params">(rmp, data_clicks, sp)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">/* whose memory is being adjusted? */</span>  <br>vir_clicks data_clicks;     <span class="hljs-comment">/* how big is data segment to become? */</span>  <br>vir_bytes sp;           <span class="hljs-comment">/* new value of sp */</span>  <br>&#123;  <br>  <span class="hljs-comment">//Irrelevant code  </span><br>  <span class="hljs-keyword">if</span> (lower &lt; gap_base) <span class="hljs-keyword">return</span>(ENOMEM);  <span class="hljs-comment">/* data and stack collided */</span>  <br>  <span class="hljs-comment">//Irrelevant code  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来修改这一行为。首先我们定义一个新的局部函数用于分配新的内存：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">allocate_new_mem</span><span class="hljs-params">(rmp,old_clicks)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">//Pointer of target process  </span><br>phys_clicks old_clicks; <span class="hljs-comment">//Original space size</span><br></code></pre></td></tr></table></figure><p>并在检测到程序空间不足时调用这一函数：<strong>（servers/pm/break.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0</span><br><br><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">adjust</span><span class="hljs-params">(rmp, data_clicks, sp)</span>    </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>; <span class="hljs-comment">/* whose memory is being adjusted? */</span>    <br>vir_clicks data_clicks;     <span class="hljs-comment">/* how big is data segment to become? */</span>    <br>vir_bytes sp;           <span class="hljs-comment">/* new value of sp */</span>    <br>&#123;    <br>    <span class="hljs-comment">//Irrelevant code    </span><br>    <span class="hljs-keyword">if</span> (lower &lt; gap_base) &#123;<span class="hljs-comment">/* data and stack collided */</span>  <br>      <span class="hljs-keyword">if</span> (allocate_new_mem(rmp, (phys_clicks)(mem_sp-&gt;mem_vir+mem_sp-&gt;mem_len-mem_dp-&gt;mem_vir)) == ERROR)  <br>            <span class="hljs-keyword">return</span>(ENOMEM);  <br>    &#125;     <br>    <span class="hljs-comment">//Irrelevant code    </span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来实现内存空间的更新。<strong>allocate_new_mem</strong>中需要完成以下几个任务：</p><p><strong>1)</strong> <strong>分配一块比原先更大的内存空间</strong></p><p><strong>2)</strong> <strong>将远数据段和栈段分别复制至新空间的对应位置</strong></p><p><strong>3)</strong> <strong>释放原内存空间</strong></p><p><strong>4)</strong> <strong>通知系统映射新内存段</strong></p><p>受<strong>动态表（Dynamic Table）</strong>的启发，我们在每次需要扩展空间时将空间大小扩展至原来的两倍。在Minix中，进程的栈段和数据段基地址均被存放在其进程管理表（Process Management Table）中：<strong>（servers/pm/mproc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">EXTERN <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mproc</span> &#123;</span>  <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_map</span> <span class="hljs-title">mp_seg</span>[<span class="hljs-title">NR_LOCAL_SEGS</span>];</span> <span class="hljs-comment">/* points to text, data, stack */</span>  <br>  <span class="hljs-comment">//Irrelevant codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中mp_seg[1]为数据段基地址，mp_seg[2]为栈段基地址，因此我们可以直接读取这一地址并根据新分配的空间大小计算出新的基地址。对于内存内容拷贝，Minix提供了一个现成的sys_abscopy函数可供我们使用：<strong>（include/minix/syslib.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> sys_abscopy(src_phys, dst_phys, bytes) \  </span><br>    sys_physcopy(NONE, PHYS_SEG, src_phys, NONE, PHYS_SEG, dst_phys, bytes)  <br>_PROTOTYPE(<span class="hljs-keyword">int</span> sys_physcopy, (<span class="hljs-keyword">int</span> src_proc, <span class="hljs-keyword">int</span> src_seg, vir_bytes src_vir,  <br>    <span class="hljs-keyword">int</span> dst_proc, <span class="hljs-keyword">int</span> dst_seg, vir_bytes dst_vir, phys_bytes bytes));<br></code></pre></td></tr></table></figure><p>同样，对于内存释放，系统也封装了相应的函数：<strong>（servers/pm/proto.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">_PROTOTYPE( <span class="hljs-keyword">void</span> free_mem, (phys_clicks base, phys_clicks clicks)   );<br></code></pre></td></tr></table></figure><p>于是我们便可以快速实现这一完整逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">PUBLIC <span class="hljs-keyword">int</span> <span class="hljs-title">allocate_new_mem</span><span class="hljs-params">(rmp,old_clicks)</span>  </span><br><span class="hljs-function"><span class="hljs-keyword">register</span> struct mproc *rmp</span>;  <br>phys_clicks old_clicks;  <br>&#123;     <br>    <span class="hljs-keyword">register</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_map</span> *<span class="hljs-title">mem_sp</span>, *<span class="hljs-title">mem_dp</span>;</span>  <br>    phys_clicks new_clicks, old_base,new_base;  <br>    phys_clicks  old_stack_base,new_stack_base;  <br>     <br>      <br>    phys_bytes data_bytes,stak_bytes;  <br>    phys_bytes old_base_bytes,new_base_bytes;  <br>    phys_bytes old_stack_base_bytes,new_stack_base_bytes;  <br>      <br>    <span class="hljs-keyword">int</span> x;  <br>      <br>    mem_dp = &amp;rmp-&gt;mp_seg[D];    <span class="hljs-comment">/* Pointer to data segment */</span>  <br>    mem_sp = &amp;rmp-&gt;mp_seg[S];  <span class="hljs-comment">/* Pointer to stack segment */</span>  <br>      <br>    old_base=mem_dp-&gt;mem_phys;  <br>    old_stack_base=mem_sp-&gt;mem_phys;  <br>      <br>    data_bytes=(phys_bytes) mem_dp-&gt;mem_len &lt;&lt; CLICK_SHIFT;    <br>    stak_bytes=(phys_bytes) mem_sp-&gt;mem_len &lt;&lt; CLICK_SHIFT;    <br>    old_base_bytes=old_base &lt;&lt; CLICK_SHIFT;    <br>    old_stack_base_bytes=old_stack_base &lt;&lt; CLICK_SHIFT;    <br>      <br>    new_clicks=<span class="hljs-number">2</span>*old_clicks;  <br>    new_base=alloc_mem(new_clicks);  <br>    <span class="hljs-keyword">if</span>(new_base==NO_MEM)&#123;  <br>      <span class="hljs-keyword">return</span>(ERROR);  <br>    &#125;  <br>      <br>    new_base_bytes = (phys_bytes) new_base &lt;&lt; CLICK_SHIFT;  <br>      <br>    <span class="hljs-keyword">if</span> ((x=sys_memset(<span class="hljs-number">0</span>,new_base_bytes,(new_clicks&lt;&lt;CLICK_SHIFT)))!=OK)&#123;    <br>      panic(__FILE__,<span class="hljs-string">&quot;new mem can&#x27;t be zero&quot;</span>,x);  <br>    &#125;  <br>  <br>      <br>    new_stack_base=new_base+new_clicks-mem_sp-&gt;mem_len;  <br>    new_stack_base_bytes=new_stack_base &lt;&lt; CLICK_SHIFT;  <br>      <br>      <br>      <br>    x = sys_abscopy(old_base_bytes,new_base_bytes,data_bytes);  <br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> ) panic(__FILE__,<span class="hljs-string">&quot;allocate_new_mem can&#x27;t copy&quot;</span>,x);  <br>    x = sys_abscopy( old_stack_base_bytes,new_stack_base_bytes,stak_bytes);  <br>    <span class="hljs-keyword">if</span> ( x &lt; <span class="hljs-number">0</span> ) panic(__FILE__,<span class="hljs-string">&quot;allocate_new_mem can&#x27;t copy&quot;</span>,x);  <br>      <br>     <br>    rmp-&gt;mp_seg[D].mem_phys = new_base;  <br>    rmp-&gt;mp_seg[S].mem_phys = new_stack_base;  <br>    rmp-&gt;mp_seg[S].mem_vir = mem_dp-&gt;mem_vir+new_clicks-mem_sp-&gt;mem_len;  <br>    free_mem(old_base,old_clicks);  <br>  <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="功能测试">功能测试</h3><p>现在我们可以来重编译系统并测试新实现的内存扩展功能了。由于Minix3.1.2a开发时间较早，需要手动安装新内核并将其加入开机菜单中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">/usr/src/servers&gt; make image  <br>/usr/src/tools&gt; make hdboot  <br>/usr/src/tools&gt; make install  <br>d0p0s0&gt; newminix(<span class="hljs-number">5</span>,start <span class="hljs-keyword">new</span> kernel) &#123;image=/boot/image/<span class="hljs-number">3.1</span><span class="hljs-number">.2</span>ar1;boot;&#125;<br></code></pre></td></tr></table></figure><p><strong>需要注意的是，Minix3.1.2a不支持VirtualBox的网卡配置，因此若使用VirtualBox进行调试，将无法通过主机使用SSH服务与Minix联通，需手动在虚拟机环境内修改代码。</strong></p><p>首先我们对使用sbrk调用对内存分配进行基本的测试，测试代码如下：<strong>（test1.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-keyword">int</span> inc = <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">int</span> i;  <br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> incr)</span></span>;  <br><span class="hljs-keyword">char</span> *result;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">int</span> **argv)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>        <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">int</span>)(result = sbrk(inc))) &gt; <span class="hljs-number">0</span>)  <br>        &#123;  <br>                total += inc;  <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;incremented by %d, total %d\n&quot;</span>, inc, total);  <br>                inc += inc;  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后，我们实际访问新分配的内存，验证其分配空间是否能够正常使用：<strong>（test2.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-keyword">int</span> inc = <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;  <br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">sbrk</span><span class="hljs-params">(<span class="hljs-keyword">int</span> incr)</span></span>;  <br><span class="hljs-keyword">char</span> *result;  <br><span class="hljs-keyword">int</span> i;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">int</span> **argv)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">int</span>)(result = sbrk(inc))) &gt; <span class="hljs-number">0</span>)  <br>    &#123;  <br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; inc; i++)  <br>            result[i] = <span class="hljs-number">0x12</span>;  <br>        total += inc;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;incremented by: %d, total: %d , result: %d\n&quot;</span>, inc, total,   (<span class="hljs-keyword">int</span>)result);  <br>        inc += inc;  <br>    &#125;  <br>    <span class="hljs-built_in">exit</span> (<span class="hljs-number">0</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>经过测试可以发现，程序输出与预期相符，且两次分配内存大小相同，表明新实现的内存分配机制是有效的。程序输出结果如下：</p><img src="/2021/06/08/os/os-exp-memory/run_1.png" class="" title="run_1"><img src="/2021/06/08/os/os-exp-memory/run_2.png" class="" title="run_2"><h2 id="总结">总结</h2><p>在本实验中，我们在Minix3.1.2a系统下对内存分配机制进行了修改。将first-fit内存分配策略修改为best-fit策略，可以有效的提高内存的综合利用率，减少内存碎片的产生。通过对brk系统调用实现的修改，得以让程序能够得到的内存空间随着需求动态扩展，极大的增强了系统的通用性和可扩展性。这一实验也使得我们对进程内存管理和内存空间调度的相关知识有了更深刻的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;修改Minix3.1.2a的内存分配机制，使得当调用brk系统调用时，系统重新给进程分配一块更大的空间并将数据复制至新空间中。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;将</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业4</title>
    <link href="http://gonggongjohn.me/2021/06/02/dase-math/dase-math-assignment-4/"/>
    <id>http://gonggongjohn.me/2021/06/02/dase-math/dase-math-assignment-4/</id>
    <published>2021-06-02T02:00:00.000Z</published>
    <updated>2022-02-10T09:00:53.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>构建模型使得预测值与真实值的误差最小常用向量2-范数度量，求解模型过程中需要计算梯度，求梯度：</p><ul><li><p><span class="math inline">\(f(A) = \frac{1}{2} ||Ax + b - y ||_2^2\)</span>，求 <span class="math inline">\(\frac{\partial f}{\partial A}\)</span></p></li><li><p><span class="math inline">\(f(x) = \frac{1}{2} ||Ax + b - y ||_2^2\)</span>，求 <span class="math inline">\(\frac{\partial f}{\partial x}\)</span></p></li></ul><p>，其中 <span class="math inline">\(A \in \mathbb{R}^{m \times n}, x \in \mathbb{R}^n, b, y \in \mathbb{R}^m\)</span></p></blockquote><p>由 <span class="math display">\[\begin{aligned}f(\textbf{A}, x) &amp;= \frac{1}{2} || \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} ||_2^2 \\&amp;=\frac{1}{2} \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)\end{aligned}\]</span> 可知 <span class="math display">\[\begin{aligned}df &amp;= d \left[\ Tr \left(\frac{1}{2} \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)\right) \right] \\&amp;= \frac{1}{2} Tr \left[ d \left( \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \right)\right] \\&amp;=\frac{1}{2} Tr \left[ d\left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) + \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \right] \\&amp;=\frac{1}{2} Tr \left[ \textbf{x}^T \cdot d \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) + \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \cdot \textbf{x} \right] \\&amp;=\frac{1}{2} \left\{ Tr \left[ \textbf{x}^T \cdot d \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \right] + Tr \left[ \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \cdot \textbf{x} \right] \right\} \\&amp;= \frac{1}{2} \left\{ Tr \left[ d \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \cdot \textbf{x}^T \right] + Tr \left[ \textbf{x} \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \right] \right\} \\&amp;= \frac{1}{2} \left\{ Tr \left[ \textbf{x} \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \right] + Tr \left[ \textbf{x} \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \right] \right\} \\&amp;= \frac{1}{2} Tr \left[ 2 \cdot \textbf{x} \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \right] \\&amp;= Tr \left[ \textbf{x} \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \textbf{A} \right]\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial f}{\partial \textbf{A}} = \left(\textbf{x} \cdot (\textbf{A} \textbf{x}+\textbf{b}-\textbf{y})^T\right)^T = (\textbf{A} \textbf{x}+\textbf{b}-\textbf{y}) \cdot \textbf{x}^T\]</span> 又 <span class="math display">\[\begin{aligned}df &amp;=\frac{1}{2} Tr \left[ d\left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) + \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot d \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \right] \\&amp;=\frac{1}{2} Tr \left[ d\textbf{x}^T \cdot \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) + \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right] \\&amp;=\frac{1}{2} \left\{ Tr \left[ d\textbf{x}^T \cdot \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right) \right] + Tr \left[ \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right] \right\} \\&amp;= \frac{1}{2} \left\{ Tr \left[ \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right] + Tr \left[ \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right] \right\} \\&amp;= \frac{1}{2} Tr \left[ 2 \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right] \\&amp;= Tr \left[ \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \cdot d\textbf{x} \right]\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial f}{\partial \textbf{x}} = \left( \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)^T \cdot \textbf{A} \right)^T = \textbf{A}^T \cdot \left( \textbf{A} \textbf{x} + \textbf{b} - \textbf{y} \right)\]</span></p><h2 id="二">二</h2><blockquote><p>利用迹微分法求解 <span class="math display">\[\frac{\partial \tr (W^{-1})}{\partial W}\]</span> ，其中 <span class="math inline">\(W \in \mathbb{R}^{m \times m}\)</span></p></blockquote><p>由 <span class="math display">\[\begin{aligned}d \ Tr(\textbf{W}^{-1}) &amp;= Tr \left[ d  \left( \textbf{W}^{-1} \right) \right] \\&amp;=Tr \left[ - \textbf{W}^{-1} \cdot d\textbf{W} \cdot \textbf{W}^{-1} \right] \\&amp;=Tr \left[ -\left(\textbf{W}^{-1}\right)^2 \cdot d \textbf{W} \right]\end{aligned}\]</span> 可知 <span class="math display">\[\frac{\partial Tr(\textbf{W}^{-1})}{\partial \textbf{W}} = -\left( \textbf{W}^{-2} \right)^T\]</span></p><h2 id="三">三</h2><blockquote><p>二次型是数据分析中常用函数，求 <span class="math display">\[\frac{\partial x^T A x}{\partial x}, \frac{\partial x^T A x}{\partial A}\]</span> ，其中 <span class="math inline">\(A \in \mathbb{R}^{m \times m}, x \in \mathbb{R}^m\)</span></p></blockquote><p>由 <span class="math display">\[\begin{aligned}d \left(\textbf{x}^T \textbf{A} \textbf{x} \right) &amp;= d \ Tr \left(\textbf{x}^T \textbf{A} \textbf{x} \right) \\&amp;=Tr \left[ d \left(\textbf{x}^T \textbf{A} \textbf{x} \right) \right] \\&amp;=Tr \left[ d \textbf{x}^T \cdot \textbf{A} \textbf{x} + \textbf{x}^T \textbf{A} \cdot d\textbf{x}  \right] \\&amp;=Tr \left[\textbf{x}^T \textbf{A}^T d\textbf{x} \right] + Tr \left[ \textbf{x}^T \textbf{A} d\textbf{x}\right] \\&amp;=Tr \left[ \textbf{x}^T (\textbf{A}^T + \textbf{A}) d\textbf{x}\right]\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial \textbf{x}^T \textbf{A} \textbf{x}}{\partial \textbf{x}} = \left(\textbf{x}^T (\textbf{A}^T + \textbf{A})\right)^T = (\textbf{A}+\textbf{A}^T)\textbf{x}\]</span> 又 <span class="math display">\[\begin{aligned}d \left(\textbf{x}^T \textbf{A} \textbf{x} \right) &amp;=Tr \left[ d \left(\textbf{x}^T \textbf{A} \textbf{x} \right) \right] \\&amp;=Tr \left[ \textbf{x}^T \cdot d \textbf{A} \cdot \textbf{x} \right] \\&amp;=Tr \left[\textbf{x} \textbf{x}^T d \textbf{A} \right] \\\end{aligned}\]</span> 故 <span class="math display">\[\frac{\partial \textbf{x}^T \textbf{A} \textbf{x}}{\partial \textbf{A}} = \left(\textbf{x}\textbf{x}^T \right)^T = \textbf{x}\textbf{x}^T\]</span></p><h2 id="四">四</h2><blockquote><p>定义 <span class="math inline">\((\exp(z))_i = \exp(z_i), (\ln (z))_i = \ln (z_i)\)</span>，则 <span class="math display">\[f(z) = \frac{\exp(z)}{\boldsymbol{1}^T \exp(z)}\]</span> 成为Softmax函数，如果 <span class="math inline">\(q = f(z), J = -p^T \ln (q)\)</span>，其中 <span class="math inline">\(p,q,z \in \mathbb{R}^n\)</span>，并且 <span class="math inline">\(\boldsymbol{1}^T p = 1\)</span>，则</p><ul><li>证明：<span class="math inline">\(\frac{\partial J}{\partial z} = q - p\)</span></li><li>若 <span class="math inline">\(z = Wx\)</span>，其中 <span class="math inline">\(W \in \mathbb{R}^{n \times m}, x \in \mathbb{R}^m, \frac{\partial J}{\partial W} = (q - p)x^T\)</span> 是否成立。</li></ul></blockquote><p><span class="math inline">\(\forall \textbf{x}, \textbf{y}, \textbf{z} \in \mathbb{R}^2, \lambda \in \mathbb{R}\)</span></p><p><strong>(1)</strong> 任取 <span class="math inline">\(i, j \in \{1,2,...,n\}\)</span></p><p>易得 <span class="math display">\[\frac{\partial J}{\partial q_j} = - \frac{p_j}{q_j}\]</span> 当 <span class="math inline">\(i \neq j\)</span> 时， <span class="math display">\[\frac{\partial q_j}{\partial z_i} = - \frac{e^{z_i + z_j}}{\left( \sum_\limits{k = 1}^n e^{z_k} \right)^2} = -q_i \cdot q_j\]</span> 当 <span class="math inline">\(i = j\)</span> 时， <span class="math display">\[\frac{\partial q_j}{\partial z_i} = \frac{e^{z_i} \cdot \left( \sum_\limits{k = 1}^n e^{z_k} \right) - e^{2z_i}}{\left( \sum_\limits{k = 1}^n e^{z_k} \right)^2} = q_i - q_i^2\]</span> 故 <span class="math display">\[\begin{aligned}\frac{\partial J}{\partial z_i} &amp;= \sum_{j = 1}^n \frac{\partial J}{\partial q_j} \cdot \frac{\partial q_j}{\partial z_i} \\&amp;=\sum_{j \neq i} \left( - \frac{p_j}{q_j} \right) (-q_i q_j) + \left(- \frac{p_i}{q_i} \right) (q_i - q_i^2) \\&amp;=q_i \cdot \sum_{j \neq i} p_j - p_i(1-q_i) \\\end{aligned}\]</span> 于是由 <span class="math inline">\(1^T p = \sum_\limits{i = 1}^n p_i = 1\)</span> 可知 <span class="math display">\[\frac{\partial J}{\partial z_i} = q_i (1 - p_i) - p_i(1-q_i) = q_i - p_i\]</span> 即 <span class="math display">\[\frac{\partial J}{\partial \textbf{z}} = \textbf{q} - \textbf{p}\]</span> <strong>(2)</strong> 由 <span class="math inline">\(d \ Tr (\textbf{W} \textbf{x}) = Tr \left( d \textbf{W} \cdot \textbf{x} \right) = Tr(\textbf{x} \cdot d \textbf{W})\)</span> 可知 <span class="math display">\[\frac{\partial J}{\partial \textbf{W}} = \textbf{x}^T\]</span> 故 <span class="math display">\[\frac{\partial J}{\partial \textbf{W}} = \frac{\partial J}{\partial \textbf{z}} \cdot \frac{\partial \textbf{z}}{\partial \textbf{W}} = (\textbf{q} - \textbf{p}) \textbf{x}^T\]</span> 成立</p><h2 id="五">五</h2><blockquote><p>以下内容是利用极大似然估计求解多元正态分布模型的关键步骤： <span class="math display">\[L = -\frac{Nd}{2} \ln (2 \pi) - \frac{N}{2} \ln |\Sigma| - \frac{1}{2} \sum_t (x_t - \mu)^T \Sigma^{-1} (x_t - \mu)\]</span> ，<span class="math inline">\(L\)</span> 是对数似然，<span class="math inline">\(N\)</span> 为样本数，<span class="math inline">\(d\)</span> 为样本维数，<span class="math inline">\(\Sigma \in \mathbb{R}^{d \times d}\)</span> 为协方差矩阵（对称矩阵），<span class="math inline">\(\mu \in \mathbb{R}^d\)</span> 为期望向量。</p><ul><li><p>求 <span class="math inline">\(\frac{\partial L}{\partial \mu}\)</span></p></li><li><p>当 <span class="math inline">\(\mu = \frac{1}{N} \sum_t x_t\)</span> 使，求 <span class="math inline">\(\frac{\partial L}{\partial \Sigma}\)</span>，并求使 <span class="math inline">\(\frac{\partial L}{\partial \Sigma} = 0\)</span> 成立的 <span class="math inline">\(\Sigma\)</span>。</p></li></ul></blockquote><p><strong>(1)</strong> <span class="math display">\[\begin{aligned}\frac{\partial L}{\partial \boldsymbol{\mu}} &amp;= -\frac{1}{2} \sum_{t = 1}^N \frac{\partial}{\partial \boldsymbol{\mu}} \left[ (\textbf{x}_t - \boldsymbol{\mu})^T \Sigma^{-1} (\textbf{x}_t - \boldsymbol{\mu})\right] \\&amp;= -\frac{1}{2} \sum_{t = 1}^N \frac{\partial \left[(\textbf{x}_t - \boldsymbol{\mu})^T \right]}{\partial \boldsymbol{\mu}} \cdot \frac{\partial \left[ (\textbf{x}_t - \boldsymbol{\mu})^T \Sigma^{-1} (\textbf{x}_t - \boldsymbol{\mu}) \right]}{\partial[\textbf{x}_t - \boldsymbol{\mu}]} \\&amp;=-\frac{1}{2} \sum_{t = 1}^N \left[ -2\Sigma^{-1}(\textbf{x}_t - \boldsymbol{\mu}) \right] \\&amp;=\Sigma^{-1} \cdot \sum_{t = 1}^N (\textbf{x}_t - \boldsymbol{\mu})\end{aligned}\]</span> <strong>(2)</strong></p><p>由 <span class="math display">\[\begin{aligned}dL &amp;= Tr \left[ d \left( - \frac{Nd}{2} \ln (2 \pi) - \frac{N}{2} \ln |\Sigma| - \frac{1}{2} \sum_{t = 1}^N (\textbf{x}_t - \boldsymbol{\mu})^T \Sigma^{-1} (\textbf{x}_t - \boldsymbol{\mu}) \right) \right] \\&amp;= Tr \left[ - \frac{N}{2} d \left(  \ln |\Sigma| \right) - \frac{1}{2} \sum_{t = 1}^N (\textbf{x}_t - \boldsymbol{\mu})^T \cdot d \left(\Sigma^{-1}\right) \cdot (\textbf{x}_t - \boldsymbol{\mu}) \right] \\&amp;= Tr \left[ - \frac{N}{2|\Sigma|}\cdot |\Sigma| \Sigma^{-1} d \Sigma + \frac{1}{2} \sum_{t = 1}^N (\textbf{x}_t - \boldsymbol{\mu}) (\textbf{x}_t - \boldsymbol{\mu})^T \cdot \Sigma^{-1} d \Sigma \cdot \Sigma^{-1} \right] \\&amp;= Tr \left[ \left(- \frac{N}{2}\cdot \Sigma^{-1} + \frac{1}{2} \sum_{t = 1}^N \Sigma^{-1} (\textbf{x}_t - \boldsymbol{\mu}) (\textbf{x}_t - \boldsymbol{\mu})^T \cdot \Sigma^{-1}\right) d \Sigma \right]\end{aligned}\]</span> 及 <span class="math inline">\(\Sigma\)</span> 为对称矩阵可知 <span class="math display">\[\frac{\partial L}{\partial \Sigma} = \frac{1}{2} \sum_{t = 1}^N \Sigma^{-1}(\textbf{x} - \boldsymbol{\mu})(\textbf{x} - \boldsymbol{\mu})^T \Sigma^{-1} - \frac{N}{2} \Sigma^{-1}\]</span> 故当 <span class="math inline">\(\Sigma = \frac{1}{N}(\textbf{x} - \boldsymbol{\mu})(\textbf{x} - \boldsymbol{\mu})^T\)</span> 时，<span class="math inline">\(\frac{\partial L}{\partial \Sigma} = 0\)</span></p><h2 id="六">六</h2><blockquote><p>求 <span class="math display">\[\frac{\partial |X_k|}{\partial X}\]</span> ，其中 <span class="math inline">\(X \in \mathbb{R}^{m \times m}\)</span> 为可逆矩阵。</p></blockquote><p>由 <span class="math inline">\(\textbf{X} \in \mathbb{R}^{m \times m}\)</span> 可逆可知 <span class="math display">\[\begin{aligned}\frac{\partial \left|\textbf{X}^k\right|}{\partial \textbf{X}} &amp;= \frac{\partial \left|\textbf{X}^k\right|}{\partial \textbf{|X|}} \cdot \frac{\partial \left|\textbf{X}\right|}{\partial \textbf{X}} \\&amp;=k |\textbf{X}|^{k - 1} \cdot |\textbf{X}| \cdot (\textbf{X}^{-1})^T \\&amp;= k |\textbf{X}|^k \left( \textbf{X}^{-1} \right)^T\end{aligned}\]</span></p><h2 id="七">七</h2><blockquote><p>求 <span class="math display">\[\frac{\partial \tr (AXBX^T C)}{\partial X}\]</span> ，其中 <span class="math inline">\(A \in \mathbb{R}^{m \times n}, X \in \mathbb{R}^{n \times k}, B \in \mathbb{R}^{k \times k}, C \in \mathbb{R}^{n \times m}\)</span></p></blockquote><p>由 <span class="math display">\[\begin{aligned}d \left( \textbf{A} \textbf{x} \textbf{B} \textbf{x}^T \textbf{C} \right) &amp;=Tr \left[d \left(\textbf{A} \textbf{x} \textbf{B} \textbf{x}^T \textbf{C} \right) \right] \\&amp;=Tr \left[\textbf{A} \cdot d \textbf{x} \cdot \textbf{B} \textbf{x}^T \textbf{C} + \textbf{A} \textbf{x} \textbf{B} \cdot d \textbf{x}^T \cdot \textbf{C} \right] \\&amp;=Tr \left[ \textbf{B}\textbf{x}^T \textbf{C}\textbf{A} d \textbf{x} \right] + Tr \left[ d \textbf{x}^T \cdot \textbf{C}\textbf{A}\textbf{x}\textbf{B} \right] \\&amp;=Tr \left[ \textbf{B}\textbf{x}^T \textbf{C}\textbf{A} d \textbf{x} \right] + Tr \left[ \textbf{B}^T\textbf{x}^T \textbf{A}^T \textbf{C}^T d \textbf{x} \right] \\&amp;=Tr \left[ \left( \textbf{B}\textbf{x}^T \textbf{C}\textbf{A} + \textbf{B}^T\textbf{x}^T \textbf{A}^T \textbf{C}^T \right) d \textbf{x}\right]\end{aligned}\]</span> 可知 <span class="math display">\[\frac{\partial Tr \left(\textbf{A} \textbf{x} \textbf{B} \textbf{x}^T \textbf{C} \right)}{\partial \textbf{X}} = \left( \textbf{B}\textbf{x}^T \textbf{C}\textbf{A} + \textbf{B}^T\textbf{x}^T \textbf{A}^T \textbf{C}^T \right)^T = \textbf{A}^T \textbf{C}^T \textbf{x} \textbf{B}^T + \textbf{C} \textbf{A} \textbf{x} \textbf{B}\]</span></p><h2 id="八">八</h2><blockquote><p>求激活函数 <span class="math display">\[\sigma(x) = \frac{1}{1 + e^{-x}}\]</span> 的导数</p></blockquote><p><span class="math display">\[\frac{d \sigma}{d \textbf{x}} = \frac{d}{d \textbf{x}} \left( \frac{1}{1+e^{- \textbf{x}}} \right) = \frac{e^{- \textbf{x}}}{\left(1+e^{-\textbf{x}}\right)^2} = \sigma(\textbf{x}) \left(1-\sigma(\textbf{x}) \right)\]</span></p><h2 id="九">九</h2><blockquote><p>求 <span class="math display">\[\frac{\partial}{\partial x} \exp \left\{ - \frac{1}{2 ||\sigma||_2^2} ||x - \mu||_2^2 \right\}\]</span> ，其中 <span class="math inline">\(x, \mu, \sigma \in \mathbb{R}^n\)</span></p></blockquote><p>由 <span class="math display">\[\begin{aligned}d\left( e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} \right) &amp;=Tr \left[ d \left( e^{-\frac{2}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} \right)\right] \\&amp;=Tr \left[ -\frac{1}{2||\boldsymbol{\sigma}||^2} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} \cdot d \left( ||\textbf{x} - \boldsymbol{\mu}||_2^2\right) \right] \\&amp;=Tr \left[ -\frac{1}{2||\boldsymbol{\sigma}||^2} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} \cdot d \left( (\textbf{x} - \boldsymbol{\mu})^T (\textbf{x} - \boldsymbol{\mu}) \right) \right] \\&amp;=Tr \left[ -\frac{(\textbf{x} - \boldsymbol{\mu})^T}{||\boldsymbol{\sigma}||^2} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} \cdot d\textbf{x} \right]\end{aligned}\]</span> 可知 <span class="math display">\[\frac{\partial}{\partial \textbf{x}} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2} = \left(-\frac{(\textbf{x} - \boldsymbol{\mu})^T}{||\boldsymbol{\sigma}||^2} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2}\right)^T = -\frac{(\textbf{x} - \boldsymbol{\mu})}{||\boldsymbol{\sigma}||^2} e^{-\frac{1}{2||\boldsymbol{\sigma}||^2}||\textbf{x} - \boldsymbol{\mu}||_2^2}\]</span></p><h2 id="十">十</h2><blockquote><p>阅读以下代码，填写更新梯度部分的代码。（提交时，需要提交补全的代码，以及最后10次输出的截图）</p></blockquote><p><strong>实现代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>N, D_in, H, D_out = <span class="hljs-number">64</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span><br><span class="hljs-comment"># 随机创建一些训练数据</span><br>x = np.random.randn(N, D_in)<br>y = np.random.randn(N, D_out)<br>w1 = np.random.randn(D_in, H)<br>w2 = np.random.randn(H, D_out)<br>learning_rate = <span class="hljs-number">1e-6</span><br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> range(<span class="hljs-number">500</span>):<br>    <span class="hljs-comment"># Forward pass</span><br>    h = x.dot(w1)  <span class="hljs-comment"># N * H</span><br>    h_relu = np.maximum(h, <span class="hljs-number">0</span>)  <span class="hljs-comment"># N * H</span><br>    y_pred = h_relu.dot(w2)  <span class="hljs-comment"># N * D_out</span><br>    <span class="hljs-comment"># compute loss</span><br>    loss = np.square(y_pred - y).sum()<br>    print(it, loss)<br>    <span class="hljs-comment"># Backward pass</span><br>    <span class="hljs-comment"># compute the gradient</span><br>    grad_y_pred = y_pred - y<br>    grad_w2 = h_relu.T.dot(grad_y_pred)<br>    grad_h_relu = grad_y_pred.dot(w2.T)<br>    grad_h = grad_h_relu.copy()<br>    grad_h[h &lt; <span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    grad_w1 = x.T.dot(grad_h)<br>    w1 -= learning_rate * grad_w1<br>    w2 -= learning_rate * grad_w2<br></code></pre></td></tr></table></figure><p><strong>输出结果（最后10次循环）：</strong></p><img src="/2021/06/02/dase-math/dase-math-assignment-4/1.png" class="" width="1">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;构建模型使得预测值与真实值的误差最小常用向量2-范数度量，求解模型过程中需要计算梯度，求梯度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(f(A) = \frac{1</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 I/O子系统</title>
    <link href="http://gonggongjohn.me/2021/06/01/os/os-exp-io/"/>
    <id>http://gonggongjohn.me/2021/06/01/os/os-exp-io/</id>
    <published>2021-06-01T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:18.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>在Minix3中创建一块可用的RAM盘，并比较其与DISK盘在各类存取方式下的速度。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>在Minix3中安装一块 X MB大小的RAM盘<strong>（Minix中已有6块用户可用RAM盘，7块系统保留RAM盘）</strong>，可以挂载并且存取文件操作。</li><li>测试RAM盘和DISK盘的文件读写速度，分析其读写速度差异原因。</li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix3的存储管理策略">Minix3的存储管理策略</h3><p>与其整体系统构架类似，Minix3的I/O构架分为5层：用户进程层、资源调度层、设备驱动层、内核中断层及硬件层。</p><img src="/2021/06/01/os/os-exp-io/minix_io.png" class="" title="minix_io"><p>对于磁盘来说，其通常以块为单位进行存储。当一个用户程序要从一个文件读一个块时，操作系统首先在高速缓存中查找有关的块。如果需要的块不在其中，则调用设备驱动程序，向硬件发出一个请求，从磁盘读取该块，然后将进程阻塞。当磁盘操作完成时，硬件产生一个中断，中断处理器随即从设备读取状态并唤醒休眠的的用户进程使其能够继续运行。</p><h3 id="ram盘申请">RAM盘申请</h3><p>RAM盘是将主存中的部分空间当作普通磁盘来使用的一种存储模型。在许多场景下，这种使用方式是高效且重要的（尤其是在由外部设备引导的系统下）。Minix3系统中共有6块固有的RAM盘，其设备控制程序分别被挂载在<strong>/dev/ram</strong>，<strong>/dev/kmem</strong>，<strong>/dev/boot</strong>，<strong>/dev/mem</strong>，<strong>/dev/null</strong>和<strong>/dev/zero</strong>下。</p><p>为了增加一块RAM盘，我们首先修改这一RAM盘常量：<strong>（minix/drivers/storage/memory）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* ramdisks (/dev/ram*) */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RAMDISKS     7</span><br></code></pre></td></tr></table></figure><p>Minix本身提供了一个用于创建RAM盘的<strong>ramdisk</strong>指令，但其单位为<strong>KB</strong>。为了方便起见，我们实现一个单位为<strong>MB</strong>的<strong>buildmyram</strong>指令用于创建较大容量的RAM盘：<strong>（minix/commands/ramdisk）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/paths.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioc_memory.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd;  <br>    <span class="hljs-keyword">signed</span> <span class="hljs-keyword">long</span> size;  <br>    <span class="hljs-keyword">char</span> *d;  <br>  <br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span> || argc &gt; <span class="hljs-number">3</span>) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: %s &lt;size in MB&gt; [device]\n&quot;</span>,  <br>                argv[<span class="hljs-number">0</span>]);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    d = argc == <span class="hljs-number">2</span> ? _PATH_RAMDISK : argv[<span class="hljs-number">2</span>];  <br>    <span class="hljs-keyword">if</span>((fd=open(d, O_RDONLY)) &lt; <span class="hljs-number">0</span>) &#123;  <br>        perror(d);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KFACTOR 1024  </span><br>    size = atol(argv[<span class="hljs-number">1</span>])*KFACTOR*<span class="hljs-number">1024</span>;  <br>  <br>    <span class="hljs-keyword">if</span>(size &lt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;size should be non-negative.\n&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span>(ioctl(fd, MIOCRAMSIZE, &amp;size) &lt; <span class="hljs-number">0</span>) &#123;  <br>        perror(<span class="hljs-string">&quot;MIOCRAMSIZE&quot;</span>);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;size on %s set to %ldMB\n&quot;</span>, d, size/KFACTOR/<span class="hljs-number">1024</span>);  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>修改完必要的内核代码后，我们重新编译系统并重启进入。现在，我们就可以来实际在系统中申请RAM盘了。</p><p>与系统固有盘类似，我们首先使用<strong>mknod</strong>指令创建一个新申请RAM盘的设备控制节点：</p><img src="/2021/06/01/os/os-exp-io/mknod.png" class="" title="mknod"><p>随后，我们使用新实现的<strong>buildmyram</strong>指令申请一块大小为500MB的RAM盘：</p><img src="/2021/06/01/os/os-exp-io/buildmyram.png" class="" title="buildmyram"><p>最后，我们在新申请的RAM盘上创建相应的文件系统，并将其挂载到<strong>/root/myram</strong>目录下即可：</p><img src="/2021/06/01/os/os-exp-io/mkfs.png" class="" title="mkfs"><p>通过<strong>df</strong>指令可以看到，RAM盘已被成功创建。</p><h3 id="读写性能测试">读写性能测试</h3><p>接下来，我们需要编写一组用于测试和比较DISK盘和RAM盘读写性能的程序。由于DISK盘和RAM盘使用了同样的抽象模型，我们可以使用相同的逻辑来对其进行测试。</p><p>一块磁盘在使用过程中主要会遇到以下四种读写模式：<strong>顺序读取、随机读取、顺序写入、随机写入</strong>。对于读取操作，我们首先使用<strong>open</strong>系统调用打开相应的文件，随后使用<strong>read</strong>系统调用将文件中固定大小的内容读入缓存中。若为随机读取，则在读取完成后我还需要使用<strong>lseek</strong>和<strong>rand</strong>函数将文件指针重新指到一个随机的位置。此外，为了产生较为显著的运行时间以方便比较，我们在一次操作中重复读取1000轮：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ROUND 1000  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">read_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blocksize, <span class="hljs-keyword">bool</span> isrand, <span class="hljs-keyword">char</span> *filepath)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-number">0</span>;  <br>    fd = open(filepath, O_CREAT | O_RDWR | O_SYNC, S_IRWXU);  <br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Error occurred when opening file!&quot;</span>);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">char</span> *buf_ext = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * blocksize);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ROUND; i++)&#123;  <br>        read(fd, buf_ext, blocksize);  <br>        <span class="hljs-keyword">if</span>(isrand)&#123;  <br>            lseek(fd, rand() % ((blocksize - <span class="hljs-number">1</span>) * ROUND), SEEK_SET);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-built_in">free</span>(buf_ext);  <br>    lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);  <br>    close(fd);  <br>&#125;<br></code></pre></td></tr></table></figure><p>写入操作与读取操作类似。我们首先构造一个64Bytes的字符串作为写入的最小单位，随后使用<strong>strcat</strong>函数将重复拼接到指定的写入大小，并通过<strong>write</strong>系统调用将其写入文件系统即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFSIZE (64)  </span><br>  <br><span class="hljs-keyword">char</span> buffer[BUFSIZE] = <span class="hljs-string">&quot;This is a 6KB block!&quot;</span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write_file</span><span class="hljs-params">(<span class="hljs-keyword">int</span> blocksize, <span class="hljs-keyword">bool</span> isrand, <span class="hljs-keyword">char</span> *filepath)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd = <span class="hljs-number">0</span>;  <br>    fd = open(filepath, O_CREAT | O_RDWR | O_SYNC, S_IRWXU);  <br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Error occurred when opening file!&quot;</span>);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">char</span> *buf_ext = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * blocksize);  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; blocksize / BUFSIZE; i++)&#123;  <br>        <span class="hljs-built_in">strcat</span>(buf_ext, buffer);  <br>    &#125;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; ROUND; i++)&#123;  <br>        write(fd, buf_ext, blocksize);  <br>        <span class="hljs-keyword">if</span>(isrand)&#123;  <br>            lseek(fd, rand() % ((blocksize - <span class="hljs-number">1</span>) * ROUND), SEEK_SET);  <br>        &#125;  <br>    &#125;  <br>    lseek(fd, <span class="hljs-number">0</span>, SEEK_SET);  <br>    close(fd);  <br>&#125;<br></code></pre></td></tr></table></figure><p>由于现代存储媒介大多已经可以应付较高的读写请求，为了最大程度测试DISK盘和RAM盘的性能，我们使用多线程并发读写的方式来尽可能地使磁盘吞吐达到饱和。经实测，在写入块大小为<strong>4KB</strong>时， RAM和DISK盘的吞吐在并发数为<strong>16～20</strong>左右时基本达到了饱和：</p><img src="/2021/06/01/os/os-exp-io/concur.png" class="" title="concur"><p>考虑到SSD磁盘的读写硬件特性，我们将并发数设置为<strong>15</strong>。对于读写块大小，我们以2倍为步长，以测试从64Bytes到8KB时的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSTR 100  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CONCURRENCY 15  </span><br>  <br><span class="hljs-keyword">char</span> *path_format[<span class="hljs-number">2</span>] = &#123;<span class="hljs-string">&quot;/root/myram/disk_%d.txt&quot;</span>, <span class="hljs-string">&quot;/usr/disk_%d.txt&quot;</span>&#125;;  <br>  <br><span class="hljs-comment">//Irrelevant code  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">get_time_left</span><span class="hljs-params">(struct timeval starttime, struct timeval endtime)</span></span>&#123;  <br>    <span class="hljs-keyword">return</span> ((endtime.tv_sec * <span class="hljs-number">1000</span> + endtime.tv_usec / <span class="hljs-number">1000</span>) - (starttime.tv_sec * <span class="hljs-number">1000</span> +  <br>                                                                starttime.tv_usec / <span class="hljs-number">1000</span>)) / <span class="hljs-number">1000.0</span>;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    srand(time(<span class="hljs-number">0</span>));  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;  <br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;RAM:\n&quot;</span>);  <br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Disk:\n&quot;</span>);  <br>        <span class="hljs-keyword">int</span> block_size = <span class="hljs-number">64</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k++) &#123;  <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start_time</span>, <span class="hljs-title">end_time</span>;</span>  <br>            gettimeofday(&amp;start_time, <span class="hljs-literal">NULL</span>);  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CONCURRENCY; i++) &#123;  <br>                <span class="hljs-keyword">char</span> *filepath = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>) * MAXSTR);  <br>                <span class="hljs-built_in">sprintf</span>(filepath, path_format[j], i);  <br>                <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">/* 顺序读取 */</span>  <br>                    read_file(block_size, <span class="hljs-literal">false</span>, filepath);  <br>                     <span class="hljs-comment">/* 随机读取 */</span>  <br>                    <span class="hljs-comment">//read_file(block_size, true, filepath);  </span><br>                     <span class="hljs-comment">/* 顺序写入 */</span>  <br>                    <span class="hljs-comment">//write_file(block_size, false, filepath);  </span><br>                     <span class="hljs-comment">/* 随机写入 */</span>  <br>                    <span class="hljs-comment">//write_file(block_size, true, filepath);  </span><br>                    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CONCURRENCY; i++) &#123;  <br>                wait(<span class="hljs-literal">NULL</span>);  <br>            &#125;  <br>            gettimeofday(&amp;end_time, <span class="hljs-literal">NULL</span>);  <br>            <span class="hljs-keyword">double</span> time_cost = get_time_left(start_time, end_time);  <br>            <span class="hljs-keyword">double</span> write_size = block_size * ROUND * CONCURRENCY / <span class="hljs-number">1024.0</span> / <span class="hljs-number">1024</span>;  <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Blocksize: %d Bytes, Writesize: %f MB, Time: %f s\n&quot;</span>, block_size, write_size, time_cost);  <br>            block_size *= <span class="hljs-number">2</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果分析">测试结果分析</h3><p>将测试程序编译并多次运行后，我们得到了一组RAM盘和DISK盘在不同块大小下各种读写情况时的运行时间。通过<strong>数据大小/运行时间</strong>，我们就可大致得到磁盘的平均读写速度。结果如下：</p><img src="/2021/06/01/os/os-exp-io/chart_1.png" class="" title="chart_1"><img src="/2021/06/01/os/os-exp-io/chart_2.png" class="" title="chart_2"><img src="/2021/06/01/os/os-exp-io/chart_3.png" class="" title="chart_3"><img src="/2021/06/01/os/os-exp-io/chart_4.png" class="" title="chart_4"><img src="/2021/06/01/os/os-exp-io/chart_aggregate.png" class="" title="chart_aggregate"><p>可以发现，随着操作块大小的增加，RAM盘和DISK盘的吞吐量也逐渐增加。在各种读写场景下，RAM盘的读写速度显著高于Disk盘，这与其实现原理及在计算机体系结构中的层级位置相一致：</p><img src="/2021/06/01/os/os-exp-io/hierarchy.png" class="" title="hierarchy"><p>此外，由于我们使用了SSD（PCI-Express协议）作为磁盘存储媒介，可以看到当块大小为4KB时，DISK盘的吞吐量激增。这是由于在使用SSD磁盘时，系统通常会对其进行4K对齐优化以延长磁盘使用寿命，而4KB的读写块大小正好为一个磁盘块大小，因此磁盘控制器可以快速响应所需的请求。</p><img src="/2021/06/01/os/os-exp-io/4k-alignment.png" class="" title="4k-alignment"><h2 id="总结">总结</h2><p>在本实验中，我们在Minix3系统下分别划分了一块DISK盘空间与RAM盘空间，并通过一系列不同读写方式的组合测试了DISK盘和RAM盘的读写速度与特性，更加直观的认识了系统对于RAM和DISK存储媒介的不同管理方式及其在系统构架中的巨大传输速度差异，从而感受到了现代计算机系统构架的合理性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;在Minix3中创建一块可用的RAM盘，并比较其与DISK盘在各类存取方式下的速度。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;在Minix3中安装一块 X MB大小的RA</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 进程调度EDF</title>
    <link href="http://gonggongjohn.me/2021/04/27/os/os-exp-chrt/"/>
    <id>http://gonggongjohn.me/2021/04/27/os/os-exp-chrt/</id>
    <published>2021-04-27T03:54:46.000Z</published>
    <updated>2022-03-06T14:13:47.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>修改MINIX3系统内核，增加一个系统调用<strong>chrt</strong>，并在其中实现<strong>EDF(Earlist-Deadline-First)</strong>进程调度算法。</p><h2 id="内容与设计思想">内容与设计思想</h2><ol type="1"><li>提供设置进程执行期限的系统调度<code>chrt(long deadline)</code>，用于将调用该系统调用的进程设为实时进程，其执行的期限为：从调用处开始deadline秒。例如：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br>...<br>chrt(<span class="hljs-number">10</span>); <span class="hljs-comment">/* 该程序将可以运行的最长时间为10秒，若没有运行结束，则强制结束 */</span>  <br>...<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>在内核进程表中需要增加一个条目，用于表示进程的实时属性；修改相关代码，新增一个系统调用<strong>chrt</strong>，用于设置其进程表中的实时属性。</p></li><li><p>修改<strong>proc.c</strong>和<strong>proc.h</strong>中相关的调度代码，实现最早deadline的用户进程相对于其它用户进程具有更高的优先级，从而被优先调度运行。</p></li><li><p>在用户程序中，可以在不同位置调用多次chrt系统调用，在未到deadline之前，调用chrt将会改变该程序的deadline。</p></li><li><p>未调用chrt的程序将以普通的用户进程(非实时进程)在系统中运行。</p></li></ol><h2 id="实验过程">实验过程</h2><h3 id="minix系统构架">MINIX系统构架</h3><p>作为一个微内核构架系统，Minix将系统进程分为了4层：<strong>内核层</strong>、<strong>驱动管理层</strong>、<strong>服务器进程层</strong>、<strong>用户进程层</strong>，其中内核层运行在系统内核态，而后三层均运行在用户态。</p><p>在Minix中，层与层之间的消息传递通过系统调用来完成，而这又分为了<strong>System Call</strong>和<strong>Kernel Call</strong>。<strong>System Call</strong>用于应用层向服务层的消息传递，<strong>Kernel Call</strong>则用于服务层向内核层的消息传递。</p><img src="/2021/04/27/os/os-exp-chrt/minix_msgpass.png" class="" title="minix_msgpass"><p>消息传递本质上是进程间通讯，从内存角度看即为内存地址间的内容拷贝。幸运的是，Minix已经帮我们封装好了这些调用的底层实现，我们只需要传入正确的参数，系统会自动托管底层内存拷贝的相关事务：<strong>（minix/lib/libc/sys/syscall.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> _syscall(<span class="hljs-keyword">endpoint_t</span> who, <span class="hljs-keyword">int</span> syscallnr, message *msgptr)  <br>&#123;  <br>  <span class="hljs-keyword">int</span> status;  <br>  <br>  msgptr-&gt;m_type = syscallnr;  <br>  status = ipc_sendrec(who, msgptr);  <br>  <span class="hljs-keyword">if</span> (status != <span class="hljs-number">0</span>) &#123;  <br>    <span class="hljs-comment">/* &#x27;ipc_sendrec&#x27; itself failed. */</span>  <br>    <span class="hljs-comment">/* XXX - strerror doesn&#x27;t know all the codes */</span>  <br>    msgptr-&gt;m_type = status;  <br>  &#125;  <br>  <span class="hljs-keyword">if</span> (msgptr-&gt;m_type &lt; <span class="hljs-number">0</span>) &#123;  <br>    errno = -msgptr-&gt;m_type;  <br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">-1</span>);  <br>  &#125;  <br>  <span class="hljs-keyword">return</span>(msgptr-&gt;m_type);  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（minix/lib/libsys/kernel_call.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> _kernel_call(<span class="hljs-keyword">int</span> syscallnr, message *msgptr)  <br>&#123;  <br>  msgptr-&gt;m_type = syscallnr;  <br>  do_kernel_call(msgptr);  <br>  <span class="hljs-keyword">return</span>(msgptr-&gt;m_type);  <br>&#125;<br></code></pre></td></tr></table></figure><p>Minix系统采用了一种多级调度算法，通过维护16个进程队列并赋予其不同的队列优先级来实现进程的分级。其中，0号队列用于放置时钟及系统任务，系统会允许其持续运行直到阻塞（但如果其运行时间过长，系统会设置一个罚时将其暂时移出队列以防止其他进程发生饥饿），7号队列用于放置用户进程，15号队列用于放置闲置进程。在每个进程队列内部，系统采用了时间片轮转的方式使得进程可以公平的分配到运行时间。</p><img src="/2021/04/27/os/os-exp-chrt/proc_queue.png" class="" title="proc_queue"><h3 id="edf调度实现">EDF调度实现</h3><p>要实现EDF调度算法，需要记录每个进程的截止时间。为此，我们在<strong>进程控制块（Process Control Block）</strong>的结构定义中新增一个<strong>p_deadline</strong>项：<strong>（minix/kernel/proc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> &#123;</span>  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>  <br>    <span class="hljs-keyword">long</span> p_deadline;  <span class="hljs-comment">/* Deadline of the process */</span>  <br>  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由于Minix采用多级进程队列，我们可以选择其中的一个进程队列，并在其中使用EDF算法进行调度。由于要保证所有调用chrt系统调用的进程都使用该调度规则，所选择的进程队列的整体优先级要高于用户进程所在的队列，但同时又不能影响系统进程的运作。这里我们选择优先级为5的队列作为EDF调度队列（事实上，4号队列也可以作为要替换的目标队列，但为了防止驱动或系统进程临时调度到这一队列，在此我们将其留出作为缓冲）。</p><p>对于一般的进程，我们在进程初始化时将<strong>p_deadline</strong>置为0。这样在进程调度时，若检测到<strong>p_deadline&gt;0</strong>，即可得知其为调用了<strong>chrt</strong>系统调用的进程，我们便将其加入优先级为5的队列中：<strong>（minix/kernel/proc.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(    </span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">register</span> struct proc *rp  <span class="hljs-comment">/* this process is now runnable */</span>    </span></span><br><span class="hljs-function"><span class="hljs-params">)</span>    </span><br><span class="hljs-function"></span>&#123;    <br>    <span class="hljs-comment">//Unrelated codes   </span><br>    <span class="hljs-keyword">if</span>(rp-&gt;p_deadline &gt; <span class="hljs-number">0</span>)&#123;    <br>        rp-&gt;p_priority = <span class="hljs-number">5</span>;    <br>    &#125;    <br>    <span class="hljs-comment">//Unrelated codes    </span><br>&#125;   <br>  <br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue_head</span><span class="hljs-params">(struct proc *rp)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">if</span>(rp-&gt;p_deadline &gt; <span class="hljs-number">0</span>)&#123;  <br>        rp-&gt;p_priority = <span class="hljs-number">5</span>;  <br>    &#125;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在调度时，我们要找出队列中<strong>p_deadline</strong>最小的进程并返回。一个可行的办法是维护一个优先队列，按照<strong>p_deadline</strong>对进程控制结构建立小根堆，其可以在 <span class="math inline">\(\mathcal{O}(\lg n)\)</span> 的时间内返回目标进程，但这样做需要修改整个进程队列的数据结构，操作起来过于复杂，也不符合Minix3的原始设计风格。由于进入该队列的进程是由用户指定的，其规模通常较小，因此我们可以直接遍历整个队列，其效率仍然是可以接受的。实现代码如下：<strong>（minix/kernel/proc.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> struct proc * <span class="hljs-title">pick_proc</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">for</span> (q=<span class="hljs-number">0</span>; q &lt; NR_SCHED_QUEUES; q++) &#123;      <br>        <span class="hljs-comment">//Unrelated codes  </span><br>        <span class="hljs-comment">//EDF algorithm  </span><br>        <span class="hljs-keyword">if</span>(q == <span class="hljs-number">5</span>)&#123;  <br>            rp = rdy_head[q];  <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">cur</span> = <span class="hljs-title">rp</span>-&gt;<span class="hljs-title">p_nextready</span>;</span>  <br>            <span class="hljs-comment">//Traverse the queue  </span><br>            <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">NULL</span>) &#123;  <br>                <span class="hljs-keyword">if</span>(proc_is_runnable(cur) &amp;&amp; (cur-&gt;p_deadline &gt; <span class="hljs-number">0</span>)) &#123;  <br>                    <span class="hljs-keyword">if</span> (rp-&gt;p_deadline &gt; cur-&gt;p_deadline) &#123;  <br>                        rp = cur;  <br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rp-&gt;p_deadline == <span class="hljs-number">0</span>)&#123;  <br>                        rp = cur;  <br>                    &#125;  <br>                &#125;  <br>                cur = cur-&gt;p_nextready;  <br>            &#125;  <br>        &#125;  <br>        <span class="hljs-comment">//Unrelated codes  </span><br>        <span class="hljs-keyword">return</span> rp;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用层实现">应用层实现</h3><p>在应用层中，我们需要实现面向用户的<strong>chrt函数</strong>，并将用户指定的进程和截止时间传入服务层。</p><p>首先我们在POSIX规定的操作系统API头文件中定义chrt的函数原型：<strong>（include/unistd.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>; <span class="hljs-comment">// 0 - Normal process; &gt;0 - Realtime process; &lt;0 - Unsuccessful</span><br></code></pre></td></tr></table></figure><p>用户指定的截止时间是一个相对时间，即从该语句执行时刻向后deadline秒，因此我们需要将其转为绝对时间（事实上是相对系统时钟当前时刻的时间）。Minix系统提供了一个<strong>clock_gettime</strong>函数用于获取系统的时间戳，因此我们可以直接调用该函数来算出当前进程所指定deadline对应的绝对时刻：<strong>（minix/lib/libc/sys/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/cdefs.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;namespace.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;lib.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>&#123;  <br>    message m;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timespec</span> <span class="hljs-title">now</span>;</span>  <br>    <span class="hljs-built_in">memset</span>(&amp;m, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(m));  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    <span class="hljs-keyword">if</span>(deadline &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(deadline &gt; <span class="hljs-number">0</span>)&#123;  <br>        clock_gettime(CLOCK_REALTIME, &amp;now);  <br>        deadline = now.tv_sec + deadline;  <br>    &#125;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>此外，我们还需要对传入的deadline参数做一些边界处理，并通过<strong>alarm</strong>系统调用将超时响应的应用提前结束。随后我们便可以将其放入一个消息结构体中，并通过 **System Call（_syscall函数）** 将消息传入服务层中：<strong>（minix/lib/libc/sys/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">chrt</span><span class="hljs-params">(<span class="hljs-keyword">long</span> deadline)</span></span>&#123;  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    alarm((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) deadline);  <br>    <span class="hljs-comment">//Unrelated codes  </span><br>    m.m2_l1 = deadline;  <br>    <span class="hljs-keyword">return</span> _syscall(PM_PROC_NR, PM_CHRT, &amp;m);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务层实现">服务层实现</h3><p>对于要实现的chrt系统调用来说，服务层起到了消息传递的作用。在Minix3系统中，这需要两步来完成，先接受应用层传来的消息，再将消息重新打包并通过<strong>Kernel Call</strong>传入内核中。</p><p>首先我们来实现消息接受的功能。在应用层中，我们通过调用标识符为<strong>PM_CHRT</strong>的System Call将消息发到了服务层中，于是我们需要在服务层中申明这一System Call并将其与消息接收函数相关联：<strong>（minix/include/minix/callnr.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PM_CHRT     (PM_BASE + 48)  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NR_PM_CALLS     49  <span class="hljs-comment">/* highest number from base plus one */</span>  </span><br></code></pre></td></tr></table></figure><p><strong>（minix/servers/pm/table.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> (* <span class="hljs-keyword">const</span> call_vec[NR_PM_CALLS])(<span class="hljs-keyword">void</span>) = &#123;  <br>    CALL(PM_CHRT)       = do_chrt,      <span class="hljs-comment">/* chrt */</span>  <br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>（minix/servers/pm/proto.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* chrt.c */</span>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>至于消息接收函数的实现，我们只需要将发来消息的进程号和发来的消息传递给承接服务层向内核进行消息传递的函数即可：<strong>（minix/servers/pm/chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;pm.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/com.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/callnr.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;mproc.h&quot;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">()</span></span>&#123;  <br>    sys_chrt(who_p, m_in.m2_l1);  <br>    <span class="hljs-keyword">return</span> OK;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们来实现服务层向内核层的消息传递。首先我们定义消息传递函数的原型：<strong>（minix/include/minix/syslib.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sys_chrt</span><span class="hljs-params">(<span class="hljs-keyword">endpoint_t</span> proc_ep, <span class="hljs-keyword">long</span> deadline)</span></span>;<br></code></pre></td></tr></table></figure><p>对于该函数我们只需要将传入的函数重新打包为一个新的消息，并通过**Kernel Call（_kernel_call函数）<strong>将其传入内核即可：</strong>（minix/lib/libsys/sys_chrt.c）**</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;syslib.h&quot;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sys_chrt</span><span class="hljs-params">(<span class="hljs-keyword">endpoint_t</span> proc_ep, <span class="hljs-keyword">long</span> deadline)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    message m;  <br>    m.m2_i1 = proc_ep;  <br>    m.m2_l1 = deadline;  <br>    <span class="hljs-keyword">return</span> _kernel_call(SYS_CHRT, &amp;m);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内核层实现">内核层实现</h3><p>首先我们定义服务层中调用的<strong>SYS_CHRT</strong>内核调用，并将其与内核实现函数相关联：<strong>（minix/include/minix/com.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> SYS_CHRT (KERNEL_CALL + 58) <span class="hljs-comment">/* sys_chrt() */</span>  </span><br>  <br><span class="hljs-comment">/* Total */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NR_SYS_CALLS    59  <span class="hljs-comment">/* number of kernel calls */</span></span><br></code></pre></td></tr></table></figure><p><strong>（minix/kernel/system.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">map</span>(SYS_CHRT, do_chrt);       <span class="hljs-comment">/* chrt */</span><br></code></pre></td></tr></table></figure><p>随后我们定义实现函数的原型，并在内核中默认启用它：<strong>（minix/kernel/config.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> USE_CHRT           1    <span class="hljs-comment">/* chrt */</span></span><br></code></pre></td></tr></table></figure><p><strong>（minix/kernel/system.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">(struct proc * caller, message *m_ptr)</span></span>;  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> ! USE_CHRT  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> do_chrt NULL  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>内核的任务就是把上层传递下来的消息解包，并将目标进程的截止时间设置为用户所指定的时间：<strong>（minix/kernel/system/do_chrt.c）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/system.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;kernel/vm.h&quot;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/endpoint.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;minix/u64.h&gt;  </span></span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> USE_CHRT  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">do_chrt</span><span class="hljs-params">(struct proc *caller, message *m_ptr)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">rp</span>;</span>  <br>    <span class="hljs-keyword">long</span> deadline;  <br>    deadline = m_ptr-&gt;m2_l1;  <br>    rp = proc_addr(m_ptr-&gt;m2_i1);  <br>    rp-&gt;p_deadline = deadline;  <br>    <span class="hljs-keyword">return</span> OK;  <br>&#125;  <br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_FORK */</span></span><br></code></pre></td></tr></table></figure><h3 id="功能测试">功能测试</h3><p>我们使用以下代码来对实现的功能进行测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;signal.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;lib.h&gt;  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">proc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>  <span class="hljs-comment">//创建三个子进程，并赋予子进程id  </span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4</span>; i++)  <br>  &#123;  <br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)  <br>    &#123;  <br>      proc(i);  <br>    &#125;  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">proc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>  <span class="hljs-keyword">int</span> loop;  <br>  <span class="hljs-keyword">switch</span> (id)  <br>  &#123;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//子进程1，设置deadline=20  </span><br>    chrt(<span class="hljs-number">20</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc1 set success\n&quot;</span>);  <br>    <span class="hljs-comment">//sleep(1);  </span><br>    <span class="hljs-keyword">break</span>;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//子进程2，设置deadline=15  </span><br>    chrt(<span class="hljs-number">15</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc2 set success\n&quot;</span>);  <br>    <span class="hljs-comment">//sleep(1);  </span><br>    <span class="hljs-keyword">break</span>;  <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">//子进程3，普通进程  </span><br>    chrt(<span class="hljs-number">0</span>);  <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc3 set success\n&quot;</span>);  <br>    <span class="hljs-keyword">break</span>;  <br>  &#125;  <br>  <span class="hljs-keyword">for</span> (loop = <span class="hljs-number">1</span>; loop &lt; <span class="hljs-number">40</span>; loop++)  <br>  &#123;  <br>    <span class="hljs-comment">//子进程1在5s后设置deadline=5  </span><br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-number">1</span> &amp;&amp; loop == <span class="hljs-number">5</span>)  <br>    &#123;  <br>      <span class="hljs-keyword">long</span> tmp;  <br>      tmp = chrt(<span class="hljs-number">5</span>);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Status of CHRT: %d\n&quot;</span>, tmp);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Change proc1 deadline to 5s\n&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-comment">//子进程3在10s后设置deadline=3  </span><br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-number">3</span> &amp;&amp; loop == <span class="hljs-number">10</span>)  <br>    &#123;  <br>      chrt(<span class="hljs-number">3</span>);  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Change proc3 deadline to 3s\n&quot;</span>);  <br>    &#125;  <br>    sleep(<span class="hljs-number">1</span>); <span class="hljs-comment">//睡眠，否则会打印很多信息  </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prc%d heart beat %d\n&quot;</span>, id, loop);  <br>  &#125;  <br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>该程序创建了3个子进程，并对其分别设置了不同的截止时间，其运行结果如下：</p><img src="/2021/04/27/os/os-exp-chrt/run_1.png" class="" title="run_1"><img src="/2021/04/27/os/os-exp-chrt/run_2.png" class="" title="run_2"><p>可以看到，程序中chrt系统调用的返回值为0，表明其成功将消息传入了内核，且程序行为与预期相符，表明了实现的正确性。</p><h2 id="总结">总结</h2><p>在本实验中，我们通过修改Minix3的系统源码，实现了一个完整的系统调用，并在进程调度中实现了EDF算法，极大的加深了我们对一个微内核操作系统的系统调用、消息传递及进程调度机制的理解。</p><p>--&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;修改MINIX3系统内核，增加一个系统调用&lt;strong&gt;chrt&lt;/strong&gt;，并在其中实现&lt;strong&gt;EDF(Earlist-Deadline-First)&lt;/strong&gt;进程调度算法。&lt;/p&gt;
&lt;h2 id=&quot;内容与设</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>离散型随机变量整理</title>
    <link href="http://gonggongjohn.me/2021/04/21/math-prob-stat/prob-drv/"/>
    <id>http://gonggongjohn.me/2021/04/21/math-prob-stat/prob-drv/</id>
    <published>2021-04-21T09:56:35.000Z</published>
    <updated>2022-02-09T10:32:53.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二项分布">二项分布</h2><h3 id="定义">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math inline">\(X\)</span> 的分布列满足 <span class="math display">\[P(X=k) = \binom{n}{k} p^k (1-p)^{1-k}\]</span> 其中 <span class="math inline">\(n \in \mathbb{N}^+, k \in \{0,1,2,...,n\}, p \in [0,1]\)</span>，则称随机变量 <span class="math inline">\(X\)</span> 满足二项分布，记为 <span class="math inline">\(X \sim B(n, p)\)</span></p></blockquote><a id="more"></a><p><strong>适用场景：</strong>在 <span class="math inline">\(n\)</span> 次伯努利试验中，若每次成功的概率均为 <span class="math inline">\(p\)</span>，求成功 <span class="math inline">\(k\)</span> 次的概率</p><p>二项分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X \leq k)=\left\{\begin{aligned}\sum_\limits{i=0}^{\lfloor k \rfloor} \binom{n}{k}p^k(1-p)^{1-k}&amp;,&amp;k \geq 0  \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>不完全Beta函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= I_{1-p} (n-k, k+1) \\&amp;= \frac{\textrm{B} (1-p;n-k,k+1)}{\textrm{B} (n-k,k+1)} \\&amp;=\frac{\int_0^{1-p} t^{n-k-1}(1-t)^k dt}{\int_0^1 t^{n-k-1}(1-t)^k dt} \ , k \geq 0\end{aligned}\]</span></p><h3 id="期望和方差">期望和方差</h3><p>由于每一次伯努利试验均为独立的，因此我们可以将 <span class="math inline">\(n\)</span> 次试验分解为 <span class="math inline">\(n\)</span> 个单次试验，即若定义 <span class="math display">\[Y_i = \left\{\begin{aligned}1,&amp; Succeed \ \ in \ \ i^{th} \ \ exp \\0,&amp; Fail \ \ in \ \ i^{th} \ \ exp\end{aligned}\right.\]</span> 则 <span class="math inline">\(X=\sum\limits_{i = 1}^n Y_i\)</span> （此时 <span class="math inline">\(Y_i\)</span> 服从的分布即 <span class="math inline">\(B(1,p)\)</span> 也被称为<strong>二点分布</strong>或<strong>0-1分布</strong>）</p><p>于是我们可以快速求出二项分布的期望 <span class="math display">\[\begin{aligned}E(X) &amp;= E \left( \sum_{i = 1}^n Y_i \right) \\&amp;= \sum_{i = 1}^n E(Y_i) \\&amp;= \sum_{i = 1}^n p \\&amp;=np\end{aligned}\]</span></p><p>同理，由 <span class="math display">\[Var(Y_i) = (1-p)^2 p + (0-p)^2(1-p)=p(1-p)\]</span> 可知二项分布的方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= Var(\sum_\limits{i=1}^n Y_i) \\&amp;= \sum_\limits{i=1}^n Var(Y_i) \\&amp;= \sum_\limits{i=1}^n p(1-p) \\&amp;= np(1-p)\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求二项分布期望及方差）：</strong> <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_\limits{k = 0}^n k \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= \sum_\limits{k = 1}^n k \binom{n}{k} p^k (1-p)^{n-k} \\\end{aligned}\]</span> 由于 <span class="math display">\[\begin{aligned}k\binom{n}{k} &amp;= k \cdot \frac{n!}{k!(n-k)!} \\&amp;=\frac{n!}{(k-1)!(n-k)!} \\&amp;=n \cdot \frac{(n-1)!}{(k-1)!(n-k)!} \\&amp;=n \binom{n-1}{k-1}\end{aligned}\]</span> 因此 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_\limits{k = 1}^n n \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;=np \sum_\limits{k = 1}^n \binom{n-1}{k-1} p^{k-1} (1-p)^{n-k} \\&amp;=np \sum_\limits{m = 0}^{n-1} \binom{n-1}{m} p^m (1-p)^{n-1-m} \\&amp;=np \cdot (p+1-p)^{n-1} \\&amp;=np\end{aligned}\]</span> 又由 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_\limits{k = 0}^n k^2 \binom{n}{k} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n k \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \sum_\limits{k = 1}^n (k - 1 + 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n \cdot \left[ \sum_\limits{k = 1}^n (k - 1) \binom{n-1}{k-1} p^k (1-p)^{n-k} + \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \right] \\&amp;=n \cdot \sum_\limits{k = 2}^n (n - 1) \binom{n-2}{k-2} p^k (1-p)^{n-k} + n \cdot \sum_\limits{k = 1}^n  \binom{n-1}{k-1} p^k (1-p)^{n-k} \\&amp;= n(n-1)p^2 + np\end{aligned}\]</span> 可知 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=n(n-1)p^2 + np - n^2p^2 \\&amp;=n^2p^2-np^2+ np - n^2p^2 \\&amp;=np(1-p)\end{aligned}\]</span></p></blockquote><h2 id="泊松分布">泊松分布</h2><h3 id="定义-1">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> 其中 <span class="math display">\[k \in \{0,1,2,3,...\}, \lambda&gt;0\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足泊松分布，记为 <span class="math display">\[X \sim P(\lambda)\]</span></p></blockquote><p><strong>适用场景：</strong>求一段固定长度的时间中事件发生了 <span class="math display">\[k\]</span> 次的概率</p><p>泊松分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X \leq k) = \left\{\begin{aligned}\sum_{i = 0}^{\lfloor k \rfloor} \frac{\lambda^i}{i!}e^{-\lambda}&amp;,&amp; k \geq 0 \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>不完全伽马函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= \frac{\Gamma(\lfloor k + 1\rfloor, \lambda)}{\Gamma(\lfloor k +1 \rfloor)} \\&amp;=Q(\lfloor k + 1\rfloor, \lambda)\end{aligned}\]</span></p><h3 id="期望和方差-1">期望和方差</h3><p>利用 <span class="math display">\[e^x = \sum_\limits{k = 0}^\infty \frac{x^k}{k!}\]</span> 可快速求出泊松分布的期望 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 0}^\infty k \cdot \frac{\lambda^k}{k!} e^{-\lambda} \\&amp;=e^{-\lambda} \cdot \sum_{k = 1}^\infty k \cdot \frac{\lambda^k}{k!} \\&amp;=\lambda e^{-\lambda} \cdot \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} e^\lambda \\&amp;=\lambda\end{aligned}\]</span> 又由 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 0}^\infty k^2 \cdot \frac{\lambda^k}{k!} e^{-\lambda} \\&amp;=e^{-\lambda} \sum_{k = 1}^\infty k^2 \cdot \frac{\lambda^k}{k!} \\&amp;=\lambda e^{-\lambda} \sum_{k = 1}^\infty k \cdot \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} \sum_{k = 1}^\infty (k-1+1) \cdot \frac{\lambda^{k-1}}{(k-1)!} \\&amp;=\lambda e^{-\lambda} \left( \sum_{k = 2}^\infty (k-1) \cdot \frac{\lambda^{k-1}}{(k-1)!} + \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \right) \\&amp;=\lambda e^{-\lambda} \left( \lambda \sum_{k = 2}^\infty \frac{\lambda^{k-2}}{(k-2)!} + \sum_{k = 1}^\infty \frac{\lambda^{k-1}}{(k-1)!} \right) \\&amp;=\lambda e^{-\lambda} \left( \lambda e^\lambda + e^\lambda \right) \\&amp;=\lambda^2 + \lambda\end{aligned}\]</span> 可知其方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \lambda^2 + \lambda - \lambda^2 \\&amp;=\lambda\end{aligned}\]</span></p><h3 id="泊松分布与二项分布">泊松分布与二项分布</h3><p>泊松分布与二项分布有如下定理成立：</p><blockquote><p><strong>Theorem(Poisson):</strong> 设 <span class="math display">\[k \leq n \in N, \lambda &gt; 0\]</span>，<span class="math display">\[\{p_n\}\]</span> 是一个与 <span class="math display">\[n\]</span> 有关的序列且 <span class="math display">\[0 \leq p_n \leq 1\]</span>，<span class="math display">\[np_n \to \lambda (n \to \infty)\]</span>，则 <span class="math display">\[\lim_{n \to \infty} \binom{n}{k} p_n^k(1-p_n)^{n-k} = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> <strong>Proof:</strong> 令 <span class="math display">\[np_n = \lambda_n\]</span></p><p>故由 <span class="math display">\[np_n \to \lambda(n \to \infty)\]</span> 可知 <span class="math display">\[\lambda_n \to \lambda(n \to \infty)\]</span></p><p>故 <span class="math display">\[\begin{aligned}\binom{n}{k} p_n^k(1-p_n)^{n-k} &amp;= \binom{n}{k} (\frac{\lambda_n}{n})^k \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;= \frac{n(n-1) \cdots (n-k-1)}{k!} \cdot \frac{\lambda_n^k}{n^k} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;=\frac{\lambda_n^k}{k!} \cdot \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k}\end{aligned}\]</span> 又 <span class="math display">\[\lim_{n \to \infty} \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} = 1^k = 1 \\\lim_{n \to \infty} \left( 1-\frac{\lambda_n}{n} \right)^{n-k} = e^{-\lambda}\]</span> 因此 <span class="math display">\[\begin{aligned}\lim_{n \to \infty} \binom{n}{k} p_n^k(1-p_n)^{n-k} &amp;= \lim_{n \to \infty} \frac{\lambda_n^k}{k!} \cdot \frac{n-1}{n} \cdot \frac{n-2}{n} \cdots \frac{n-k-1}{n} \cdot \left( 1-\frac{\lambda_n}{n} \right)^{n-k} \\&amp;=\frac{\lambda^k}{k!} e^{-\lambda}\end{aligned}\]</span></p></blockquote><p>由上面的定理可以看出，泊松分布可以看作是一个二项分布当 <span class="math display">\[n\]</span> 趋于无穷时的极限情况（此时泊松分布中的参数 <span class="math display">\[\lambda\]</span> 即为二项分布的期望 <span class="math display">\[np\]</span>），因此对于一个二项分布 <span class="math display">\[B(n,p)\]</span> 来说，当 <strong><span class="math display">\[n\]</span> 充分大且 <span class="math display">\[p\]</span> 充分小</strong>时，其对应点的值可使用泊松分布的值来近似。即若随机变量 <span class="math display">\[X \sim B(n,p)\]</span>，则 <span class="math display">\[P(X=k) \approx \frac{n^kp^k}{k!} e^{-np}\]</span> 一般来说，当 <span class="math display">\[n \geq 20, p \leq 0.05\]</span> 时，泊松分布就可作为二项分布的一个可用的近似；当 <span class="math display">\[n \geq 100, np \leq 10\]</span> 时，泊松分布就是二项分布的一个较为精准的近似了。</p><h2 id="几何分布">几何分布</h2><h3 id="定义-2">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = (1-p)^{k-1} p\]</span> 其中 <span class="math display">\[k \in \{1,2,3,...\}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足几何分布，记为 <span class="math display">\[X \sim Ge(p)\]</span></p></blockquote><p><strong>适用场景：</strong>在一组伯努利实验中，若每次成功的概率为 <span class="math display">\[p\]</span>，求当进行到第 <span class="math display">\[k\]</span> 次试验时才第一次成功的概率</p><p>几何分布的<strong>累积分布函数</strong>为 <span class="math display">\[\begin{aligned}F(k) &amp;= P(X \leq k) \\&amp;= \sum_{i =1}^{\lfloor k \rfloor} (1-p)^{i-1}p \\&amp;=p \cdot \frac{1-(1-p)^{\lfloor k \rfloor}}{p} \\&amp;=1-(1-p)^{\lfloor k \rfloor}, k \geq 1\end{aligned}\]</span></p><h3 id="无记忆性">无记忆性</h3><p>几何分布有如下的性质成立：</p><blockquote><p><strong>Theorem:</strong> 若 <span class="math display">\[X \sim Ge(p)\]</span>，则对任意 <span class="math display">\[m,n \geq 1\]</span>，有 <span class="math display">\[P(X &gt; m+n | X &gt; m) = P(X &gt; n)\]</span> <strong>Proof:</strong> 由于 <span class="math display">\[\begin{aligned}P(X &gt; m) &amp;= \sum_{k = m+1}^\infty (1-p)^{k-1} p \\&amp;= p \cdot \frac{(1-p)^m}{p} \\&amp;=(1-p)^m\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}P(X &gt; m+n | X &gt; m) &amp;= \frac{P(X&gt;m+n,X&gt;m)}{P(X&gt;m)} \\&amp;=\frac{P(X&gt;(m+n))}{P(X&gt;m)} \\&amp;=\frac{(1-p)^{m+n}}{(1-p)^m} \\&amp;=(1-p)^{n} \\&amp;=P(X&gt;n)\end{aligned}\]</span></p></blockquote><p>该定理表明，在一串伯努利试验中若前 <span class="math display">\[m\]</span> 次试验均不成功，则后续试验每一次成功的概率与重新从第一次开始计数试验成功的概率相同，即前 <span class="math display">\[m\]</span> 次试验并不对接下来的结果造成任何影响。</p><p>事实上，几何分布是离散型分布中<strong>唯一</strong>具有无记忆性的分布：</p><blockquote><p><strong>Theorem:</strong> 设 <span class="math display">\[X\]</span> 为一个离散随机变量，其取值范围为 <span class="math display">\[\{1,2,3,...\}\]</span>，若对任意 <span class="math display">\[m,n \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[P(X&gt;m+n | X&gt;m) = P(X&gt;n)\]</span>，则存在 <span class="math display">\[0 \leq p \leq 1\]</span>，使得 <span class="math display">\[X \sim Ge(p)\]</span></p><p><strong>Proof:</strong> 令 <span class="math display">\[F(x) = P(X&gt;x)\]</span></p><p>则原条件可写为对任意 <span class="math display">\[m,n \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[\frac{F(m+n)}{F(m)} = F(n)\]</span> 即 <span class="math display">\[F(m+n) = F(m)F(n)\]</span></p><p>令 <span class="math display">\[m = n = 1\]</span>，则 <span class="math display">\[F(2) = F^2(1)\]</span></p><p>再令 <span class="math display">\[m=2, n =1\]</span>，则 <span class="math display">\[F(3) = F^3(1)\]</span></p><p>如此递推，可得 <span class="math display">\[F(m) = F^m(1)\]</span></p><p>令 <span class="math display">\[P(X=1) = p\]</span></p><p>则 <span class="math display">\[\begin{aligned}F(1) &amp;= P(X&gt;1) \\&amp;=1-P(X=1) \\&amp;=1-p\end{aligned}\]</span> 由此可知对任意 <span class="math display">\[m \geq 1 \in \mathbb{N}\]</span>，有 <span class="math display">\[\begin{aligned}P(X=m) &amp;= P(X&gt;m-1) - P(X&gt;m) \\&amp;=F(m-1) - F(m) \\&amp;=F^{m-1}(1) - F^m(1) \\&amp;=(1-p)^{m-1} - (1-p)^m \\&amp;=(1-p)^{m-1}p\end{aligned}\]</span> 即 <span class="math display">\[X \sim Ge(p)\]</span></p></blockquote><h3 id="期望和方差-2">期望和方差</h3><p>利用几何分布的无记忆性，我们可以快速求出几何分布的期望和方差。</p><p>易见 <span class="math display">\[E(X|X=1) = 1\]</span></p><p>而 <span class="math display">\[\begin{aligned}E(X|X&gt;1) &amp;= \sum_{k = 2}^\infty k \cdot P(X=k|X&gt;1) \\&amp;= \sum_{k = 2}^\infty k \cdot P(X=k-1) \\&amp;= \sum_{k = 2}^\infty (k-1) \cdot P(X=k-1) + \sum_{k = 2}^\infty P(X=k-1) \\&amp;=E(X) + 1\end{aligned}\]</span> 故由<strong>全期望公式</strong>可知 <span class="math display">\[\begin{aligned}E(X) &amp;= P(X=1)E(X|X=1) + P(X&gt;1)E(X|X&gt;1) \\&amp;=p + (1-p) (E(X) + 1) \\&amp;=(1-p) \cdot E(X) + 1\end{aligned}\]</span> 即几何分布的期望 <span class="math display">\[E(X) = \frac{1}{p}\]</span></p><p>同理，<span class="math display">\[E(X^2|X = 1) = 1\]</span> <span class="math display">\[\begin{aligned}E(X^2|X&gt;1) &amp;= \sum_{k = 2}^\infty k^2 \cdot P(X=k|X&gt;1) \\&amp;= \sum_{k = 2}^\infty k^2 \cdot P(X=k-1) \\&amp;= \sum_{k = 2}^\infty (k-1)^2 \cdot P(X=k-1) + 2 \cdot \sum_{k = 2}^\infty (k-1) \cdot P(X=k-1) + \sum_{k = 2}^\infty P(X=k-1) \\&amp;=E(X^2) + 2E(X) + 1\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}E(X^2) &amp;= P(X = 1)E(X^2|X=1) + P(X&gt;1)E(X^2|X&gt;1) \\&amp;= p + (1-p)(E(X^2) + 2E(X) + 1) \\&amp;= (1-p)E(X^2) + 2(1-p)E(X) + 1 \\&amp;=(1-p)E(X^2) + \frac{2}{p} - 1\end{aligned}\]</span> 于是 <span class="math display">\[E(X^2) = \frac{2-p}{p^2}\]</span></p><p>因此几何分布的方差 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=\frac{2-p}{p^2} - \frac{1}{p^2} \\&amp;=\frac{1-p}{p^2}\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求几何分布期望和方差）：</strong></p><p>首先我们对其表达式进行化简： <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 1}^\infty k(1-p)^{k-1} p \\&amp;=p \cdot \sum_{k = 1}^\infty k(1-p)^{k-1} \\&amp;=p \cdot \sum_{k = 1}^\infty \left( -\frac{d}{dp} (1-p)^k \right)\end{aligned}\]</span> 由于几何级数<strong>一致收敛</strong>于其极限值，故 <span class="math display">\[\sum_{k = 1}^\infty \frac{d}{dp} \left( (1-p)^k \right)  = \frac{d}{dp} \sum_{k = 1}^\infty \left( (1-p)^k \right)\]</span> 因此几何分布的期望为 <span class="math display">\[\begin{aligned}E(X) &amp;=-p \cdot \frac{d}{dp} \left( \sum_{k = 1}^\infty (1-p)^k \right) \\&amp;= -p \cdot \left( - \frac{1}{p^2}\right) \\&amp;=\frac{1}{p}\end{aligned}\]</span> 同理可知 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 1}^\infty k^2 (1-p)^{k-1} p \\&amp;=p \sum_{k = 1}^\infty k(k+1-1) (1-p)^{k-1} \\&amp;=p \left( \sum_{k = 1}^\infty \left(\frac{d^2}{dp^2} \left( (1-p)^{k+1} \right) \right) - \sum_{k = 1}^\infty \left( \frac{d}{dp} \left( (1-p)^k \right) \right) \right) \\&amp;=p \left( \frac{d^2}{dp^2} \left( \sum_{k = 1}^\infty \left( (1-p)^{k+1} \right) \right) - \frac{d}{dp} \left( \sum_{k = 1}^\infty \left( (1-p)^k \right) \right) \right) \\&amp;=p \left(\frac{d^2}{dp^2} \left( \frac{1}{p}-2+p \right) - \frac{d}{dp} \left( \frac{1}{p} - 1 \right) \right) \\&amp;=\frac{2}{p^2} - \frac{1}{p}\end{aligned}\]</span> 因此其方差为 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;=\frac{2}{p^2} - \frac{1}{p} - \frac{1}{p^2} \\&amp;=\frac{1-p}{p^2}\end{aligned}\]</span></p></blockquote><h2 id="负二项分布">负二项分布</h2><h3 id="定义-3">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \binom{k-1}{r-1} p^r (1-p)^{k-r}\]</span> 其中 <span class="math display">\[r \leq k \in \{1,2,3,...\}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足负二项分布，记为 <span class="math display">\[X \sim Nb(r, p)\]</span></p></blockquote><p><strong>适用场景：</strong>在一组伯努利实验中，若每次成功的概率为 <span class="math display">\[p\]</span>，求第 <span class="math display">\[r\]</span> 次成功时总共进行的试验次数 <span class="math display">\[k\]</span></p><p>负二项分布的累积分布函数 <span class="math display">\[F(k) = P(X \leq k) = \left\{\begin{aligned}\sum_{i = 1}^k \binom{i-1}{r-1} p^r (1-p)^{i-r}&amp;,&amp; k \geq r \\0&amp;,&amp; k &lt; r\end{aligned}\right.\]</span> 若引入<strong>不完全Beta函数</strong>，则其累积分布函数的非负部分还可表示为 <span class="math display">\[\begin{aligned}F(k) &amp;= I_{1-p}(r, k-r+1) \\&amp;=\frac{B(1-p;r,k-r+1)}{B(r,k-r+1)}\end{aligned}\]</span></p><h3 id="负二项分布与几何分布">负二项分布与几何分布</h3><p>从直观上来看，几何分布描述的是一组伯努利实验中<strong>第一次</strong>成功的实验次数，而负二项分布描述的是一组伯努利实验中<strong>第 <span class="math display">\[r\]</span> 次</strong>成功的实验次数，自然的，几何分布可以被负二项分布所包含。事实上，对于一个负二项分布，当 <span class="math display">\[r = 1\]</span> 时，其分布列退化为 <span class="math display">\[P(X=k)=(1-p)^{k - 1}p\]</span> 此即为几何分布的分布列。由此可知 <span class="math display">\[Ge(p) = Nb(1,p)\]</span></p><h3 id="期望和方差-3">期望和方差</h3><p>与二项分布类似，我们可将负二项分布拆分成一系列相互独立的事件以简化期望和方差的计算。注意到负二项分布与几何分布的关系，我们可将一个负二项分布中的实验拆分为 <span class="math display">\[r\]</span> 个独立成功的实验，而每次实验服从一个几何分布。</p><p>令 <span class="math display">\[X_i\]</span> 为第 <span class="math display">\[i\]</span> 次实验成功所用次数的随机变量 <span class="math display">\[(1 \leq i \leq r)\]</span>，<span class="math display">\[X\]</span> 为前 <span class="math display">\[r\]</span> 次实验成功所用次数的随机变量</p><p>此时 <span class="math display">\[1 \leq \forall i \neq j \leq r\]</span>，<span class="math display">\[X_i\]</span> 与 <span class="math display">\[X_j\]</span> 独立，且 <span class="math display">\[X_i \sim Ge(p), X \sim Nb(r, p), X = \sum_\limits{i = 1}^r X_i\]</span></p><p>于是由几何分布的期望可知 <span class="math display">\[\begin{aligned}E(X) &amp;= E(\sum_{i = 1}^r X_i) \\&amp;=\sum_{i = 1}^r E(X_i) \\&amp;=\sum_{i = 1}^r \frac{1}{p} \\&amp;=\frac{r}{p}\end{aligned}\]</span></p><p>同理 <span class="math display">\[\begin{aligned}Var(X) &amp;= Var(\sum_{i = 1}^r X_i) \\&amp;=\sum_{i = 1}^r Var(X_i) \\&amp;=\sum_{i = 1}^r \frac{1-p}{p^2} \\&amp;=\frac{r(1-p)}{p^2}\end{aligned}\]</span></p><blockquote><p><strong>另解（纯分析法求负二项分布的期望和方差）：</strong> <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = r}^{\infty} k \binom{k-1}{r-1} p^r (1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;=\frac{r}{p} \sum_{k = r}^{\infty} \frac{k!}{r!(k-r)!} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r}{p} \sum_{k = r}^{\infty} \binom{k}{r} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r}{p}\end{aligned}\]</span> 又 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = r}^{\infty} k^2 \binom{k-1}{r-1} p^r (1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} (k+1-1) \cdot \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;= \sum_{k = r}^{\infty} \frac{(k+1)!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} - \sum_{k = r}^{\infty} \frac{k!}{(r-1)!(k-r)!} p^r(1-p)^{k-r} \\&amp;= \frac{r(r+1)}{p^2} \sum_{k = r}^{\infty} \frac{(k+1)!}{(r+1)!(k-r)!} p^{r+2} (1-p)^{k-r} - \frac{r}{p} \sum_{k = r}^{\infty} \frac{k!}{r!(k-r)!} p^{r+1}(1-p)^{k-r} \\&amp;= \frac{r(r+1)}{p^2} \sum_{k = r}^{\infty} \binom{k+1}{r+1} p^{r+2} (1-p)^{k-r} - \frac{r}{p} \sum_{k = r}^{\infty} \binom{k}{r} p^{r+1}(1-p)^{k-r} \\&amp;=\frac{r^2+r}{p^2} - \frac{r}{p} \\\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \frac{r^2+r}{p^2} - \frac{r}{p} - \frac{r^2}{p^2} \\&amp;=\frac{r(1-p)}{p^2}\end{aligned}\]</span></p></blockquote><h3 id="广义负二项分布与泊松分布">广义负二项分布与泊松分布</h3><p>在负二项分布中，参数 <span class="math display">\[r\]</span> 的取值范围要求为正整数，而在某些情况下，我们需要将负二项分布中的 <span class="math display">\[r\]</span> 的取值范围拓展到一切正实数。为了做到这一点，我们需要借助<strong>Gamma函数</strong>对其中的组合式进行拓展。</p><p>由于有 <span class="math display">\[\Gamma(n) = (n-1)!\]</span>，故 <span class="math display">\[\binom{k-1}{r-1} = \frac{(k-1)!}{(r-1)!(k-r)!} = \frac{(k-1)!}{\Gamma(r)\Gamma(k-r+1)}\]</span> 因此我们可以将广义负二项分布的分布列定义为： <span class="math display">\[P(X=k)=\frac{(k-1)!}{\Gamma(r)\Gamma(k-r+1)}p^r(1-p)^{k-r}, k \in \{1,2,...\},r \in \mathbb{R}\]</span> 事实上，在实际使用中，一个更常用的负二项分布的分布列定义为 <span class="math display">\[P(X=k) = \binom{k+r-1}{r-1}p^r(1-p)^k, k \in \{0,1,2,...\}\]</span> 这里的 <span class="math display">\[k\]</span> 代表第 <span class="math display">\[r\]</span> 次实验成功前实验失败的次数。</p><p>基于该定义进行拓展，我们就能得到广义负二项分布的标准定义：（该分布也被称为<strong>Polya分布</strong>）</p><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\Gamma(k+r)}{k!\Gamma(r)}p^r (1-p)^k\]</span> 其中 <span class="math display">\[k \in \{0,1,2,...\}, r \in \mathbb{R}, p \in [0,1]\]</span>，则称随机变量 <span class="math display">\[X\]</span> 服从广义负二项分布</p></blockquote><p>广义负二项分布与泊松分布有如下定理成立：</p><blockquote><p><strong>Theorem:</strong> 设 <span class="math display">\[k \in \mathbb{N}, \lambda &gt; 0, r \in \mathbb{R}\]</span>，则有 <span class="math display">\[\lim_{r \to \infty} \frac{\Gamma(k+r)}{k!\Gamma(r)} \left( \frac{\lambda}{r+\lambda} \right)^r \left(\frac{r}{r+\lambda} \right)^{k} = \frac{\lambda^k}{k!} e^{-\lambda}\]</span> <strong>Proof:</strong> //待补全</p></blockquote><p>由上述定理可知，当 <span class="math display">\[r\]</span> 很大时，广义负二项分布可以作为泊松分布的一个很好的近似。</p><h3 id="ab-分布类"><span class="math display">\[(a,b)\]</span> 分布类</h3><p>事实上，<strong>二项分布、负二项分布、泊松分布</strong>的概率密度函数均满足以下的递推关系： <span class="math display">\[p_n = p_{n-1} \left(a + \frac{b}{n} \right), n \geq 1\]</span> 其中，<span class="math display">\[a,b \in \mathbb{R}\]</span> 为常数（该递推式被称为<strong>Panjer递推式</strong>）</p><p>我们称概率密度函数满足上述递推关系的离散分布为 <strong><span class="math display">\[(a,b)\]</span> 分布</strong>，所有<span class="math display">\[(a,b)\]</span> 分布构成的集合被称为 <strong><span class="math display">\[(a,b)\]</span> 分布类</strong> 。</p><p><span class="math display">\[(a,b)\]</span> 分布类在精算领域的损失模型中有着十分重要的应用。</p><p>事实上，二项分布、负二项分布、泊松分布是 <strong><span class="math display">\[(a,b)\]</span> 分布类</strong>中的所有分布，这是因为有如下定理：</p><blockquote><p><strong>Theorem:</strong> 若一个 <span class="math display">\[(a,b)\]</span> 分布为非退化分布，则其必为二项分布、负二项分布、泊松分布中的一种</p><p><strong>Proof:</strong> //待补全</p></blockquote><h2 id="超几何分布">超几何分布</h2><h3 id="定义-4">定义</h3><blockquote><p><strong>Definition:</strong> 若一个离散型随机变量 <span class="math display">\[X\]</span> 的分布列满足 <span class="math display">\[P(X=k) = \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}}\]</span> 其中 <span class="math display">\[k \leq n,N_1 \leq N \in \{0,1,2,...\}\]</span>，则称随机变量 <span class="math display">\[X\]</span> 满足超几何分布，记为 <span class="math display">\[X \sim H(N, N_1, n)\]</span></p></blockquote><p><strong>适用场景：</strong>在一个袋子中有两种共 <span class="math display">\[N\]</span> 个物品，其中物品 <span class="math display">\[A\]</span> 有 <span class="math display">\[N_1\]</span> 个，物品 <span class="math display">\[B\]</span> 有 <span class="math display">\[N-N_1\]</span> 个，现从袋子中抽出 <span class="math display">\[n\]</span> 个物品，求抽出的物品中 <span class="math display">\[A\]</span> 的个数 <span class="math display">\[k\]</span></p><p>超几何分布的<strong>累积分布函数</strong>为 <span class="math display">\[F(k) = P(X=k) = \left\{\begin{aligned}\sum_{i = 0}^k \frac{\binom{N_1}{i} \binom{N-N_1}{n-i}}{\binom{N}{n}}&amp;,&amp; k \geq 0 \\0&amp;,&amp; k &lt; 0\end{aligned}\right.\]</span> 若引入<strong>广义超几何函数</strong>，则其非负部分还可表示为 <span class="math display">\[F(k) = 1 - \frac{\binom{n}{k+1}\binom{N-n}{N_1-k-1}}{\binom{N}{N_1}} \cdot _3F_2 \left(\begin{aligned}1, k+1-N_1, k+1-n \\k+2, N+k+2-N_1-n\end{aligned};1\right), k \geq 0\]</span></p><h3 id="期望和方差-4">期望和方差</h3><p>我们可以用与负二项分布类似的分析技巧导出超几何分布的期望和方差 <span class="math display">\[\begin{aligned}E(X) &amp;= \sum_{k = 0}^{N_1} k \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \frac{n}{N} \sum_{k = 1}^{N_1} \frac{k \binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N-1}{n-1}} \\&amp;= \frac{n \cdot N_1}{N} \sum_{k = 1}^{N_1} \frac{\binom{N_1 - 1}{k - 1} \binom{N-N_1}{n-k}}{\binom{N-1}{n-1}} \\&amp;=\frac{n \cdot N_1}{N}\end{aligned}\]</span></p><p>又 <span class="math display">\[\begin{aligned}E(X^2) &amp;= \sum_{k = 0}^{N_1} k^2 \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \sum_{k = 1}^{N_1} k(k-1) \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} + \sum_{k = 1}^{N_1} k \cdot \frac{\binom{N_1}{k} \binom{N-N_1}{n-k}}{\binom{N}{n}} \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} \cdot \sum_{k = 2}^{N_1} \frac{\binom{N_1-2}{k-2} \binom{N-N_1}{n-k}}{\binom{N-2}{n-2}} + \frac{n \cdot N_1}{N} \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} + \frac{n \cdot N_1}{N}\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}Var(X) &amp;= E(X^2) - E^2(X) \\&amp;= \frac{n(n-1)N_1(N_1-1)}{N(N-1)} + \frac{n \cdot N_1}{N} - \frac{n^2N_1^2}{N^2} \\&amp;= \frac{n(N-n)(N-N_1)}{N^2(N-1)}\end{aligned}\]</span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;二项分布&quot;&gt;二项分布&lt;/h2&gt;
&lt;h3 id=&quot;定义&quot;&gt;定义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; 若一个离散型随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 的分布列满足 &lt;span class=&quot;math display&quot;&gt;\[
P(X=k) = \binom{n}{k} p^k (1-p)^{1-k}
\]&lt;/span&gt; 其中 &lt;span class=&quot;math inline&quot;&gt;\(n \in \mathbb{N}^+, k \in \{0,1,2,...,n\}, p \in [0,1]\)&lt;/span&gt;，则称随机变量 &lt;span class=&quot;math inline&quot;&gt;\(X\)&lt;/span&gt; 满足二项分布，记为 &lt;span class=&quot;math inline&quot;&gt;\(X \sim B(n, p)\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="概率论" scheme="http://gonggongjohn.me/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="Probability" scheme="http://gonggongjohn.me/tags/Probability/"/>
    
  </entry>
  
  <entry>
    <title>新闻搜索网站构建记录</title>
    <link href="http://gonggongjohn.me/2021/04/18/web/search-site/"/>
    <id>http://gonggongjohn.me/2021/04/18/web/search-site/</id>
    <published>2021-04-18T10:26:25.000Z</published>
    <updated>2021-04-30T06:30:39.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务部署">服务部署</h2><p>请按照如下流程部署本项目：</p><ol type="1"><li>在<strong>news_search</strong>目录下安装所需的依赖插件：<strong>（国内请使用淘宝源安装nodejieba）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> npm install request iconv-lite cheerio mysql jschardet moment</span><br><span class="hljs-meta">&gt;</span><span class="bash"> npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba</span><br></code></pre></td></tr></table></figure><a id="more"></a><ol start="2" type="1"><li>启动本地MySQL服务，修改<strong>news_search/mysql.js</strong>中的相关信息为数据库登录信息：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> pool = mysql.createPool(&#123;<br>    host: <span class="hljs-string">&#x27;#数据库地址&#x27;</span>,<br>    user: <span class="hljs-string">&#x27;#本地数据库连接用户名&#x27;</span>, <br>    password: <span class="hljs-string">&#x27;#本地数据库连接密码&#x27;</span>,<br>    database: <span class="hljs-string">&#x27;#目标数据库名&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>登陆数据库管理系统，在控制台中设置相关变量以防止后续连接池堵塞：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; set global wait_timeout&#x3D;10;<br>&gt; set global max_connections&#x3D;5000;<br>&gt; set session wait_timeout&#x3D;10;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>在数据库管理系统中创建所需的表结构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; CREATE TABLE &#96;news&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;origin&#96; TEXT NOT NULL,<br>    &#96;category&#96; TEXT NOT NULL,<br>    &#96;title&#96; TEXT NOT NULL,<br>    &#96;time&#96; TEXT,<br>    &#96;source&#96; TEXT,<br>    &#96;abstract&#96; TEXT,<br>    &#96;content&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br>&gt; CREATE TABLE &#96;indices&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;word&#96; TEXT,<br>    &#96;docs&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li>执行爬虫脚本爬取新闻内容：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> node crawler.js</span><br><span class="hljs-meta">&gt;</span><span class="bash"> node create_indices.js</span><br></code></pre></td></tr></table></figure><p><strong>P.S:</strong> 在测试环境下，若希望快速得到效果，可打开news_research/crawler.js文件，并将如下行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> total_pages = <span class="hljs-number">8</span>; <span class="hljs-comment">//Modify to a smaller number to speed up in demo environment</span><br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> total_pages = <span class="hljs-number">1</span>; <span class="hljs-comment">//Modify to a smaller number to speed up in demo environment</span><br></code></pre></td></tr></table></figure><p>保存后再执行上述代码。</p><ol start="6" type="1"><li>在<strong>news_site</strong>目录下安装所需的依赖：<strong>（国内请使用淘宝源安装nodejieba）</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> npm install express moment</span><br><span class="hljs-meta">&gt;</span><span class="bash"> npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba</span><br></code></pre></td></tr></table></figure><ol start="7" type="1"><li>启动网站后端服务：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> node bin/www</span><br></code></pre></td></tr></table></figure><ol start="8" type="1"><li>使用浏览器访问网站前端：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs web-idl">http:&#x2F;&#x2F;localhost:3000<br></code></pre></td></tr></table></figure><h2 id="源内容抓取">源内容抓取</h2><h3 id="新闻网站解析">新闻网站解析</h3><h4 id="网易新闻">网易新闻</h4><p>网易新闻的主体分为国内和国际两个模块，其网站结构大体相同，因此我们集中针对这两个板块进行内容爬取。</p><p>分析新闻索引页面的HTML结构我们可以发现，新闻条目被放在了类名为<strong>newsdata_wrap</strong>的<strong>div</strong>标签下。然而由于网易新闻使用了动态加载新闻条目的方式，若我们使用GET请求直接获取页面的HTML时，该标签下的内容为空，因此我们无法直接通过解析网站的HTML数据获得具体的新闻信息。</p><p>继续分析访问网站时的文件传输流我们会发现网站的新闻条目是由一个叫<strong>cm_guonei.js</strong>（<strong>cm_guoji.js</strong>）的文件动态装载的，其原始路径为<code>https://temp.163.com/special/00804KVA/cm_guonei.js</code>。跟踪页面我们发现同级目录下还有<strong>cm_guonei_02.js<sub>cm_guonei_08.js<strong>（</strong>cm_guoji_02.js</sub>cm_guoji_08.js</strong>）共8个文件用于流式加载所有需要加载的新闻条目。打开文件发现其为一个类JSON结构，其中按条目存储了新闻页面的标题、网址、关键字、时间等基本信息。由此我们可以通过直接解析这些文件来获得所有需要爬取的新闻页面。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>:<span class="hljs-string">&quot;“港独”周竖峰出逃加拿大，曾辱骂内地生为“支那人”&quot;</span>,<br>        <span class="hljs-attr">&quot;digest&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;docurl&quot;</span>:<span class="hljs-string">&quot;https://www.163.com/news/article/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;commenturl&quot;</span>:<span class="hljs-string">&quot;https://comment.tie.163.com/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;tienum&quot;</span>:<span class="hljs-number">5276</span>,<br>        <span class="hljs-attr">&quot;tlastid&quot;</span>:<span class="hljs-string">&quot;&lt;a href=&#x27;http://news.163.com/&#x27;&gt;新闻&lt;/a&gt;&quot;</span>,<br>        <span class="hljs-attr">&quot;tlink&quot;</span>:<span class="hljs-string">&quot;https://www.163.com/news/article/G8GJUT8700019B3E.html&quot;</span>,<br>        <span class="hljs-attr">&quot;label&quot;</span>:<span class="hljs-string">&quot;其它&quot;</span>,<br>        <span class="hljs-attr">&quot;keywords&quot;</span>:[<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/5/6/54687ad65cf0/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;周竖峰&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/6/2/6e2f72ec/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;港独&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;akey_link&quot;</span>:<span class="hljs-string">&quot;https://news.163.com/keywords/5/a/52a062ff5927/1.html&quot;</span>,<span class="hljs-attr">&quot;keyname&quot;</span>:<span class="hljs-string">&quot;加拿大&quot;</span>&#125;],<br>        <span class="hljs-attr">&quot;time&quot;</span>:<span class="hljs-string">&quot;04/26/2021 10:19:15&quot;</span>,<br>        <span class="hljs-attr">&quot;newstype&quot;</span>:<span class="hljs-string">&quot;article&quot;</span>,<br>        <span class="hljs-attr">&quot;pics3&quot;</span>:[],<br>        <span class="hljs-attr">&quot;channelname&quot;</span>:<span class="hljs-string">&quot;guonei&quot;</span>,<br>        <span class="hljs-attr">&quot;source&quot;</span>:<span class="hljs-string">&quot;观察者网&quot;</span>,<br>        <span class="hljs-attr">&quot;point&quot;</span>:<span class="hljs-string">&quot;60&quot;</span>,<br>        <span class="hljs-attr">&quot;imgurl&quot;</span>:<span class="hljs-string">&quot;http://cms-bucket.ws.126.net/2021/0426/bc6435dep00qs5fri00kkc000s600e3c.png&quot;</span>,<br>        <span class="hljs-attr">&quot;add1&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;add2&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">&quot;add3&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>接下来我们分析新闻内容页面。该页面的具体内容是静态加载的，因此我们可以直接对其HTML内容进行抽取。然而随着进一步的分析我们会发现新闻页面的编码并不统一，分为UTF-8和GBK两种。为了得到网站的编码方式，我们使用了一个名为<strong>jschardet</strong>的插件。该插件可以通过分析文本的二进制编码给出其最可能的编码方法。由于目标网站只有两种编码方式，因此我们可以保证使用该插件检测得到的结果是可靠的。</p><img src="/2021/04/18/web/search-site/coding.png" class="" title="coding"><p>分析页面的HTML结构我们可以发现新闻内容被封装在了类名为<strong>post_main</strong>的<strong>div</strong>标签下，其中新闻标题类名为<strong>post_title</strong>，时间、来源的类名为<strong>post_info</strong>，正文的类名为<strong>post_body</strong>。我们首先使用<strong>iconv-lite</strong>插件对页面进行解码，随后利用<strong>Cheerio</strong>模块即可快速从网站的DOM结构中抽取出所需的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> coding = chardet.detect(body)[<span class="hljs-string">&#x27;encoding&#x27;</span>]<br><span class="hljs-keyword">var</span> $ = cheerio.load(iconv.decode(body, coding).toString());<br><span class="hljs-keyword">var</span> title = $(<span class="hljs-string">&#x27;.post_title&#x27;</span>).text();<br><span class="hljs-keyword">if</span>(title != <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-keyword">var</span> body_text = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.content.all-txt&quot;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.content.all-txt &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($(<span class="hljs-string">&#x27;.newscontents&#x27;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.newscontents &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.post_body &gt; p&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;&quot;</span>;<br>    body_text.each(<span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>($(item).text() != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>            content = content + $(item).text() + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="环球网">环球网</h4><p>与网易新闻类似，环球网同样分为国内和国际两个模块，且采用了动态装载新闻条目的方式。通过追踪其文件传输流，我们发现其新闻源数据地址分别为<code>https://china.huanqiu.com/api/list?offset=0&amp;limit=20</code>和<code>https://world.huanqiu.com/api/list?offset=0&amp;limit=20</code>，其基本结构为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;list&quot;</span>:[<br>        &#123;<br>            <span class="hljs-attr">&quot;aid&quot;</span>:<span class="hljs-string">&quot;42vOMMYVUm3&quot;</span>,<br>            <span class="hljs-attr">&quot;title&quot;</span>:<span class="hljs-string">&quot;前国脚张恩华去世，享年48周岁&quot;</span>,<br>            <span class="hljs-attr">&quot;summary&quot;</span>:<span class="hljs-string">&quot;张恩华的职业生涯大部分时间是在大连实德以及前身大连万达队度过的，是大连实德队主力后卫，也是大连夺得联赛“七冠王”和多次杯赛冠军的主要功臣之一&quot;</span>,<br>            <span class="hljs-attr">&quot;addltype&quot;</span>:<span class="hljs-string">&quot;normal&quot;</span>,<br>            <span class="hljs-attr">&quot;typedata&quot;</span>:&#123;<br>                <span class="hljs-attr">&quot;audio&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;,<br>                <span class="hljs-attr">&quot;video&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;,<br>                <span class="hljs-attr">&quot;gallery&quot;</span>:&#123;<br>                    <span class="hljs-attr">&quot;members&quot;</span>:[]<br>                &#125;<br>            &#125;,<br>            <span class="hljs-attr">&quot;source&quot;</span>:&#123;<br>                <span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;环球时报&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;ext_displaytime&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;ext_defertime&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;ctime&quot;</span>:<span class="hljs-string">&quot;1619721799662&quot;</span>,<br>            <span class="hljs-attr">&quot;xtime&quot;</span>:<span class="hljs-string">&quot;1619721799662&quot;</span>,<br>            <span class="hljs-attr">&quot;cover&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;host&quot;</span>:<span class="hljs-string">&quot;china.huanqiu.com&quot;</span>,<br>            <span class="hljs-attr">&quot;ext-serious&quot;</span>:<span class="hljs-string">&quot;1&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>环球网的新闻内容页根路径分别为<code>https://china.huanqiu.com/article/</code>和<code>https://world.huanqiu.com/article/</code>，因此我们只需使用该路径加上索引数据中的<strong>aid</strong>号，即可得到新闻页的完整网址。</p><p>分析其新闻内容页的HTML结构我们可以发现其正文的外层包裹分别有一个类名为<strong>l-con clear</strong>的<strong>div</strong>标签，一个<strong>article</strong>标签以及一个<strong>section</strong>标签，于是我们同样可以使用Cheerio插件快速将其内容从结构中抽取出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> coding = chardet.detect(body)[<span class="hljs-string">&#x27;encoding&#x27;</span>]<br><span class="hljs-keyword">var</span> $ = cheerio.load(iconv.decode(body, coding).toString());<br><span class="hljs-keyword">var</span> title = $(<span class="hljs-string">&#x27;.t-container-title&#x27;</span>).text();<br><span class="hljs-keyword">if</span>(title != <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-keyword">var</span> body_text = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;.l-con.clear&quot;</span>).length &gt; <span class="hljs-number">0</span>)&#123;<br>        body_text = $(<span class="hljs-string">&#x27;.l-con.clear &gt; article &gt; section &gt; p&#x27;</span>);<br>        <span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;&quot;</span>;<br>        body_text.each(<span class="hljs-function">(<span class="hljs-params">index, item</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>($(item).text() != <span class="hljs-string">&quot;&quot;</span>)&#123;<br>                <span class="hljs-keyword">var</span> para = $(item).text();<br>                content = content + para + <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库构建">数据库构建</h3><p>提取出网站的内容后，我们需要将其以一定结构存放在一个可外部访问的空间内。为此，我们首先创建一个名为<strong>netease_news</strong>的数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE netease_news;<br></code></pre></td></tr></table></figure><p>并在其中构建一张名为<strong>news</strong>的表用于结构化存储新闻的各种信息。对于本项目，我们设计了8个表项，分别为：<strong>id（新闻的唯一标识符）、origin（新闻源网址）、category（分类：国内/国外）、title（标题）、time（创建时间）、source（来源）、abstract（内容摘要）、content（新闻内容）</strong>。我们将<strong>id</strong>设为主键，并设置其在每次插入时自增，这样在实际插入时我们只需插入其他7项即可，并能自动分配到一个唯一的id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE &#96;news&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;origin&#96; TEXT NOT NULL,<br>    &#96;category&#96; TEXT NOT NULL,<br>    &#96;title&#96; TEXT NOT NULL,<br>    &#96;time&#96; TEXT,<br>    &#96;source&#96; TEXT,<br>    &#96;keyword&#96; TEXT,<br>    &#96;heat&#96; INT,<br>    &#96;content&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><h3 id="基本爬虫逻辑">基本爬虫逻辑</h3><p>根据上面的分析，我们可以快速设计出爬虫的基本逻辑，其基本流程如下：</p><img src="/2021/04/18/web/search-site/crawl.png" class="" title="crawl"><p>在实际实现中，我们首先封装了一套mysql的读写工具：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">var</span> pool = mysql.createPool(&#123;<br>    host: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    user: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    password: <span class="hljs-string">&#x27;root&#x27;</span>,<br>    database: <span class="hljs-string">&#x27;netease_news&#x27;</span><br>&#125;);<br><span class="hljs-keyword">var</span> query = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sql, sqlparam, callback</span>) </span>&#123;<br>    pool.getConnection(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, conn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            callback(err, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            conn.query(sql, sqlparam, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">qerr, vals, fields</span>) </span>&#123;<br>                conn.release();<br>                callback(qerr, vals, fields); <br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;;<br><span class="hljs-keyword">var</span> query_noparam = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">sql, callback</span>) </span>&#123;<br>    pool.getConnection(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, conn</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>            callback(err, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            conn.query(sql, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">qerr, vals, fields</span>) </span>&#123;<br>                conn.release();<br>                callback(qerr, vals, fields); <br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;;<br><span class="hljs-built_in">exports</span>.query = query;<br><span class="hljs-built_in">exports</span>.query_noparam = query_noparam;<br></code></pre></td></tr></table></figure><p>对于爬虫任务，我们将其封装为了六个函数，其中<strong>traverseNeteaseIndices</strong>用于遍历网易新闻的索引文件，<strong>phaseNeteaseLinkList</strong>用于解析网易新闻列表，<strong>phaseNeteaseNews</strong>用于解析网易新闻页的具体内容，另外三个函数<strong>traverseHQWIndices</strong>、<strong>phaseHQWLinkList</strong>和<strong>phaseHQWNews</strong>用于获取环球网新闻数据时的对应行为<strong>（具体实现见crawler.js）</strong>。</p><p>这里需要注意的是，由于<strong>request请求</strong>和<strong>mysql操作</strong>均为<strong>异步操作</strong>，程序执行的顺序无法确定，在同一时刻内，mysql服务器中可能同时有上千个连接，且当连接释放后，<strong>连接池不会立即关闭相应连接</strong>，这样就会造成<strong>连接池堵塞</strong>。为解决这一问题，我们首先在数据库控制台中缩小闲置连接回收间隔，并增大连接限制数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; set global wait_timeout&#x3D;10;<br>&gt; set global max_connections&#x3D;5000;<br>&gt; set session wait_timeout&#x3D;10;<br></code></pre></td></tr></table></figure><p>随后我们通过在爬虫逻辑中使用<strong>setTimeout</strong>函数延迟发送数据库请求，将数据库操作任务平摊到多个时间戳上，这样就有效避免了连接池堵死的情况发生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= pages; i++)&#123;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            phaseNeteaseLinkList(url, category, i, pages);<br>        &#125;, <span class="hljs-number">3000</span> * (i - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= pages; i++)&#123;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            phaseHQWLinkList(url, pred, category, i, pages, last_flag);<br>        &#125;, <span class="hljs-number">5000</span> * i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布隆过滤器与去重">布隆过滤器与去重</h3><p>当我们需要多次执行爬虫任务时，就可能会遇到重复爬取同一网站的情况。为此，我们需要一套快速判断是否已经爬取过一个网址的方法。通常情况下，我们可以使用以下两种办法做到这一点：</p><ul><li>每次爬取一个页面前，在数据库中使用<strong>SELECT</strong>命令查询该网址是否已经存在</li><li>对新闻网址建立<strong>哈希表</strong>，每次爬取前查询该表以判断网址是否已经存在</li></ul><p>若使用第一种方法，根据不同数据库的存储及查询方法，其单次查询的时间复杂度在 <span class="math display">\[\mathcal{O}(\lg n)\]</span> 和 <span class="math display">\[\mathcal{O(n)}\]</span> 之间，<span class="math display">\[k\]</span> 次查询的时间复杂度最坏可能退化到 <span class="math display">\[O(kn)\]</span>；若使用第二种方法，尽管其单次查询的时间复杂度可以保证为 <span class="math display">\[\mathcal{O}(1)\]</span>，但对于一个含有 <span class="math display">\[n\]</span> 个网址的数据库，其空间复杂度为 <span class="math display">\[O(n)\]</span>。由此可见，随着爬虫规模的扩大，两种去重方法均有着一定的弊端，不利于任务的扩展。</p><p>为解决此问题，我们引入一种名为<strong>布隆过滤器（Bloom Filter）</strong>的数据结构<strong>（见filter.js）</strong>。布隆过滤器的核心思想为通过一串哈希函数将关键字映射到一个比特位串。查询时，先将目标关键字通过同样的哈希函数找到对应的索引位，若索引位存在映射，则表明目标关键字<strong>可能存在</strong>；若所有索引位均不存在映射，则表明目标关键字<strong>一定不存在</strong>。</p><img src="/2021/04/18/web/search-site/filter.png" class="" title="filter"><p>布隆过滤器是一种概率型数据结构，其误判率约为 <span class="math display">\[\left(1 - e^{-\frac{kn}{m}}\right)^k\]</span>。在实际使用场景下，只要当我们选择合适的 <span class="math display">\[k\]</span> 和 <span class="math display">\[m\]</span> 值，就可以让误判率几乎不影响业务逻辑。这可以由如下公式给出： <span class="math display">\[k = \frac{m}{n} \ln 2 , m = - \frac{n \ln p}{\ln^2 2}\]</span> 其中 <span class="math display">\[k\]</span> 为哈希函数的个数，<span class="math display">\[m\]</span> 为位串长度，<span class="math display">\[p\]</span> 为预期的误报率。</p><p>布隆过滤器增加和查询时间复杂度均为 <span class="math display">\[\mathcal{O}(k)\]</span>（ <span class="math display">\[k\]</span> 为哈希函数的个数），空间复杂度为 <span class="math display">\[\mathcal{O}(m)\]</span>（<span class="math display">\[m\]</span> 为比特位长度），相比前两种方法可以很好的平衡存储空间和查询效率。</p><h3 id="分词与倒排索引">分词与倒排索引</h3><p>当用户发起搜索请求时，我们需要从数据库中<strong>快速找出所有内容含有用户所请求关键字的新闻条目</strong>。若使用全文搜索的方法，随着数据规模增大，会造成极大的延迟。为解决此问题，我们在爬取文章的时候，对文章内容进行<strong>分词</strong>，并使用词关键字对文章建立<strong>倒排索引</strong>，在搜索时，只需要将关键字使用同样的方法进行分词，并在倒排索引表中查询对应的文档编号即可。</p><img src="/2021/04/18/web/search-site/inverted_index.jpg" class="" title="inverted_index"><p>为此，我们首先在数据库中再建立一张索引表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE &#96;indices&#96; (<br>    &#96;id&#96; INT NOT NULL AUTO_INCREMENT,<br>    &#96;word&#96; TEXT,<br>    &#96;docs&#96; TEXT,<br>    PRIMARY KEY (&#96;id&#96;)<br>);<br></code></pre></td></tr></table></figure><p>随后我们读取news表中的新闻内容，并使用<strong>nodejieba</strong>插件对其进行分词。由于文章中还有部分特殊符号及无意义词，我们通过一个<strong>停用词表</strong>来将其去除。为保证词关键字的唯一性，我们维护一个<strong>集合</strong>，将每个文档分词后的结果依次插入该集合，并将结果插入数据库中：<strong>（见create_indices.js）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> word_set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><span class="hljs-keyword">var</span> para = item.content;<br><span class="hljs-comment">//Cut word</span><br><span class="hljs-keyword">var</span> para_filtered = para.replace(<span class="hljs-string">&quot;　&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>para_filtered = para_filtered.replace(<span class="hljs-string">&quot;，&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;。&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">var</span> word_list = jieba.cut(para_filtered);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; word_list.length; i++)&#123;<br>    word_set.add(word_list[i]);<br>&#125;<br>word_set.forEach(<span class="hljs-function">(<span class="hljs-params">word</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(!stop_list.includes(word))&#123;<br>        <span class="hljs-comment">//Insert the result to the database</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="网站构建">网站构建</h2><h3 id="基本构架">基本构架</h3><p>接下来我们来构建新闻搜索网站。新闻搜索网站的主要行为是提供一个可供用户输入的界面，当用户输入关键字后，系统从数据库中检索出带有用户所指定关键字的新闻条目，并将结果以一定的顺序生成相应的内容页面返回给用户。我们使用<strong>Express脚手架</strong>来构建网站的后端。对于网站路由，我们共设计了4个入口，其中根目录为浏览器访问入口，用于呈现相应的HTML页面，其他三个入口<strong>/query</strong>、<strong>/qcontent</strong>和<strong>/qheat</strong>分别用于前端请求<strong>关键字结果</strong>、<strong>完整正文内容</strong>及<strong>关键字热度分析结果</strong>。</p><p>对于网站前端，我们使用了<strong>Bootstrap框架</strong>来生成所需的样式。搜索引擎页面设计的一个核心宗旨即为简洁，因此在搜索界面，我们参考了百度和Google的设计样式，通过卡片的方式将目标条目呈现给用户。在一张卡片中，我们呈现了新闻条目的<strong>标题、事件、来源、摘要及类别</strong>，以方便用户初步预览新闻的大致内容。</p><img src="/2021/04/18/web/search-site/search_page.png" class="" title="search_page"><p>由于卡片的内容是由后端返回的结果动态决定的，因此我们不能直接将其写死在HTML中，而需要通过Javascript脚本动态生成并将其添加至HTML的DOM结构中：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendCard</span>(<span class="hljs-params">father, title, id, time, source, abstract, cat</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> card = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    card.class = <span class="hljs-string">&#x27;card&#x27;</span>;<br>    <span class="hljs-keyword">var</span> card_body = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    card_body.class = <span class="hljs-string">&#x27;card-body&#x27;</span>;<br>    <span class="hljs-keyword">var</span> card_link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    card_link.class = <span class="hljs-string">&#x27;card-link&#x27;</span>;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    card_link.innerText = title;<br>    card_link.style.fontSize = <span class="hljs-string">&quot;large&quot;</span>;<br>    card_body.appendChild(card_link);<br>    <span class="hljs-keyword">var</span> card_info = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    <span class="hljs-keyword">if</span>(source != <span class="hljs-literal">null</span>)&#123;<br>        card_info.innerText = time + <span class="hljs-string">&quot; &quot;</span> + source;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        card_info.innerText = time;<br>    &#125;<br>    card_body.appendChild(card_info);<br>    <span class="hljs-keyword">var</span> card_abstract = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    card_abstract.innerText = abstract;<br>    card_abstract.style.fontSize = <span class="hljs-string">&quot;small&quot;</span>;<br>    card_body.appendChild(card_abstract);<br>    <span class="hljs-keyword">var</span> card_cat = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;p&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cat == <span class="hljs-string">&quot;domestic&quot;</span>)&#123;<br>        card_cat.innerText = <span class="hljs-string">&quot;类别：国内&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cat == <span class="hljs-string">&quot;world&quot;</span>)&#123;<br>        card_cat.innerText = <span class="hljs-string">&quot;类别：国外&quot;</span>;<br>    &#125;<br>    card_body.appendChild(card_cat);<br>    card.appendChild(card_body);<br>    <span class="hljs-keyword">var</span> page_elem = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;page-list&#x27;</span>);<br>    page_elem.appendChild(card);<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户点击一个条目后，将跳转到一个新的页面，页面将向后端请求该新闻条目的完整内容。我们可以通过URL含参跳转的方法来实现这一跳转请求操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.html</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendCard</span>(<span class="hljs-params">father, title, id, time, source, abstract, cat</span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    card_link.href = <span class="hljs-string">&#x27;/content.html?id=&#x27;</span> + id;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//content.html</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetUrlParam</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^|&amp;)&quot;</span>+ name +<span class="hljs-string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);<br>    <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">window</span>.location.search.substr(<span class="hljs-number">1</span>).match(reg);<br>    <span class="hljs-keyword">if</span>(r!=<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> r[<span class="hljs-number">2</span>]; <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> id = GetUrlParam(<span class="hljs-string">&quot;id&quot;</span>);<br>$.get(<span class="hljs-string">&quot;/qcontent?id=&quot;</span> + id, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>对于内容的呈现，我们同样使用了动态方法将正文添加至页面上：<strong>（见public/content.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> title = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h1&#x27;</span>);<br>title.align = <span class="hljs-string">&quot;center&quot;</span>;<br>title.innerText = data.title;<br><span class="hljs-keyword">var</span> info = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;h5&#x27;</span>);<br>info.style.color = <span class="hljs-string">&quot;#808080&quot;</span>;<br>info.innerText = data.time + <span class="hljs-string">&quot; 来源：&quot;</span> + data.source;<br><span class="hljs-keyword">var</span> para = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>); <br>para.innerText = data.content;<br><span class="hljs-keyword">var</span> page_elem = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;news-content&#x27;</span>);<br>page_elem.appendChild(title);<br>page_elem.appendChild(info);<br>page_elem.appendChild(para);<br></code></pre></td></tr></table></figure><h3 id="搜索提示">搜索提示</h3><p>在现代搜索引擎中，我们希望系统能够即时根据当前的输入智能推测用户想要搜索的完整内容。为实现这一功能，我们需要监听输入框的内容变化事件，并在每次这一事件发生时向后端发送搜索请求：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params">callback, mode</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> keywords = $(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).val();<br>    $.get(<span class="hljs-string">&quot;/query?keywords=&quot;</span> + keywords + <span class="hljs-string">&quot;&amp;mode=&quot;</span> + mode, callback);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">middleSearch</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//Irrelevant code omitted</span><br>    search(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> recList = [];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">10</span>, data.length); i++)&#123;<br>            recList.push(data[i].title);<br>        &#125;<br>        <span class="hljs-comment">//Irrelevant code omitted</span><br>    &#125;, <span class="hljs-string">&quot;middle&quot;</span>);<br>&#125;<br><br>$(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).on(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    middleSearch();<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于搜索提示要求即时响应，因此我们通过向后端传入一个<strong>mode</strong>参数来决定搜索的响应精度和速度。对于<strong>提示用搜索请求（mode=middle）</strong>，后端将只扫描数据库<strong>新闻标题（title）</strong>列中含有目标关键字的条目，并只返回前10条结果。<strong>（事实上，若使用预训练的关键词关联库，我们可以引入更为智能的搜索提示，不过由于本项目为新闻搜索网站，这一功能并不实用）</strong></p><img src="/2021/04/18/web/search-site/auto_complete.png" class="" title="auto-complete"><p>对于前端，我们使用了<strong>JQuery-UI框架</strong>实现了补全列表的界面。通过JQuery语句在搜索框后附加<strong>autocomplete</strong>属性，即可使得列表中的内容随着用户的输入自动改变：<strong>（见public/index.html）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;:input[name=&#x27;keywords&#x27;]&quot;</span>).autocomplete(&#123;<br>    source: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query, response</span>)</span>&#123;<br>        search(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> recList = [];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">10</span>, data.length); i++)&#123;<br>                recList.push(data[i].title);<br>            &#125;<br>            <span class="hljs-keyword">return</span> response(recList);<br>        &#125;, <span class="hljs-string">&quot;middle&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="关键词热度分析">关键词热度分析</h3><p>最后，我们来实现对用户的搜索关键词进行时间热度分析的逻辑。由于在爬虫过程中我们抓取了文章的创建时间，并对正文内容进行了倒排索引，我们可以快速实现这一功能。</p><p>与显示新闻正文时的逻辑类似，当用户选择热度分析后，页面将含参跳转到一个新的页面，并向后端的<strong>/qheat</strong>入口请求热度分析结果。后端首先从<strong>news</strong>和<strong>indices</strong>表中分别找出包含目标关键词的新闻条目，并抽取出它们的时间信息。随后，我们按月份对其进行统计，并将其按时间排序，最终将结果封装为JSON字符串传回给前端：<strong>（见routes/index.js）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Irrelevant code omitted</span><br><span class="hljs-keyword">var</span> seq = &#123;&#125;;<br>result.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(seq.hasOwnProperty(item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)))&#123;<br>        seq[item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        seq[item.time.slice(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>)] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">var</span> sortedKeys = <span class="hljs-built_in">Object</span>.keys(seq).sort();<br><span class="hljs-keyword">var</span> seq_sort = &#123;&#125;;<br>sortedKeys.forEach(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    seq_sort[item] = seq[item];<br>&#125;);<br><span class="hljs-comment">//Irrelevant code omitted</span><br></code></pre></td></tr></table></figure><p>对于分析类功能，图表是一个较为直观的呈现形式。在这里我们使用了<strong>HighCharts</strong>图表框架来根据后端返回的数据快速生成这一样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Highcharts.chart(<span class="hljs-string">&#x27;chart&#x27;</span>, &#123;<br>    title: &#123;<br>        text: <span class="hljs-string">&quot;关键词时间热度分布&quot;</span><br>    &#125;,<br>    xAxis: &#123;<br>        categories: <span class="hljs-built_in">Object</span>.keys(data)<br>    &#125;,<br>    series: [&#123;<br>        data: value_list,<br>        type: <span class="hljs-string">&quot;line&quot;</span>,<br>        name: <span class="hljs-string">&quot;关键词：&quot;</span> + sdecodeURI(keyword)<br>    &#125;]<br>&#125;);<br></code></pre></td></tr></table></figure><p>最终的显示效果如下：</p><img src="/2021/04/18/web/search-site/heat_analysis.png" class="" title="heat_analysis">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;服务部署&quot;&gt;服务部署&lt;/h2&gt;
&lt;p&gt;请按照如下流程部署本项目：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;在&lt;strong&gt;news_search&lt;/strong&gt;目录下安装所需的依赖插件：&lt;strong&gt;（国内请使用淘宝源安装nodejieba）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs shell&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install request iconv-lite cheerio mysql jschardet moment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install nodejieba --registry=https://registry.npm.taobao.org --nodejieba_binary_host_mirror=https://npm.taobao.org/mirrors/nodejieba&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Web" scheme="http://gonggongjohn.me/tags/Web/"/>
    
    <category term="Frontend" scheme="http://gonggongjohn.me/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业3</title>
    <link href="http://gonggongjohn.me/2021/04/12/dase-math/dase-math-assignment-3/"/>
    <id>http://gonggongjohn.me/2021/04/12/dase-math/dase-math-assignment-3/</id>
    <published>2021-04-12T02:00:00.000Z</published>
    <updated>2022-02-10T08:37:20.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>分别求下面向量的1-范数、2-范数和无穷范数 <span class="math display">\[a_1 = \begin{pmatrix}1 \\2 \\1\end{pmatrix},a_2 = \begin{pmatrix}-1 \\0 \\1\end{pmatrix},a_3 = \begin{pmatrix}-2 \\1 \\1\end{pmatrix}\]</span></p></blockquote><p><span class="math display">\[\begin{aligned}||a_1||_1 &amp;= |1| + |2| + |1| = 4 \\||a_1||_2 &amp;= \sqrt{1^2+2^2+1^2} = \sqrt{6} \\||a_1||_\infty &amp;= \max\{|1|,|2|,|1|\} = 2 \\\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}||a_2||_1 &amp;= |-1| + |0| + |1| = 2 \\||a_2||_2 &amp;= \sqrt{(-1)^2+0^2+1^2} = \sqrt{2} \\||a_2||_\infty &amp;= \max\{|-1|,|0|,|1|\} = 1 \\\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}||a_2||_1 &amp;= |-2| + |1| + |1| = 4 \\||a_2||_2 &amp;= \sqrt{(-2)^2+1^2+1^2} = \sqrt{6} \\||a_2||_\infty &amp;= \max\{|-2|,|1|,|1|\} = 2 \\\end{aligned}\]</span></p><h2 id="二">二</h2><blockquote><p>证明函数 <span class="math inline">\(F: \mathbb{R}^n \to \mathbb{R}, F(x) = \sqrt{\langle x, x \rangle }\)</span> 是向量范数</p></blockquote><p><strong>非负性：</strong>易见任取 <span class="math inline">\(\textbf{x} \in \mathbb{R}^n\)</span> <span class="math display">\[F(\mathbf{x}) = \sqrt{\langle \mathbf{x}, \mathbf{x}\rangle} = \sqrt{\sum_\limits{i = 1}^n x_i^2} \geq 0\]</span> 且 <span class="math inline">\(F(\mathbf{x}) = 0 \leftrightarrow \forall i \in \{1,2,...,n\}, x_i = 0\)</span>，即 <span class="math inline">\(F(\textbf{x}) = 0\)</span> 当且仅当 <span class="math inline">\(\textbf{x} = \textbf{0}\)</span></p><p><strong>齐次性：</strong>任取 <span class="math inline">\(\textbf{x} \in \mathbb{R}^n, \lambda \in \mathbb{R}\)</span> <span class="math display">\[\begin{aligned}F(\lambda \textbf{x}) &amp;= \sqrt{\langle \lambda \textbf{x}, \lambda \textbf{x}\rangle} \\&amp;=\sqrt{(\lambda \textbf{x})^T\lambda \textbf{x}} \\&amp;=\sqrt{\lambda^2 \textbf{x}^T \textbf{x}} \\&amp;=|\lambda| \sqrt{\textbf{x}^T \textbf{x}} \\&amp;=|\lambda| F(\textbf{x})\end{aligned}\]</span> <strong>三角不等式：</strong>任取 <span class="math inline">\(\textbf{x}, \textbf{y} \in \mathbb{R}^n\)</span> <span class="math display">\[\begin{aligned}F^2(\textbf{x} + \textbf{y}) &amp;= (\textbf{x} + \textbf{y})^T(\textbf{x} + \textbf{y}) \\&amp;=(\textbf{x}^T + \textbf{y}^T)(\textbf{x} + \textbf{y}) \\&amp;= \textbf{x}^T \textbf{x} + \textbf{y}^T \textbf{x} + \textbf{x}^T \textbf{y} + \textbf{y}^T \textbf{y} \\ \end{aligned}\]</span> 由<strong>Cauchy-Schwarz不等式</strong>可知 <span class="math inline">\(\forall \textbf{x}, \textbf{y} \in \mathbb{R}^n, | \langle \textbf{x}, \textbf{y} \rangle | \leq ||\textbf{x}||_2 \cdot \||\textbf{y}||_2\)</span></p><p>故 <span class="math display">\[\begin{aligned}F^2(\textbf{x} + \textbf{y}) &amp;\leq \textbf{x}^T \textbf{x} + |\textbf{y}^T \textbf{x}| + |\textbf{x}^T \textbf{y}| + \textbf{y}^T \textbf{y} \\&amp;\leq \textbf{x}^T \textbf{x} + 2 \sqrt{\textbf{x}^T \textbf{x} \textbf{y}^T \textbf{y}} + \textbf{y}^T \textbf{y} \\&amp;=\left( \sqrt{\textbf{x}^T \textbf{x}} + \sqrt{\textbf{y}^T \textbf{y}} \right)^2 \\&amp;=\left(F(\textbf{x}) + F(\textbf{y})\right)^2\end{aligned}\]</span> 于是由非负性可知 <span class="math display">\[F(\textbf{x} + \textbf{y}) \leq F(\textbf{x}) + F(\textbf{y})\]</span></p><p>因此 <span class="math inline">\(F(\mathbf{x}) = \sqrt{\langle \mathbf{x}, \mathbf{x}\rangle}\)</span> 是向量范数</p><h2 id="三">三</h2><blockquote><p>对任给的 <span class="math inline">\(x = (x_1, x_2, x_3)^T \in \mathbb{C}^3\)</span>，试问如下实值函数是否构成向量范数？ <span class="math display">\[f_1(x) = |x_1|^4 + |x_2|^4 + |x_3|^4 \\f_2(x) = |x_1| + 3 |x_2| + 2 |x_3|\]</span></p></blockquote><p><strong>(1)</strong> 任取 <span class="math inline">\(\textbf{x} = (x_1, x_2, x_3)^T \in \mathbb{C}^3, \lambda \in \mathbb{R}\)</span> <span class="math display">\[\begin{aligned}f_1(\lambda \textbf{x}) &amp;=|\lambda x_1|^4 + |\lambda x_2|^4 + |\lambda x_3|^4 \\&amp;= |\lambda|^4 |x_1|^4 + |\lambda|^4 |x_2|^4 + |\lambda|^4 |x_3|^4 \\\end{aligned}\]</span> 故 <span class="math inline">\(f_1\)</span> 不满足齐次性，因此 <strong><span class="math inline">\(f_1\)</span> 不构成向量范数</strong></p><p><strong>(2)</strong> 任取 <span class="math inline">\(\textbf{x}, \textbf{y} \in \mathbb{C}^3, \lambda \in \mathbb{R}\)</span></p><p>易见 <span class="math display">\[f_2(\textbf{x}) = |x_1| + 3 |x_2| + 2|x_3| \geq 0\]</span> 且 <span class="math inline">\(f_2(\textbf{x}) = 0 \leftrightarrow x_1=x_2=x_3 = 0\)</span> <span class="math display">\[\begin{aligned}f_2(\lambda \textbf{x}) &amp;= |\lambda x_1| + 3 |\lambda x_2| + 2 |\lambda x_3| \\&amp;=|\lambda| (|x_1| + 3 |x_2| + 2 |x_3|) \\&amp;=|\lambda| f_2 (\textbf{x})\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}f_2(\textbf{x} + \textbf{y}) &amp;= |x_1+y_1| + 3 |x_2+y_2| + 2|x_3 + y_3| \\&amp;\leq |x_1| + |y_1| + 3|x_2| + 3|y_2| + 2|x_3| + 2|y_3| \\&amp;=f_2(\textbf{x}) + f_2(\textbf{y})\end{aligned}\]</span></p><p>因此 <strong><span class="math inline">\(f_2\)</span> 构成向量范数</strong></p><h2 id="四">四</h2><blockquote><p>证明如下定义的函数 <span class="math inline">\(\langle \cdot, \cdot \rangle: \mathbb{R}^2 \times \mathbb{R}^2 \to \mathbb{R}\)</span> 是内积： <span class="math display">\[\langle x, y \rangle := x_1 y_1 - (x_1 y_2 + x_2 y_1) + 2 x_2 y_2\]</span></p></blockquote><p><span class="math inline">\(\forall \textbf{x}, \textbf{y}, \textbf{z} \in \mathbb{R}^2, \lambda \in \mathbb{R}\)</span></p><p><strong>非负性：</strong> <span class="math display">\[\begin{aligned}\langle \textbf{x}, \textbf{x} \rangle &amp;= x_1^2+2x_2^2-2x_1x_2 \\&amp;=(x_1-x_2)^2+x_2^2 \geq 0\end{aligned}\]</span> <span class="math inline">\(\langle \textbf{x}, \textbf{x} \rangle = 0 \leftrightarrow x_1=x_2 = 0 \leftrightarrow \textbf{x} = 0\)</span></p><p><strong>对称性：</strong><span class="math inline">\(\langle \textbf{x}, \textbf{y} \rangle = x_1y_1 - x_2y_1 - x_1y_2 + 2x_2y_2 = y_1x_1-y_2x_1-y_1x_2+2y_2x_2= \langle \textbf{y}, \textbf{x}\rangle\)</span></p><p><strong>齐次性：</strong> <span class="math display">\[\begin{aligned}\langle \lambda\textbf{x}, \textbf{y} \rangle &amp;=\lambda x_1y_1 - (\lambda x_1y_2 + \lambda x_2y_1) + 2 \lambda x_2y_2 \\&amp;=\lambda (x_1y_1 - x_1y_2 - x_2y_1 + 2x_2y_2) \\&amp;=\lambda \langle \textbf{x}, \textbf{y} \rangle\end{aligned}\]</span> <strong>线性性：</strong> <span class="math display">\[\begin{aligned}\langle \textbf{x} + \textbf{y}, \textbf{z} \rangle &amp;= (x_1 + y_1) z_1 - [(x_1 + y_1)z_2 + (x_2 + y_2) z_1] + 2 (x_2 + y_2) z_2 \\&amp;=x_1z_1 + y_1z_1 - x_1z_2 - y_1z_2 + x_2z_1 + y_2z_1 + 2x_2z_2 + 2y_2z_2 \\&amp;= \langle \textbf{x}, \textbf{z} \rangle + \langle \textbf{y}, \textbf{z} \rangle\end{aligned}\]</span> 因此 <span class="math inline">\(\langle \textbf{x}, \textbf{y} \rangle = x_1y_1 - (x_1y_2 + x_2y_1) + 2x_2y_2\)</span> 是一个内积</p><h2 id="五">五</h2><blockquote><p>分别求下面矩阵1-范数、2-范数和无穷范数 <span class="math display">\[A_1 = \begin{pmatrix}1 &amp; 2 \\1 &amp; 0\end{pmatrix},A_2 = \begin{pmatrix}-1 &amp; 0 \\1 &amp; 2\end{pmatrix}\]</span></p></blockquote><p><span class="math display">\[\begin{aligned}||A_1||_1 &amp;= \max \{|1| + |1|, |2| + |0|\} = 2 \\||A_1||_2 &amp;= \sqrt{\max\{3 + \sqrt{5}, 3 - \sqrt{5}\}} = \frac{1+\sqrt{5}}{\sqrt{2}} \\||A_1||_\infty &amp;= \max\{|1| + |2|, |1| + |0| \} = 3 \\\end{aligned}\]</span></p><p><span class="math display">\[\begin{aligned}||A_2||_1 &amp;= \max \{|-1| + |1|, |0| + |2|\} = 2 \\||A_2||_2 &amp;= \sqrt{\max\{3 + \sqrt{5}, 3 - \sqrt{5}\}} = \frac{1+\sqrt{5}}{\sqrt{2}} \\||A_2||_\infty &amp;= \max\{|-1| + |0|, |1| + |2| \} = 3\end{aligned}\]</span></p><h2 id="六">六</h2><blockquote><p>求矩阵 <span class="math inline">\(\begin{pmatrix} 1 &amp; -1 &amp; 0 \\ 2 &amp; 4 &amp; 1 \\ 4 &amp; 2 &amp; 1 \end{pmatrix}\)</span> 的行空间、列空间、零空间和左零空间。</p></blockquote><p>设 <span class="math inline">\(A = \begin{pmatrix} 1 &amp; -1 &amp; 0 \\ 2 &amp; 4 &amp; 1 \\ 4 &amp; 2 &amp; 1\end{pmatrix}\)</span></p><p>设 <span class="math inline">\(\alpha_1 = (1, 2, 4)^T, \alpha_2 = (-1, 4, 2)^T, \alpha_3 = (0, 1, 1)^T\)</span></p><p>故 <span class="math display">\[\textbf{Col}(A) = \textbf{span} \{\alpha_1, \alpha_2, \alpha_3\} = \{ k_1 \alpha_1 + k_2 \alpha_2 + k_3 \alpha_3 : k_1, k_2, k_3 \in \mathbb{R} \}\]</span> 设 <span class="math inline">\(r_1 = (1, -1, 0)^T, r_2 = (2, 4, 1)^T, r_3 = (4, 2, 1)^T\)</span></p><p>故 <span class="math display">\[\textbf{Row}(A) = \textbf{span} \{r_1, r_2, r_3 \} = \{k_1 r_1 + k_2 r_2 + k_3 r_3: k_1, k_2, k_3 \in \mathbb{R} \}\]</span> 对 <span class="math inline">\(A\)</span> 作行初等变换 <span class="math display">\[A \xrightarrow[r_3-4_1]{r_2-2r_1}\begin{pmatrix}1 &amp; -1 &amp; 0 \\0 &amp; 6 &amp; 1 \\0 &amp; 6 &amp; 1\end{pmatrix}\xrightarrow{r_3-r_2}\begin{pmatrix}1 &amp; -1 &amp; 0 \\0 &amp; 6 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{\frac{1}{6}r_2}\begin{pmatrix}1 &amp; -1 &amp; 0 \\0 &amp; 1 &amp; \frac{1}{6} \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_1+r_2}\begin{pmatrix}1 &amp; 0 &amp; \frac{1}{6} \\0 &amp; 1 &amp; \frac{1}{6} \\0 &amp; 0 &amp; 0\end{pmatrix}\]</span> 故令 <span class="math inline">\(\alpha = (-1, -1, 6)^T\)</span>，则 <span class="math display">\[\textbf{Null}(A) = \textbf{span}(\alpha) = \{k\alpha: k \in \mathbb{R} \}\]</span> 对 <span class="math inline">\(A^T\)</span> 作行初等变换</p><p><span class="math display">\[\begin{aligned}A^T \xrightarrow{r_2+r_1}\begin{pmatrix}1 &amp; 2 &amp; 4 \\0 &amp; 6 &amp; 6 \\0 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow{\frac{1}{6}r_2}\begin{pmatrix}1 &amp; 2 &amp; 4 \\0 &amp; 1 &amp; 1 \\0 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow{r_3-r_2}\begin{pmatrix}1 &amp; 2 &amp; 4 \\0 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_1-2r_2}\begin{pmatrix}1 &amp; 0 &amp; 2 \\0 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 故令 <span class="math inline">\(\beta = (-2, -1, 1)^T\)</span>，则 <span class="math display">\[\textbf{Null}(A^T) = \textbf{span}(\beta) = \{k \beta: k \in \mathbb{R} \}\]</span></p><h2 id="七">七</h2><blockquote><p>求由向量 <span class="math inline">\(\begin{pmatrix} 1 \\ 2 \\ 1 \end{pmatrix}, \begin{pmatrix} 0 \\ 1 \\ 2 \end{pmatrix}\)</span> 张成的子空间的正交补空间。</p></blockquote><p>由 <span class="math display">\[\begin{pmatrix}1 &amp; 2 &amp; 0 \\0 &amp; 1 &amp; 2\end{pmatrix}\xrightarrow{r_1-2r_2}\begin{pmatrix}1 &amp; 0 &amp; -4 \\0 &amp; 1 &amp; 2\end{pmatrix}\]</span> 可知 <span class="math display">\[\textbf{span}^{\bot} \left\{\begin{pmatrix}1 \\ 2 \\ 0\end{pmatrix},\begin{pmatrix}0 \\ 1 \\ 2\end{pmatrix}\right\}=\textbf{span} \left\{\begin{pmatrix}4 \\ -2 \\ 1\end{pmatrix}\right\}\]</span></p><h2 id="八">八</h2><blockquote><p>写出一个与子空间 <span class="math inline">\(\textrm{span} \left\{(1,2,1)^T \right\}\)</span> 正交的子空间。</p></blockquote><p>由于 <span class="math display">\[(-1,0,1) \cdot (1,2,1)^T = 0\]</span> 故 <span class="math display">\[\textbf{span} \left\{ (-1,0,1)^T \right\} \bot \ \textbf{span} \left\{ (1,2,1)^T \right\}\]</span></p><h2 id="九">九</h2><blockquote><p>求向量 <span class="math inline">\((1,1,1)^T\)</span> 投影到一维子空间 <span class="math inline">\(\textrm{span} \left\{(1,-1,1)^T \right\}\)</span> 的正交投影。</p></blockquote><p>设 <span class="math inline">\(\alpha = (1,-1,1)^T, x = (1,1,1)^T\)</span></p><p>则 <span class="math inline">\(\textbf{span}\left\{(1,-1,1)^T\right\}\)</span> 的投影矩阵为 <span class="math display">\[P_\pi = \frac{\alpha \alpha^T}{\alpha^T \alpha} = \frac{1}{3}\begin{pmatrix}1 &amp; -1 &amp; 1 \\-1 &amp; 1 &amp; -1 \\1 &amp; -1 &amp; 1\end{pmatrix}\]</span> 于是 <span class="math inline">\(x\)</span> 在 <span class="math inline">\(\textbf{span}\left\{(1,-1,1)^T\right\}\)</span> 中的正交投影为 <span class="math display">\[\pi(x) = P_\pi \cdot x = \left( \frac{1}{3},-\frac{1}{3},\frac{1}{3} \right)^T\]</span></p><h2 id="十">十</h2><blockquote><p>求向量 <span class="math inline">\((1,1,1)^T\)</span> 投影到仿射空间 <span class="math inline">\(\textrm{span} \left\{(1,-1,1)^T , (1,1,0)^T \right\} + (1,2,1)^T\)</span> 的正交投影。</p></blockquote><p>设 <span class="math inline">\(\alpha_1 = (1, -1, 1)^T, \alpha_2 = (1,1,0)^T, \beta = (1,2,1)^T, x = (1,1,1)^T, x_0 = x - \beta = (0,-1,0)^T\)</span></p><p>于是令 <span class="math inline">\(B = (\alpha_1, \alpha_2) = \begin{pmatrix} 1 &amp; 1 \\ -1 &amp; 1 \\ 1 &amp; 0 \end{pmatrix}\)</span></p><p>因此 <span class="math display">\[B^TB = \begin{pmatrix}3 &amp; 0 \\0 &amp; 2\end{pmatrix},B^Tx_0 = (1,-1)^T\]</span> 故由 <span class="math inline">\(B^TB\lambda = B^Tx_0\)</span> 可知，<span class="math inline">\(\lambda = (\frac{1}{3}, -\frac{1}{2})^T\)</span></p><p>故 <span class="math display">\[\pi(x_0) = B \lambda = (-\frac{1}{6}, -\frac{5}{6}, \frac{1}{3})^T\]</span> 于是 <span class="math display">\[\pi(x) = \pi(x_0) + \beta = (\frac{5}{6}, \frac{7}{6}, \frac{4}{3})^T\]</span></p><h2 id="十一">十一</h2><blockquote><p>设 <span class="math display">\[a_1 = \begin{pmatrix} 1 \\2 \\-1\end{pmatrix},a_2 = \begin{pmatrix} -1 \\3 \\1\end{pmatrix},a_3 = \begin{pmatrix} 4 \\-1 \\0\end{pmatrix}\]</span> ，试将向量组 <span class="math inline">\((a_1, a_2, a_3)\)</span> 标准正交化。</p></blockquote><p>令 <span class="math display">\[\begin{aligned}b_1 &amp;= a_1 = (1,2,-1)^T \\b_2 &amp;= a_2 - \frac{\langle b_1, a_2 \rangle}{\langle b_1,b_1 \rangle} b_1 = \frac{5}{3}(-1,1,1)^T \\b_3 &amp;= a_3 - \frac{\langle b_1, a_3 \rangle}{\langle b_1,b_1 \rangle} b_1 - \frac{\langle b_2, a_3 \rangle}{\langle b_2,b_2 \rangle} b_2 = 2(1, 0, 1)^T\end{aligned}\]</span> 故 <span class="math display">\[\begin{aligned}e_1 &amp;= \textbf{e}_{b_1} = \frac{1}{\sqrt{6}} (1,2,-1)^T \\e_2 &amp;= \textbf{e}_{b_2} = \frac{1}{\sqrt{3}}(-1,1,1)^T \\e_3 &amp;= \textbf{e}_{b_3} = \frac{1}{\sqrt{2}}(1,0,1)^T\end{aligned}\]</span> 因此 <span class="math inline">\((a_1, a_2, a_3)\)</span> 标准正交化后的向量组为 <span class="math inline">\((e_1, e_2, e_3)\)</span></p><h2 id="十二">十二</h2><blockquote><p>复现Lec6例13的结果。其中负例为 <span class="math inline">\((1.5,2), (1.7, 1.5), (2,2), (1.5,2.5)\)</span>，正例为 <span class="math inline">\((1,2),(0.3,0.3), (2,1), (1,1)\)</span>，分别采用了欧式距离和曼哈顿距离两种距离度量方式。</p></blockquote><p><strong>实现代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 数据集</span><br>p=[[<span class="hljs-number">1</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]<br>n=[[<span class="hljs-number">1.5</span>,<span class="hljs-number">1.7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1.5</span>], [<span class="hljs-number">2</span>,<span class="hljs-number">1.5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2.5</span>]]<br>p=np.array(p)<br>n=np.array(n)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">divide</span>(<span class="hljs-params">dist,k,X,Y</span>):</span>  <span class="hljs-comment"># dist为一距离函数，k为KNN的参数，(X,Y)为数据的坐标</span><br>    ans_p=[np.sort(dist(p[<span class="hljs-number">0</span>]-X[i],p[<span class="hljs-number">1</span>]-Y[i]))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(X))]<br>    ans_n=[np.sort(dist(n[<span class="hljs-number">0</span>]-X[i],n[<span class="hljs-number">1</span>]-Y[i]))<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(X))]<br>    t=[ans_p[i][int((k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>)]&gt;ans_n[i][int((k<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>)]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(ans_p))]<br>    <span class="hljs-keyword">return</span> np.array(t) <span class="hljs-comment"># 返回分类结果</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dist1</span>(<span class="hljs-params">x,y</span>):</span>  <span class="hljs-comment"># Euclid distance</span><br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(x)):<br>        result.append(math.sqrt(x[i] * x[i] + y[i] * y[i]))<br>    <span class="hljs-keyword">return</span> np.array(result)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dist2</span>(<span class="hljs-params">x,y</span>):</span>  <span class="hljs-comment"># Manhattan distance</span><br>    <span class="hljs-keyword">return</span> np.abs(x) + np.abs(y)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example_dist</span>(<span class="hljs-params">x,y</span>):</span>  <span class="hljs-comment"># Minkovski distance</span><br>    <span class="hljs-keyword">return</span> np.max([np.abs(x),np.abs(y)],axis=<span class="hljs-number">0</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot</span>(<span class="hljs-params">dist,k,ax</span>):</span>  <span class="hljs-comment"># 画图</span><br>    N=<span class="hljs-number">200</span>  <span class="hljs-comment"># 在平面上生成 N x N个点</span><br>    X=np.linspace(<span class="hljs-number">-0</span>,<span class="hljs-number">3</span>,N)  <span class="hljs-comment"># 生成横坐标</span><br>    Y=X <span class="hljs-comment"># 生成纵坐标</span><br>    X,Y=np.meshgrid(X,Y)  <span class="hljs-comment"># 生成 N x N个点</span><br>    X=X.reshape(<span class="hljs-number">1</span>,N*N)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 将横坐标化为向量形式</span><br>    Y=Y.reshape(<span class="hljs-number">1</span>,N*N)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 将纵坐标化为向量形式</span><br>    predict=divide(dist, k, X, Y)<br>    ax.contourf(X.reshape(N,N), Y.reshape(N,N), predict.reshape(N,N),<br>                cmap=plt.cm.Spectral,alpha=<span class="hljs-number">0.3</span>)  <span class="hljs-comment"># 此函数将根据预测值和对应坐标生成图像</span><br>    ax.plot(p[<span class="hljs-number">0</span>],p[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;rx&#x27;</span>)<br>    ax.plot(n[<span class="hljs-number">0</span>],n[<span class="hljs-number">1</span>],<span class="hljs-string">&#x27;bo&#x27;</span>)<br>    plt.text(<span class="hljs-number">0.5</span>,<span class="hljs-number">2.5</span>,<span class="hljs-string">&quot;k=&quot;</span>+str(k))<br>    plt.show()<br><br><br>fig, ax = plt.subplots()<br>plot(dist2, <span class="hljs-number">3</span>, ax)<br></code></pre></td></tr></table></figure><p><strong>输出结果：（欧几里得距离）</strong></p><img src="/2021/04/12/dase-math/dase-math-assignment-3/euclid.png" class="" title="euclid"><p><strong>输出结果：（曼哈顿距离）</strong></p><img src="/2021/04/12/dase-math/dase-math-assignment-3/manhattan.png" class="" title="manhattan">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;分别求下面向量的1-范数、2-范数和无穷范数 &lt;span class=&quot;math display&quot;&gt;\[
a_1 = \begin{pmatrix}
1 \\
2 \\
1
\end{pmatrix},
a_2 </summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业2</title>
    <link href="http://gonggongjohn.me/2021/03/16/dase-math/dase-math-assignment-2/"/>
    <id>http://gonggongjohn.me/2021/03/16/dase-math/dase-math-assignment-2/</id>
    <published>2021-03-16T02:00:00.000Z</published>
    <updated>2022-02-09T15:43:05.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><ol type="1"><li>设 <span class="math inline">\(A, B\)</span> 为两可逆矩阵，令 <span class="math inline">\(X=\begin{pmatrix} O &amp; A \\ B &amp; O \end{pmatrix}\)</span> 求 <span class="math inline">\(X^{-1}\)</span>。</li></ol></blockquote><p>由 <span class="math inline">\(A,B\)</span> 为两可逆矩阵可知 <span class="math inline">\(A, B\)</span> 均为方阵</p><p>设 <span class="math inline">\(A \in M^{m \times m}, B \in M_{n \times n}\)</span></p><p>故由 <span class="math display">\[\begin{pmatrix}O &amp; A \\B &amp; O\end{pmatrix}\begin{pmatrix}O &amp; B^{-1} \\A^{-1} &amp; O\end{pmatrix}= I_{(m+n) \times (m+n)}\]</span></p><p>可知 <span class="math display">\[X^{-1} = \begin{pmatrix}O &amp; B^{-1} \\A^{-1} &amp; O\end{pmatrix}\]</span></p><h2 id="二">二</h2><blockquote><p>求解线性方程组 <span class="math display">\[\begin{pmatrix}1 &amp; 2 &amp; 3 \\2 &amp; -2 &amp; 1 \\3 &amp; -1 &amp; -1\end{pmatrix}\begin{pmatrix}x_1 \\x_2 \\x_3\end{pmatrix}=\begin{pmatrix}6 \\1 \\1\end{pmatrix}\]</span></p></blockquote><p>对原方程组的增广矩阵做行初等变换 <span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\2 &amp; -2 &amp; 1 &amp; 1 \\3 &amp; -1 &amp; -1 &amp; 1\end{pmatrix}\xrightarrow[r_3-3r_1]{r_2-2r_1}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; -7 &amp; -10 &amp; -17\end{pmatrix}\xrightarrow{r_3-2r_2}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; 5 &amp; 0 &amp; 5\end{pmatrix}\xrightarrow{\frac{1}{5}r_3}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; -6 &amp; -5 &amp; -11 \\0 &amp; 1 &amp; 0 &amp; 1\end{pmatrix} \\\xrightarrow{r_2 \leftrightarrow r_3}&amp;\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; -6 &amp; -5 &amp; -11\end{pmatrix}\xrightarrow[r_3+6r_2]{r_1-2r_2}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; -5 &amp; -5\end{pmatrix}\xrightarrow{-\frac{1}{5}r_3}\begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 6 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow{r_1-3r_3}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 1 &amp; 1\end{pmatrix}\end{aligned}\]</span></p><p>故原方程组的解为 <span class="math inline">\(\begin{pmatrix}x_1 \\ x_2 \\ x_3 \end{pmatrix} = \begin{pmatrix} 1 \\ 1 \\ 1 \end{pmatrix}\)</span></p><h2 id="三">三</h2><blockquote><p>证明：<span class="math inline">\(\mathbb{R}^{m \times m}\)</span> 中的对称矩阵按照矩阵的加法与数乘在数域 <span class="math inline">\(\mathbb{R}\)</span> 上构成一个线性空间。(如果矩阵 <span class="math inline">\(A\)</span> 是对称矩阵，则有 <span class="math inline">\(A^T = A\)</span>。)</p></blockquote><p>记 <span class="math inline">\(R^{m \times m}\)</span> 上对称矩阵的全体为 <span class="math inline">\(S^{m \times m}\)</span></p><p>由 <span class="math inline">\((R^{m \times m}, +, \cdot)\)</span> 为一个 <span class="math inline">\(\mathbb{R}\)</span> 上的线性空间可知</p><p>任取 <span class="math inline">\(M, N, P \in R^{m \times m}, k_1, k_2 \in \mathbb{R}\)</span>，有</p><ul><li><span class="math inline">\(M + N = N + M\)</span></li><li><span class="math inline">\((M + N) + P = M + (N + P)\)</span></li><li>存在 <span class="math inline">\(\textbf{0} \in R^{m \times m}\)</span> 使得 <span class="math inline">\(M + \textbf{0} = M\)</span></li><li>对于任一个 <span class="math inline">\(M\)</span>，存在 <span class="math inline">\(Q \in R^{m \times m}\)</span> 使得 <span class="math inline">\(M + Q = \textbf{0}\)</span></li><li>存在 <span class="math inline">\(1 \in \mathbb{R}\)</span>，使得 <span class="math inline">\(1 \cdot M = M\)</span></li><li><span class="math inline">\((k_1 \cdot k_2) \cdot M = k_1 \cdot (k_2 \cdot M)\)</span></li><li><span class="math inline">\((k_1 + k_2) \cdot M = k_1 \cdot M + k_2 \cdot M\)</span></li><li><span class="math inline">\(k_1 \cdot (M + N) = k_1 \cdot M + k_1 \cdot N\)</span></li></ul><p>由于 <span class="math inline">\(S^{m \times m} \subset R^{m \times m}\)</span>，故 <span class="math inline">\(S^{m \times m}\)</span> 对于矩阵加法及 <span class="math inline">\(\mathbb{R}\)</span> 上的数乘运算同样满足以上性质</p><p>又 <span class="math inline">\(\textbf{0} \in S^{m \times m}\)</span>，且任取 <span class="math inline">\(A = (a_{ij})_{m \times m} \in S^{m \times m}\)</span>，显然 <span class="math inline">\(-A = (-a_{ij})_{m \times m}\in S^{m \times m}\)</span></p><p>因此我们仅需证明 <span class="math inline">\(S^{m \times m}\)</span> 对矩阵加法和数乘封闭即可</p><p>任取 <span class="math inline">\(A, B \in S^{m \times m}, k \in \mathbb{R}\)</span>，其中 <span class="math display">\[A = \begin{pmatrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\a_{12} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nn}\end{pmatrix},B = \begin{pmatrix}b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n} \\b_{12} &amp; b_{22} &amp; \cdots &amp; b_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\b_{1n} &amp; b_{2n} &amp; \cdots &amp; b_{nn}\end{pmatrix}\]</span> 则 <span class="math display">\[A+B = \begin{pmatrix}a_{11} + b_{11} &amp; a_{12} + b_{12} &amp; \cdots &amp; a_{1n} + b_{1n} \\a_{12} + b_{12} &amp; b_{22} + b_{22} &amp; \cdots &amp; a_{2n} + b_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\a_{1n} + b_{1n} &amp; a_{1n} + b_{2n} &amp; \cdots &amp; a_{nn} + b_{nn}\end{pmatrix} \\kA = \begin{pmatrix}ka_{11} &amp; ka_{12} &amp; \cdots &amp; ka_{1n} \\ka_{12} &amp; ka_{22} &amp; \cdots &amp; ka_{2n} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ka_{1n} &amp; ka_{2n} &amp; \cdots &amp; ka_{nn}\end{pmatrix}\]</span> 易见 <span class="math inline">\(A+B, kA \in S^{m \times m}\)</span></p><p>故 <span class="math inline">\(R^{m \times m}\)</span> 中的对称矩阵按照矩阵的加法和数乘在数域 <span class="math inline">\(\mathbb{R}\)</span> 上构成一个线性空间</p><h2 id="四">四</h2><blockquote><p>令 <span class="math inline">\(\beta = (1,2,1,1)^T, \alpha_1 = (1,1,1,1)^T, \alpha_2 = (1,1,-1,-1)^T, \alpha_3 = (1,-1,1,-1)^T, \alpha_4 = (1,-1,-1,1)^T\)</span>，试将向量 <span class="math inline">\(\beta\)</span> 表示成 <span class="math inline">\(\alpha_1, \alpha_2, \alpha_3, \alpha_4\)</span> 的线性组合。</p></blockquote><p><span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\1 &amp; 1 &amp; -1 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 1 &amp; -1 &amp; 1 \\1 &amp; -1 &amp; -1 &amp; 1 &amp; 1\end{pmatrix}\xrightarrow[\begin{array} .r_3 - r_1 \\ r_4 -r_1 \end{array}]{r_2 - r_1}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; -2 &amp; -2 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_2 \leftrightarrow r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; -2 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[r_4 - r_3]{r_4 - r_2}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 4 &amp; -1\end{pmatrix} \\&amp;\xrightarrow{\frac{1}{4} \cdot r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; 0 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow[\begin{array} .r_3 + 2 \cdot r_4 \\ r_2 + 2 \cdot r_4 \end{array}]{r_1 - r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{5}{4} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; -2 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{5}{4} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{r_1 - r_3} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_2}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\xrightarrow{r_1 - r_2}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 0 &amp; \frac{5}{4} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{4} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -\frac{1}{4} \\0 &amp; 0 &amp; 0 &amp; 1 &amp; -\frac{1}{4}\end{pmatrix}\end{aligned}\]</span></p><p>故 <span class="math display">\[\beta = \frac{5}{4} \alpha_1 + \frac{1}{4} \alpha_2 - \frac{1}{4} \alpha_3 - \frac{1}{4} \alpha_4\]</span></p><h2 id="五">五</h2><blockquote><p>设 <span class="math inline">\(\epsilon_{1}=\left(\begin{array}{l} 1 \\ 1 \\ 1 \\ 1 \end{array}\right), \epsilon_{2}=\left(\begin{array}{c} 1 \\ 1 \\ -1 \\ -1 \end{array}\right), \epsilon_{3}=\left(\begin{array}{c} 1 \\ -1 \\ 1 \\ -1 \end{array}\right), \epsilon_{1}=\left(\begin{array}{c} 1 \\ -1 \\ -1 \\ -1 \end{array}\right), a=\left(\begin{array}{c} 1 \\ 2 \\ -1 \\ 1 \end{array}\right)\)</span>，试求 <span class="math inline">\(a\)</span> 在基 <span class="math inline">\(\epsilon_1, \epsilon_2, \epsilon_3, \epsilon_4\)</span> 下的坐标。</p></blockquote><p><span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\1 &amp; 1 &amp; -1 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 1 &amp; -1 &amp; -1 \\1 &amp; -1 &amp; -1 &amp; -1 &amp; 1\end{pmatrix}\xrightarrow[\begin{array} .r_3 - r_1 \\ r_4 -r_1 \end{array}]{r_2 - r_1}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; -2 &amp; -2 &amp; -2 &amp; 0\end{pmatrix}\xrightarrow{r_2 \leftrightarrow r_3}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; -2 &amp; -2 &amp; -2 &amp; 0\end{pmatrix}\xrightarrow[r_4 - r_3]{r_4 - r_2} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 2 &amp; 1\end{pmatrix}\xrightarrow{\frac{1}{2} \cdot r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 \\0 &amp; -2 &amp; 0 &amp; -2 &amp; -2 \\0 &amp; 0 &amp; -2 &amp; -2 &amp; 1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow[\begin{array} .r_2 + 2 \cdot r_4 \\ r_3 + 2 \cdot r_4 \end{array}]{r_1 - r_4}\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{1}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; -2 &amp; 0 &amp; 2 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_3} \\&amp;\begin{pmatrix}1 &amp; 1 &amp; 1 &amp; 0 &amp; \frac{1}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{r_1 - r_3}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; -2 &amp; 0 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{-\frac{1}{2} \cdot r_2}\begin{pmatrix}1 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{3}{2} \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\xrightarrow{r_1 - r_2}\begin{pmatrix}1 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; 0 &amp; 0 &amp; \frac{1}{2} \\0 &amp; 0 &amp; 1 &amp; 0 &amp; -1 \\0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{1}{2}\end{pmatrix}\end{aligned}\]</span></p><p>故 <span class="math display">\[a = \epsilon_1 + \frac{1}{2} \epsilon_2 - \epsilon_3 + \frac{1}{2} \epsilon_4\]</span> 即 <span class="math inline">\(a\)</span> 在基 <span class="math inline">\(\epsilon_1, \epsilon_2, \epsilon_3, \epsilon_4\)</span> 下的坐标为 <span class="math display">\[(1, \frac{1}{2}, -1, \frac{1}{2})\]</span></p><h2 id="六">六</h2><blockquote><p>记数域 <span class="math inline">\(\mathbb{R}\)</span> 上的对称矩阵按照矩阵的加法与数乘构成的线性空间为 <span class="math inline">\(V\)</span>。证明：映射 <span class="math inline">\(\sigma_{Q}: V \rightarrow V, \sigma_{Q}(A)=Q^{T} A Q\)</span> 为线性映射。其中 <span class="math inline">\(Q\)</span> 为正交矩阵，即 <span class="math inline">\(Q^T Q = I\)</span>。</p></blockquote><p>任取 <span class="math inline">\(A,B \in V, k_1, k_2 \in \mathbb{R}\)</span> <span class="math display">\[\begin{aligned}\sigma_Q(k_1 \cdot A + k_2 \cdot B) &amp;= Q^T (k_1 \cdot A + K_2 \cdot B) Q \\&amp;=k_1 \cdot Q^TAQ + k_2 \cdot Q^TBQ \\&amp;=k_1 \cdot \sigma_Q(A) + k_2 \cdot \sigma_Q(B)\end{aligned}\]</span> 故映射 <span class="math inline">\(\sigma_Q\)</span> 对 <span class="math inline">\(V\)</span> 中的两种运算保持不变</p><p>由此可知，<span class="math inline">\(\sigma_Q: V \to V, \sigma_Q(A)=Q^TAQ\)</span> 为线性映射</p><h2 id="七">七</h2><blockquote><p>求矩阵 <span class="math inline">\(A=\left(\begin{array}{ccc} 1 &amp; 1 &amp; -1 \\ 1 &amp; 0 &amp; 1 \\ -1 &amp; 1 &amp; 0 \end{array}\right)\)</span> 对应二次型的标准型。</p></blockquote><p>矩阵 <span class="math inline">\(A\)</span> 对应的二次型为 <span class="math inline">\(f = x_1^2 + 2x_1x_2 -2x_1x_3+2x_2x_3\)</span></p><p>下用配方法将其化为标准型 <span class="math display">\[\begin{aligned}f(x_1,x_2,x_3) &amp;= x_1^2 + 2x_1x_2 -2x_1x_3+2x_2x_3 \\&amp;=(x_1+x_2-x_3)^2 - 4x_2x_3-x_2^2-x_3^2 \\&amp;=(x_1+x_2-x_3)^2-(x_2+2x_3)^2+3x_3^2\end{aligned}\]</span> 令 <span class="math display">\[\left\{\begin{aligned}&amp;y_1 = x_1+x_2-x_3 \\&amp;y_2 = x_2+2x_3 \\&amp;y_3 = x_3\end{aligned}\right.\]</span> 解得 <span class="math display">\[\left\{\begin{aligned}&amp;x_1 = y_1-y_2+3y_3 \\&amp;x_2 = y_2-2y_3 \\&amp;x_3 = y_3\end{aligned}\right.\]</span> 由此可得标准型为 <span class="math inline">\(f = y_1^2-y_2^2+3y_3^2\)</span>，所用变换矩阵为 <span class="math display">\[C=\begin{pmatrix}1 &amp; -1 &amp; 3 \\0 &amp; 1 &amp; -2 \\0 &amp; 0 &amp; 1\end{pmatrix}\]</span></p><h2 id="八">八</h2><blockquote><p>试判断下列哪些矩阵是正定矩阵。 <span class="math display">\[A_{1}=\left(\begin{array}{ll}2 &amp; 1 \\1 &amp; 1\end{array}\right) \quad A_{2}=\left(\begin{array}{llll}5 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 4 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 7 &amp; 2 \\0 &amp; 0 &amp; 2 &amp; 4\end{array}\right) \quad A_{3}=\left(\begin{array}{ll}2 &amp; 3 \\3 &amp; 1\end{array}\right) \quad A_{4}=\left(\begin{array}{lll}2 &amp; 3 &amp; 1 \\3 &amp; 1 &amp; 2 \\1 &amp; 2 &amp; 1\end{array}\right)\]</span></p></blockquote><p>由 <span class="math display">\[D_{11} = 2 &gt;0,D_{12} = \begin{vmatrix}2 &amp; 1 \\1 &amp; 1\end{vmatrix}=1 &gt; 0\]</span> 可知 <span class="math inline">\(A_1 = \begin{pmatrix} 2 &amp; 1 \\ 1 &amp; 1\end{pmatrix}\)</span> 的顺序主子式均大于0，因此 <span class="math inline">\(A_1\)</span> 是正定矩阵</p><p>由 <span class="math display">\[D_{21} = 5 &gt; 0,D_{22} = \begin{vmatrix}5 &amp; 1 \\1 &amp; 4\end{vmatrix} = 19 &gt; 0,D_{23} = \begin{vmatrix}5 &amp; 1 &amp; 0 \\1 &amp; 4 &amp; 0 \\0 &amp; 0 &amp; 7\end{vmatrix} = 133 &gt; 0,D_{24} = \begin{vmatrix}5 &amp; 1 &amp; 0 &amp; 0 \\1 &amp; 4 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 7 &amp; 2 \\0 &amp; 0 &amp; 2 &amp; 4\end{vmatrix} = 456 &gt; 0\]</span> 可知 <span class="math inline">\(A_2 = \begin{pmatrix} 5 &amp; 1 &amp; 0 &amp; 0 \\ 1 &amp; 4 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 7 &amp; 2 \\ 0 &amp; 0 &amp; 2 &amp; 4 \end{pmatrix}\)</span> 的顺序主子式均大于0，因此 <span class="math inline">\(A_2\)</span> 是正定矩阵</p><p>由 <span class="math display">\[D_{32} = \begin{vmatrix}2 &amp; 3 \\3 &amp; 1\end{vmatrix}=-7 &lt; 0\]</span> 可知 <span class="math inline">\(A_3 = \begin{pmatrix} 2 &amp; 3 \\ 3 &amp; 1 \end{pmatrix}\)</span> 的顺序主子式不全大于0，因此 <span class="math inline">\(A_3\)</span> 不是正定矩阵</p><p>由 <span class="math display">\[D_{42} = \begin{vmatrix}2 &amp; 3 \\3 &amp; 1\end{vmatrix}=-7 &lt; 0\]</span> 可知 <span class="math inline">\(A_4 = \begin{pmatrix} 2 &amp; 3 &amp; 1\\ 3 &amp; 1 &amp; 2 \\ 1 &amp; 2 &amp; 1\end{pmatrix}\)</span> 的顺序主子式不全不大于0，因此 <span class="math inline">\(A_4\)</span> 不是正定矩阵</p><h2 id="九">九</h2><blockquote><p>求矩阵 <span class="math inline">\(A = \begin{pmatrix} 1 &amp; 4 &amp; 2 \\ 0 &amp; -3 &amp; 4 \\ 0 &amp; 4 &amp; 3 \end{pmatrix}\)</span> 的特征值与对应的特征向量。</p></blockquote><p>由 <span class="math display">\[\begin{aligned}|\lambda I - A | &amp;= \begin{vmatrix}\lambda -1  &amp; -4 &amp; -2 \\0 &amp; \lambda + 3 &amp; -4 \\0 &amp; -4 &amp; \lambda - 3\end{vmatrix} \\&amp;= (\lambda - 1)(\lambda + 3)(\lambda - 3) - 16(\lambda - 1) \\&amp;=(\lambda-1)(\lambda-5)(\lambda+5) = 0\end{aligned}\]</span> 解得 <span class="math inline">\(\lambda_1 = 1, \lambda_2 = 5, \lambda_3 = -5\)</span></p><p>对于 <span class="math inline">\(\lambda_1 = 1\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 4 &amp; -4 \\0 &amp; -4 &amp; -2\end{pmatrix}\xrightarrow[r_3-r_1]{r_2+r_1}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 0 &amp; -6 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{-\frac{1}{6} \cdot r_2}\begin{pmatrix}0 &amp; -4 &amp; -2 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{r_1+2 \cdot r_2}\begin{pmatrix}0 &amp; -4 &amp; 0 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow{-\frac{1}{4} \cdot r_1}\begin{pmatrix}0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1 \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_1 = (1,0,0)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_1\)</span> 的特征向量全体为 <span class="math inline">\(k_1 \alpha_1 (k_1 \neq 0\in \mathbb{R})\)</span></p><p>对于 <span class="math inline">\(\lambda_2 = 5\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}4 &amp; -4 &amp; -2 \\0 &amp; 8 &amp; -4 \\0 &amp; -4 &amp; 2\end{pmatrix}\xrightarrow{\frac{1}{4} \cdot r_2}\begin{pmatrix}4 &amp; -4 &amp; -2 \\0 &amp; 2 &amp; -1 \\0 &amp; -4 &amp; 2\end{pmatrix}\xrightarrow[r_3+2 \cdot r_2]{r_1 + 2 \cdot r_2}\begin{pmatrix}4 &amp; 0 &amp; -4 \\0 &amp; 2 &amp; -1 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[\frac{1}{2} \cdot r_2]{\frac{1}{4} \cdot r_1}\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; -\frac{1}{2} \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_2 = (2,1,2)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_2\)</span> 的特征向量全体为 <span class="math inline">\(k_2\alpha_2(k_2 \neq 0 \in \mathbb{R})\)</span></p><p>对于 <span class="math inline">\(\lambda_3 = -5\)</span> <span class="math display">\[\begin{aligned}\begin{pmatrix}-6 &amp; -4 &amp; -2 \\0 &amp; -2 &amp; -4 \\0 &amp; -4 &amp; -8\end{pmatrix}\xrightarrow[r_3 - 2 \cdot r_2]{r_1 - 2 \cdot r_2}\begin{pmatrix}-6 &amp; 0 &amp; 6 \\0 &amp; -2 &amp; -4 \\0 &amp; 0 &amp; 0\end{pmatrix}\xrightarrow[-\frac{1}{2} \cdot r_2]{-\frac{1}{6} r_1}\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; 2 \\0 &amp; 0 &amp; 0\end{pmatrix}\end{aligned}\]</span> 因此 <span class="math inline">\(\alpha_3 = (1,-2,1)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_3\)</span> 的特征向量全体为 <span class="math inline">\(k_3\alpha_3 (k_3 \neq 0 \in \mathbb{R})\)</span></p><h2 id="十">十</h2><blockquote><p>设已知 <span class="math inline">\(A = \begin{pmatrix} 2 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 1 &amp; 1 &amp; 2 \end{pmatrix}\)</span>，且 <span class="math inline">\(x = \begin{pmatrix} 1 \\ k \\ 1 \end{pmatrix}\)</span>是矩阵 <span class="math inline">\(A^{-1}\)</span> 的一个特征向量，求 <span class="math inline">\(k\)</span>。</p></blockquote><p>设 <span class="math inline">\(x = (1,k,1)^T\)</span> 为 <span class="math inline">\(A^{-1}\)</span> 属于 <span class="math inline">\(\lambda_0\)</span> 的一个特征向量</p><p>则 <span class="math inline">\(x\)</span> 为 <span class="math inline">\(A\)</span> 属于 <span class="math inline">\(\frac{1}{\lambda_0}\)</span> 的一个特征向量</p><p>由 <span class="math display">\[\begin{aligned}|\lambda I - A | &amp;= \begin{vmatrix}\lambda -2  &amp; -1 &amp; -1 \\-1 &amp; \lambda -2 &amp; -1 \\-1 &amp; -1 &amp; \lambda - 2\end{vmatrix} =(\lambda-4)(\lambda-1)^2\end{aligned}\]</span> 可知 <span class="math inline">\(\lambda_1 = 4\)</span>，<span class="math inline">\(\lambda_2 = 1\)</span>（二重根）</p><p>对于 <span class="math inline">\(\lambda_1 = 4\)</span> <span class="math display">\[\begin{pmatrix}2 &amp; -1 &amp; -1 \\-1 &amp; 2 &amp; -1 \\-1 &amp; -1 &amp; 2\end{pmatrix}\rightarrow\begin{pmatrix}1 &amp; 0 &amp; -1 \\0 &amp; 1 &amp; -1 \\0 &amp; 0 &amp; 0\end{pmatrix}\]</span> 解得 <span class="math inline">\(\alpha_1 = (1, 1, 1)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_1\)</span> 的特征向量的全体构成的集合为 <span class="math inline">\(E_1 = \{k_1 \alpha_1 : k_1 \neq 0 \in \mathbb{R} \}\)</span></p><p>若 <span class="math inline">\(x \in E_1\)</span>，则 <span class="math inline">\(k=1\)</span></p><p>对于 <span class="math inline">\(\lambda_2 = 1\)</span> <span class="math display">\[\begin{pmatrix}-1 &amp; -1 &amp; -1 \\-1 &amp; -1 &amp; -1 \\-1 &amp; -1 &amp; -1\end{pmatrix}\rightarrow\begin{pmatrix}1 &amp; 1 &amp; 1 \\0 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0\end{pmatrix}\]</span> 解得 <span class="math inline">\(\alpha_2 = (-1,0,1)^T, \alpha_3 = (-1,1,0)^T\)</span>，<span class="math inline">\(A\)</span> 的属于 <span class="math inline">\(\lambda_2\)</span> 的特征向量的全体构成的集合为 <span class="math inline">\(E_2 = \{k_2\alpha_2 + k_3 \alpha_3 : k_2,k_3 \in \mathbb{R} \land (k_2\neq 0 \lor k_3 \neq 0)\}\)</span></p><p>若 <span class="math inline">\(x \in E_2\)</span>，则 <span class="math inline">\(k=-2\)</span></p><h2 id="十一">十一</h2><blockquote><p>使用Python将一张图片旋转一定⻆度。 提交时需要提交原来的图片和旋转后的图片以及补全的代码。</p></blockquote><p>原图片：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/origin.jpg" class="" title="origin"><p>逆时针旋转：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/fig1.jpg" class="" title="fig1"><p>顺时针旋转：</p><img src="/2021/03/16/dase-math/dase-math-assignment-2/fig2.jpg" class="" title="fig2"><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>matplotlib.use(<span class="hljs-string">&quot;TkAgg&quot;</span>)<br>img_origin = Image.open(<span class="hljs-string">&#x27;origin.jpg&#x27;</span>)<br>img_origin = img_origin.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>img = np.array(img_origin)<br>theta = <span class="hljs-number">30</span>/<span class="hljs-number">180</span>*np.pi<br>cos_theta = np.cos(theta)<br>sin_theta = np.sin(theta)<br>center_i = len(img)/<span class="hljs-number">2</span><br>center_j = len(img[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span><br>imgr = np.zeros_like(img)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(img)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(img[<span class="hljs-number">0</span>])):<br>        yi = int(cos_theta * (i - center_i) - sin_theta * (j - center_j) + center_i)<br>        yj = int(sin_theta * (i - center_i) + cos_theta * (j - center_j) + center_j)<br>        <span class="hljs-keyword">if</span> yi &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> yj &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> yi &gt;= len(img) <span class="hljs-keyword">or</span> yj &gt;= len(img[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>            imgr[yi][yj][k] = img[i][j][k]<br>plt.imshow(imgr)<br>plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;fig1.jpg&#x27;</span>)<br>plt.clf()<br>imgR = np.zeros_like(img)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(img)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(img[<span class="hljs-number">0</span>])):<br>        xi = int(cos_theta * (i - center_i) + sin_theta * (j - center_j) + center_i)<br>        xj = int(-sin_theta * (i - center_i) + cos_theta * (j - center_j) + center_j)<br>        <span class="hljs-keyword">if</span> xi &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xj &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xi &gt;= len(img) <span class="hljs-keyword">or</span> xj &gt;= len(img[<span class="hljs-number">0</span>]):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>            imgR[xi][xj][k] = img[i][j][k]<br>plt.imshow(imgR)<br>plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;fig2.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;设 &lt;span class=&quot;math inline&quot;&gt;\(A, B\)&lt;/span&gt; 为两可逆矩阵，令 &lt;span class=&quot;math inline&quot;&gt;\(X=\begin{p</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>数据科学与工程数学基础 作业1</title>
    <link href="http://gonggongjohn.me/2021/03/12/dase-math/dase-math-assignment-1/"/>
    <id>http://gonggongjohn.me/2021/03/12/dase-math/dase-math-assignment-1/</id>
    <published>2021-03-12T02:00:00.000Z</published>
    <updated>2022-02-09T14:55:19.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一">一</h2><blockquote><p>卷积神经网络是一类典型的处理图像的模型，其中卷积是其中一种非常重要的函数操作。试计算下列输入和卷积核做卷积的结果。（注意：此处卷积操作无需旋转180度） <span class="math display">\[\textrm{Input} =\begin{pmatrix}1 &amp; 3 &amp; 0 &amp; -1 \\3 &amp; 0 &amp; -1 &amp; 2 \\1 &amp; -1 &amp; 2 &amp; 0\end{pmatrix},\textrm{Kernel} = \begin{pmatrix}-1 &amp; 1 \\-1 &amp; 1\end{pmatrix}\]</span></p></blockquote><p>由卷积运算公式可知 <span class="math display">\[\begin{aligned}output_{11} &amp;= 1 \cdot (-1) + 3 \cdot 1 + 3 \cdot (-1) + 0 \cdot 1 = -1 \\output_{12} &amp;= 3 \cdot (-1) + 0 \cdot 1 + 0 \cdot (-1) + (-1) \cdot 1 = -4 \\output_{13} &amp;= 0 \cdot (-1) + (-1) \cdot 1 + (-1) \cdot (-1) + 2 \cdot 1 = 2 \\output_{21} &amp;= 3 \cdot (-1) + 0 \cdot 1 + 1 \cdot (-1) + (-1) \cdot 1 = -5 \\output_{22} &amp;= 0 \cdot (-1) + (-1) \cdot 1 + (-1) \cdot (-1) + 2 \cdot 1 = 2 \\output_{23} &amp;= (-1) \cdot (-1) + 2 \cdot 1 + 2 \cdot (-1) + 0 \cdot 1 = 1 \\\end{aligned}\]</span></p><p>故 <span class="math display">\[\textrm{Output} = \begin{pmatrix}-1 &amp; -4 &amp; 2 \\-5 &amp; 2 &amp; 1\end{pmatrix}\]</span></p><h2 id="二">二</h2><blockquote><p>现有一组图片数据集，任务目标是将这些图片分类。其中图片中包含的类别有：猫、狗、鹦鹉、人。试用One-Hot向量将类别表示为向量。</p></blockquote><p><span class="math display">\[\begin{aligned}猫 &amp;\xlongequal{def} [1,0,0,0]^T \\狗 &amp;\xlongequal{def} [0,1,0,0]^T \\鹦鹉 &amp;\xlongequal{def} [0,0,1,0]^T \\人 &amp;\xlongequal{def} [0,0,0,1]^T\end{aligned}\]</span></p><h2 id="三">三</h2><blockquote><p>现有文本集（一行为一个文本）如下。试计算，该文本集中各个单词（不区分大小写）在各文本中的TF-IDF值。</p><figure class="highlight erlang"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs erlang">I know.<br>You know.<br>I know that you know.<br>I know that you know that I know.<br></code></pre></td></tr></table></figure></blockquote><p>首先计算整个文档中各个词语的IDF值 <span class="math display">\[\begin{aligned}IDF_{(I)} &amp;= \ln \frac{4}{3} \\IDF_{(know)} &amp;= \ln \frac{4}{4} = 0 \\IDF_{(you)} &amp;= \ln \frac{4}{3} \\IDF_{(that)} &amp;= \ln \frac{4}{2} = \ln 2\end{aligned}\]</span></p><p>随后分别计算各个文档中各个词语的TF值 <span class="math display">\[TF_{(I,1)} = \frac{1}{2} , TF_{(know,1)} = \frac{1}{2} \\TF_{(you,2)} = \frac{1}{2} , TF_{(know,2)} = \frac{1}{2} \\TF_{(I,3)} = \frac{1}{5} , TF_{(you,3)} = \frac{1}{5},TF_{(know,3)} = \frac{2}{5} , TF_{(that,2)} = \frac{1}{5} \\TF_{(I,4)} = \frac{1}{4} , TF_{(you,4)} = \frac{1}{8},TF_{(know,4)} = \frac{3}{8} , TF_{(that,4)} = \frac{1}{4}\]</span> 由此可得各个单词在各文本中的TF-IDF值 <span class="math display">\[TF-IDF_{(I,1)} = \frac{1}{2} \cdot \ln \frac{4}{3} \approx 0.1438 \\TF-IDF_{(know,1)} = \frac{1}{2} \cdot 0 = 0 \\TF-IDF_{(you,2)} = \frac{1}{2} \cdot \ln \frac{4}{3} \approx 0.1438 \\TF-IDF_{(know,2)} = \frac{1}{2} \cdot 0 = 0 \\TF-IDF_{(I,3)} = \frac{1}{5} \cdot \ln \frac{4}{3} \approx 0.0575 \\TF-IDF_{(you,3)} = \frac{1}{5} \cdot \ln \frac{4}{3} \approx 0.0575 \\TF-IDF_{(know,3)} = \frac{2}{5} \cdot 0 = 0 \\TF-IDF_{(that,3)} = \frac{1}{5} \cdot \ln 2 \approx 0.1386 \\TF-IDF_{(I,4)} = \frac{1}{4} \cdot \ln \frac{4}{3} \approx 0.0719 \\TF-IDF_{(you,4)} = \frac{1}{8} \cdot \ln \frac{4}{3} \approx 0.0360 \\TF-IDF_{(know,4)} = \frac{3}{8} \cdot 0 = 0 \\TF-IDF_{(that,4)} = \frac{1}{4} \cdot \ln 2 \approx 0.1733 \\\]</span></p><h2 id="四">四</h2><blockquote><p>现有一个数据集有5个数据，分别被分类在 <span class="math inline">\((0,1)^T, (0,1)^T, (0,1)^T, (1,0)^T, (1,0)^T\)</span>，而一个模型给出的评分分别为 <span class="math inline">\((2,8)^T, (1,9)^T, (3,2)^T, (1,5)^T, (2,0)^T\)</span>，试给出此时模型给各个数据的概率评分以及交叉熵损失的值。</p></blockquote><p>由 <span class="math display">\[Softmax(x_i) = \frac{e^{x_i}}{\sum_\limits{j=1}^n e^{x_j}}\]</span></p><p>可知各个数据的概率评分为 <span class="math display">\[\begin{aligned}&amp;\begin{pmatrix}e^2/(e^2+e^8) \\e^8/(e^2+e^8)\end{pmatrix},\begin{pmatrix}e^1/(e^1+e^9) \\e^9/(e^1+e^9)\end{pmatrix},\begin{pmatrix}e^3/(e^3+e^2) \\e^2/(e^3+e^2)\end{pmatrix},\begin{pmatrix}e^1/(e^1+e^5) \\e^5/(e^1+e^5)\end{pmatrix},\begin{pmatrix}e^2/(e^2+e^0) \\e^0/(e^2+e^0)\end{pmatrix} \\\approx&amp;\begin{pmatrix}0.0025 \\0.9975\end{pmatrix},\begin{pmatrix}0.0003 \\0.9997\end{pmatrix},\begin{pmatrix}0.7311 \\0.2689\end{pmatrix},\begin{pmatrix}0.0180 \\0.9820\end{pmatrix},\begin{pmatrix}0.8808 \\0.1192\end{pmatrix}\end{aligned}\]</span></p><p>又由交叉熵损失计算公式 <span class="math display">\[L=-\sum_{c=1}^K y_c \log (p_c)\]</span> 可知各个数据的交叉熵损失为 <span class="math display">\[L_1 = - (0 \cdot \log 0.0025 + 1 \cdot \log 0.9975) \approx 0.0036 \\L_2 = - (0 \cdot \log 0.0003 + 1 \cdot \log 0.9997) \approx 0.0004 \\L_3 = - (0 \cdot \log 0.7311 + 1 \cdot \log 0.2689) \approx 1.8949 \\L_4 = - (1 \cdot \log 0.0180 + 0 \cdot \log 0.9820) \approx 5.7959 \\L_5 = - (1 \cdot \log 0.8808 + 0 \cdot \log 0.1192) \approx 0.1831\]</span></p><h2 id="五">五</h2><blockquote><p>设数据集为 <span class="math inline">\(x_1, x_2, \cdots, x_n\)</span> 其中被分为两类 <span class="math inline">\(y_1, y_2\)</span>。如果使用线性分类器，试给出一个考虑结构风险的损失函数的公式。</p></blockquote><p>线性分类器的评分函数可表示为（使用<strong>Softmax</strong>作为概率评分函数） <span class="math display">\[f(W,b,\textbf{x}) = Softmax(W \textbf{x} + b)\]</span></p><p>若使用交叉熵作为基础损失函数，使用 <span class="math inline">\(L_2\)</span> 范数作为正则化项，则最终的损失函数可以定义为 <span class="math display">\[J =-  \sum_{i = 1}^2 y_c \log (p_c) + \lambda ||\textbf{W}||_2^2\]</span> 其中 <span class="math inline">\(y_c\)</span> 为分类结果指示函数，<span class="math inline">\(p_c\)</span> 为模型给出当前分类的概率评分</p><h2 id="六">六</h2><blockquote><p>利用Python将一张黑白图片或彩色图片转化为矩阵或张量，并使图片水平翻转。</p></blockquote><p>翻转结果：</p><img src="/2021/03/12/dase-math/dase-math-assignment-1/merged.png" class="" title="merged"><p>实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>origin_path = <span class="hljs-string">&#x27;origin.jpg&#x27;</span><br>image = Image.open(origin_path)<br>tensor = np.asarray(image)<br>tensor_flipped = np.flip(tensor, <span class="hljs-number">1</span>)<br>image_flipped = Image.fromarray(tensor_flipped)<br>image_flipped = image_flipped.convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>image_flipped.save(<span class="hljs-string">&#x27;flipped.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一&quot;&gt;一&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;卷积神经网络是一类典型的处理图像的模型，其中卷积是其中一种非常重要的函数操作。试计算下列输入和卷积核做卷积的结果。（注意：此处卷积操作无需旋转180度） &lt;span class=&quot;math display&quot;&gt;\[</summary>
      
    
    
    
    <category term="数据科学数学基础" scheme="http://gonggongjohn.me/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="DataScience" scheme="http://gonggongjohn.me/tags/DataScience/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验 Shell及系统调用</title>
    <link href="http://gonggongjohn.me/2021/03/02/os/os-exp-shell/"/>
    <id>http://gonggongjohn.me/2021/03/02/os/os-exp-shell/</id>
    <published>2021-03-02T03:54:46.000Z</published>
    <updated>2022-02-09T14:20:55.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的">目的</h2><p>在MINIX环境下通过系统调用实现一个基本的Shell。</p><h2 id="内容与设计思想">内容与设计思想</h2><p>Shell能解析的命令行如下:</p><ol type="1"><li>带参数的程序运行功能。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>重定向功能，将文件作为程序的输入/输出。</li></ol><ol type="1"><li>“&gt;”表示覆盖写</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &gt; output-file<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>“&gt;&gt;”表示追加写</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &gt;&gt; output-file<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>“&lt;”表示文件输入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &lt; input-file<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>管道符号“|”，在程序间传递数据。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">programA arg1 ... argN | programB arg1 ... argN<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>后台符号&amp;，表示此命令将以后台运行的方式执行。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">program arg1 arg2 ... argN &amp;<br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><p>工作路径移动命令：<code>cd</code>。</p></li><li><p>程序运行统计：<code>mytop</code>。</p></li><li><p>shell退出命令：<code>exit</code>。</p></li><li><p>显示最近执行的n条指令：<code>history n</code>。</p></li></ol><h2 id="实验过程">实验过程</h2><h3 id="shell主体">Shell主体</h3><p>首先我们来实现Shell的基本结构。一个Shell的基本行为是不断接收用户的输入，并根据指令执行相应的操作。因此我们可以快速写出其main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXCMD 1024 <span class="hljs-comment">//Max number of commands that can be recorded  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXLINE 1024 <span class="hljs-comment">//Max number of characters a command line can have  </span></span><br>  <br><span class="hljs-keyword">char</span> cmd_list[MAXCMD][MAXLINE];  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> cmdline[MAXLINE]; <span class="hljs-comment">//Command line string  </span><br>  <br>    cmd_cnt = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;  <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;shell: %s %% &quot;</span>, getcwd(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));  <br>        <span class="hljs-comment">//Read the command line from stdin  </span><br>        <span class="hljs-keyword">if</span>(fgets(cmdline, MAXLINE, <span class="hljs-built_in">stdin</span>) == <span class="hljs-literal">NULL</span>) &#123;  <br>            print_message(<span class="hljs-string">&quot;Error occurred when reading command line!&quot;</span>);  <br>            <span class="hljs-keyword">continue</span>;  <br>        &#125;  <br>          <br>        <span class="hljs-built_in">strcpy</span>(cmd_list[cmd_cnt], cmdline);  <br>        cmd_cnt++;  <br>        <span class="hljs-comment">//Evaluate the command line  </span><br>        eval(cmdline);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>由于后续需要通过history指令查询用户输入过的指令，这里我们设置了一个全局变量来记录用户每次输入的指令字符串。</p><h3 id="指令输入解析">指令输入解析</h3><p>接下来我们对用户输入的指令进行结构化解析。我们使用一个二维字符串数组来存储用户输入的指令及参数流，这个数组的结构如下：</p><img src="/2021/03/02/os/os-exp-shell/arg_store.png" class="" title="arg_store"><p>随后我们通过一个结构体来存储每行指令的全局特性（输入输出重定向，是否后台运行等）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXPROG 16 <span class="hljs-comment">//Max program that can be connected by pipe  </span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXARGS 128 <span class="hljs-comment">//Max number of arguments a command can have  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parseline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline, <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS], struct cmd_feature *feature)</span></span>;<br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> is_error; <span class="hljs-comment">//Error flag, 0 - No error, 1 - Error in cmdline  </span><br>    <span class="hljs-keyword">int</span> bg; <span class="hljs-comment">//Background flag, 1 - Background, 0 - Foreground  </span><br>    <span class="hljs-keyword">int</span> prog_num; <span class="hljs-comment">//Number of program connected by pipe (0 means no pipe feature)  </span><br>    <span class="hljs-keyword">int</span> input_mode; <span class="hljs-comment">//Overall input mode, 0 - Standard Input, 1 - File Input  </span><br>    <span class="hljs-keyword">int</span> output_mode; <span class="hljs-comment">//Overall output mode, 0 - Standard Output, 1 - File Output (Overrride), 2 - File Output (Append)  </span><br>    <span class="hljs-keyword">char</span> *infile; <span class="hljs-comment">//Path of input file  </span><br>    <span class="hljs-keyword">char</span> *outfile; <span class="hljs-comment">//Path of output file  </span><br>&#125;;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS]; <span class="hljs-comment">//Argument strings  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>  <br>    <span class="hljs-comment">//Parse the command line  </span><br>    parseline(cmdline, argv, &amp;line_feature);  <br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来实现具体的指令解析逻辑。由于用户的指令是一次性输入的，因此我们需要考虑所有可能的情况。总的来说，对于一行指令，可能出现的内容有如下几个：</p><p><strong>(1)</strong> <strong>由管道连接符相连接的一组待执行的程序</strong></p><p><strong>(2)</strong> <strong>每个待执行程序附带的若干参数</strong></p><p><strong>(3)</strong> <strong>输入重定向</strong></p><p><strong>(4)</strong> <strong>输出重定向</strong></p><p><strong>(5)</strong> <strong>后台运行标识符</strong></p><p>我们分情况讨论所有的这些情况，并将它们结构化存储到相应的数组和结构体中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parseline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline, <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS], struct cmd_feature *feature)</span></span>&#123; <br>    <span class="hljs-keyword">char</span> *delim; <span class="hljs-comment">// Points to first space delimiter  </span><br>    <span class="hljs-keyword">int</span> argc; <span class="hljs-comment">// Number of arguments  </span><br>    <span class="hljs-keyword">int</span> prog_cnt; <span class="hljs-comment">//Counter of programs  </span><br>  <br>    cmdline[<span class="hljs-built_in">strlen</span>(cmdline) - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// Replace trailing &#x27;\n&#x27; with space  </span><br>    <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore leading spaces  </span><br>        cmdline++;  <br>  <br>    <span class="hljs-comment">// Build the argv list  </span><br>    feature-&gt;is_error = <span class="hljs-number">0</span>;  <br>    feature-&gt;input_mode = <span class="hljs-number">0</span>;  <br>    feature-&gt;output_mode = <span class="hljs-number">0</span>;  <br>    prog_cnt = <span class="hljs-number">0</span>;  <br>    argc = <span class="hljs-number">0</span>;  <br>    delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>    <span class="hljs-keyword">while</span> (delim) &#123;  <br>        <span class="hljs-keyword">char</span> *arg_tmp = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&lt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;input_mode = <span class="hljs-number">1</span>;  <br>            feature-&gt;infile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&gt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;output_mode = <span class="hljs-number">1</span>;  <br>            feature-&gt;outfile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>))&#123;  <br>            *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>            cmdline = delim + <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>                cmdline++;  <br>            delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>            <span class="hljs-keyword">if</span>(!delim)&#123;  <br>                print_message(<span class="hljs-string">&quot;Missing I/O File Path!&quot;</span>);  <br>                feature-&gt;is_error = <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">return</span>;  <br>            &#125;  <br>            feature-&gt;output_mode = <span class="hljs-number">2</span>;  <br>            feature-&gt;outfile = strtok(cmdline, <span class="hljs-string">&quot; &quot;</span>);  <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(arg_tmp, <span class="hljs-string">&quot;|&quot;</span>))&#123;  <br>            argc++;  <br>            argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>            prog_cnt++;  <br>            argc = <span class="hljs-number">0</span>;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>&#123;  <br>            argv[prog_cnt][argc] = arg_tmp;  <br>            argc++;  <br>        &#125;  <br>        *delim = <span class="hljs-string">&#x27;\0&#x27;</span>;  <br>        cmdline = delim + <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">while</span> (*cmdline &amp;&amp; (*cmdline == <span class="hljs-string">&#x27; &#x27;</span>)) <span class="hljs-comment">// Ignore redundant spaces  </span><br>            cmdline++;  <br>        delim = <span class="hljs-built_in">strchr</span>(cmdline, <span class="hljs-string">&#x27; &#x27;</span>);  <br>    &#125;  <br>    argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>    feature-&gt;prog_num = prog_cnt + <span class="hljs-number">1</span>;  <br>  <br>    <span class="hljs-comment">// Figure out whether the job should be run in foreground or background  </span><br>    <span class="hljs-keyword">if</span>(argc == <span class="hljs-number">0</span>)&#123;  <br>        feature-&gt;bg = <span class="hljs-number">0</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[prog_cnt][argc - <span class="hljs-number">1</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))  <br>        feature-&gt;bg = <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">else</span>  <br>        feature-&gt;bg = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">if</span> (feature-&gt;bg != <span class="hljs-number">0</span>) &#123;  <br>        argc--;  <br>        argv[prog_cnt][argc] = <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内置指令">内置指令</h3><p>我们的Shell中包含4条内置指令，当检测到用户输入这四条指令时，我们需要立即执行并给出相应的反馈。这里我们分别使用函数对4条内置指令的实现进行封装，并将判断是否为内置指令的过程封装为另一个函数以供主函数调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Judge whether the command is a builtin command, 1 - Builtin command, 0 - Other command  </span><br> builtin_cmd(<span class="hljs-keyword">char</span> **argv)&#123;  <br> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;cd&quot;</span>))&#123;  <br>     change_dir(argv);  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;history&quot;</span>))&#123;  <br>     print_history();  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;mytop&quot;</span>))&#123;  <br>     perform_top();  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br> &#125;  <br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;exit&quot;</span>))&#123;  <br>     <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br> &#125;  <br> <span class="hljs-keyword">else</span>  <br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于exit指令，我们只需要直接退出程序即可。</p><p>对于cd指令，我们可以通过使用chdir系统调用来更改工作目录：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">change_dir</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span></span>&#123;  <br>    <span class="hljs-keyword">if</span>(chdir(argv[<span class="hljs-number">1</span>]) &lt; <span class="hljs-number">0</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error when changing working directory!&quot;</span>);  <br>    &#125;;  <br>&#125;<br></code></pre></td></tr></table></figure><p>对于history指令，由于前面我们已经通过cmd_list全局变量保存了每次输入的指令，这里我们只需要遍历这一数组打印指令即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_history</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; cmd_cnt; i++)&#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;%s&quot;</span>, cmd_list[i]);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>对于mytop指令，由于逻辑相对较为复杂，我们放在后文中讨论。</p><h3 id="任务流管理">任务流管理</h3><p>若用户输入的不为内置指令，则Shell需要执行相应的任务序列。由于允许后台程序，Shell中可能会同时存在多个子任务，因此我们需要将每个任务相互隔离开来。考虑到后续管道的建立，我们将使用如下的进程结构图：</p><img src="/2021/03/02/os/os-exp-shell/proc_structure.png" class="" title="proc_structure"><p>首先我们使用fork函数创建一个子进程用于托管当前指令流的任务，随后对于任务序列中的每条指令，我们再分别fork一个单独的进程用于执行程序。由于任务序列中的任务为顺序执行的，因此我们需要使用waitpid函数等待上一任务执行完毕再新建下一任务进程。<strong>这里需要注意的是，由于我们是在托管进程中再新开子进程执行程序的，托管进程在子任务全部结束后并不会自动退出，这样父进程中的后续代码同样会被托管进程执行，造成无限嵌套，因此我们必须在子任务结束后手动结束托管进程。</strong>相关代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> state;  <br>    waitpid(pid, &amp;state, <span class="hljs-number">0</span>);  <br>&#125;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-keyword">char</span> *argv[MAXPROG][MAXARGS]; <span class="hljs-comment">//Argument strings  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>  <br>    <span class="hljs-comment">//Parse the command line  </span><br>    parseline(cmdline, argv, &amp;line_feature);  <br>  <br>    <span class="hljs-comment">//Command line error  </span><br>    <span class="hljs-keyword">if</span>(line_feature.is_error == <span class="hljs-number">1</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-comment">//Blank space  </span><br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Subsequent logic goes here  </span><br>  <br>                    <span class="hljs-keyword">if</span> (execvp(argv[i][<span class="hljs-number">0</span>], argv[i]) &lt; <span class="hljs-number">0</span>) &#123;  <br>                        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;%s: Program not found.\n&quot;</span>, argv[i][<span class="hljs-number">0</span>]);  <br>                        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);  <br>                    &#125;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    waitfg(pid);  <br>                &#125;  <br>            &#125;  <br>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//Subsequent logic goes here  </span><br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当用户输入的指令带有&lt;、&gt;或&gt;&gt;时，则需要将程序的输入输出流重定向到用户指定的文件中。由于在前面的解析中我们已经将需要的参数记录了下来，这里我们只需要根据结构化的信息打开文件，并利用dup函数将其文件描述符赋给标准输入/输出即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                <span class="hljs-comment">//Other codes omitted  </span><br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Input redirection  </span><br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; line_feature.input_mode == <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.infile, O_RDONLY);  <br>                        close(STDIN_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Output redirection(Override file)  </span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.output_mode == <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.outfile, O_CREAT | O_WRONLY | O_TRUNC, S_IREAD | S_IWRITE);  <br>                        close(STDOUT_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Output redirection(Append to the end of file)  </span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.output_mode == <span class="hljs-number">2</span>) &#123;  <br>                        <span class="hljs-keyword">int</span> fd = open(line_feature.outfile, O_CREAT | O_WRONLY | O_APPEND, S_IREAD | S_IWRITE);  <br>                        close(STDOUT_FILENO);  <br>                        dup(fd);  <br>                    &#125;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                &#125;  <br>                <span class="hljs-comment">//Other codes omitted  </span><br>            &#125;  <br>            <span class="hljs-comment">//Other codes omitted  </span><br>        &#125;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="管道连接">管道连接</h3><p>当用户输入的指令中包含多于一个程序时，我们需要通过管道将前一个程序的输出与后一个程序的输入相连接。我们可以使用pipe函数来创建管道。对于一根管道，我们需要传入一个大小为2的一维数组作为管道的输入和输出端文件描述符，由于一条指令中可能含有多个程序，因此我们使用一个二维数组来为每两个程序间分别开辟一根管道以实现程序通讯的隔离：</p><img src="/2021/03/02/os/os-exp-shell/pipe_illustrate.png" class="" title="pipe_illustrate"><p>现在，我们只需要使用上文中输入输出重定向的方式将程序的输入输出分别重定向到管道的入口和出口即可。需要注意的是，在任务托管进程中，我们需要关闭管道的输入端，以防止父子进程间的管道交互：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXPROG 16 <span class="hljs-comment">//Max program that can be connected by pipe  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br>    <span class="hljs-keyword">int</span> pipe_gate[MAXPROG][<span class="hljs-number">2</span>];  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br>        <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>                pipe(pipe_gate[i]);  <br>                <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                    <span class="hljs-comment">//Pipe connection  </span><br>                    <span class="hljs-keyword">if</span> (line_feature.prog_num &gt; <span class="hljs-number">1</span>) &#123;  <br>                        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;  <br>                            close(STDOUT_FILENO);  <br>                            close(pipe_gate[i][<span class="hljs-number">0</span>]);  <br>                            dup(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == line_feature.prog_num - <span class="hljs-number">1</span>) &#123;  <br>                            close(STDIN_FILENO);  <br>                            close(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);  <br>                            dup(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);  <br>                        &#125; <span class="hljs-keyword">else</span> &#123;  <br>                            close(STDIN_FILENO);  <br>                            close(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);  <br>                            dup(pipe_gate[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);  <br>                            close(STDOUT_FILENO);  <br>                            close(pipe_gate[i][<span class="hljs-number">0</span>]);  <br>                            dup(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                        &#125;  <br>                    &#125;  <br>                    <span class="hljs-comment">//Other codes omitted  </span><br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    close(pipe_gate[i][<span class="hljs-number">1</span>]);  <br>                    waitfg(pid);  <br>                &#125;  <br>            &#125;  <br>            <span class="hljs-comment">//Other codes omitted  </span><br>        &#125;  <br>        <span class="hljs-comment">//Other codes omitted  </span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="后台运行">后台运行</h3><p>当用户输入的指令最后含有&amp;时，表明用户希望该任务流在后台执行。对于Shell主进程来说，我们只需要让其不等待子进程结束直接进入下一轮循环即可。但若直接这样做，则当子进程运行结束后将成为僵尸进程占用系统资源，因此我们需要使用信号系统将其交给MINIX系统托管。此外，为了防止子进程受到终端输入输出的影响，我们需要将其输入输出流重定向到/dev/null下。同样的，由于前面我们已经保存了当前指令是否要后台执行的信息，这里我们只需要直接读取前文结构体中的相关字段即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span></span>&#123;  <br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmd_feature</span> <span class="hljs-title">line_feature</span>;</span> <span class="hljs-comment">//Feature of the cmdline  </span><br> <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//PID of the latest child  </span><br> <span class="hljs-comment">//Other codes omitted  </span><br> <span class="hljs-keyword">if</span> (!builtin_cmd(argv[<span class="hljs-number">0</span>])) &#123;  <br>     <span class="hljs-keyword">if</span>(line_feature.bg)&#123;  <br>         signal(SIGCHLD, SIG_IGN);  <br>     &#125;  <br>     <span class="hljs-keyword">else</span>&#123;  <br>         signal(SIGCHLD, SIG_DFL);  <br>     &#125;  <br>     <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; line_feature.prog_num; i++) &#123;  <br>             <span class="hljs-comment">//Other codes omitted  </span><br>             <span class="hljs-keyword">if</span> ((pid = fork()) == <span class="hljs-number">0</span>) &#123;  <br>                 <span class="hljs-comment">//Other codes omitted  </span><br>                 <span class="hljs-comment">//Background command  </span><br>                 <span class="hljs-keyword">if</span> (i == (line_feature.prog_num - <span class="hljs-number">1</span>) &amp;&amp; line_feature.bg) &#123;  <br>                     <span class="hljs-keyword">int</span> fd = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDWR);  <br>                     close(STDIN_FILENO);  <br>                     dup(fd);  <br>                     close(STDOUT_FILENO);  <br>                     dup(fd);  <br>                 &#125;  <br>                 <span class="hljs-comment">//Other codes omitted  </span><br>             &#125;  <br>             <span class="hljs-comment">//Other codes omitted  </span><br>         &#125;  <br>         <span class="hljs-comment">//Other codes omitted  </span><br>     &#125; <span class="hljs-keyword">else</span> &#123;  <br>         <span class="hljs-keyword">if</span> (!line_feature.bg) &#123;  <br>             waitfg(pid);  <br>         &#125;  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><h3 id="系统资源查看">系统资源查看</h3><p>现在我们来实现mytop指令的逻辑。当用户输入mytop指令时，Shell需要打印出当前系统的内存使用情况及CPU占用率。我们可以在MINIX系统的/proc目录下查询到这些信息。</p><p>对于内存使用情况，我们需要打开proc目录下的meminfo文件。该文件中共有5个参数，分别对应页面大小、总页数量、空闲页数量、最大页数量以及缓存页数量。我们只需将其依次读入，并将页面大小与其他几个参数依次向乘，即可得到内存的相应使用情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXBUF 1024 <span class="hljs-comment">//Max buffer size for an file read operation  </span></span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_memory</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *total_size, <span class="hljs-keyword">int</span> *free_size, <span class="hljs-keyword">int</span> *cached_size)</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> mem_f; <span class="hljs-comment">//File descriptor of memory info  </span><br>    <span class="hljs-keyword">int</span> bufsize; <span class="hljs-comment">//Actual size of bytes read  </span><br>    <span class="hljs-keyword">char</span> buf[MAXBUF]; <span class="hljs-comment">//Buffer for reading from file  </span><br>    <span class="hljs-keyword">int</span> page_size, total_page, free_page, largest_page, cached_page;  <br>  <br>    mem_f = open(MEMPATH, O_RDONLY); <span class="hljs-comment">//Open memory info file  </span><br>    bufsize = read(mem_f, buf, <span class="hljs-keyword">sizeof</span>(buf)); <span class="hljs-comment">//Read memory info  </span><br>    <span class="hljs-keyword">if</span>(bufsize == <span class="hljs-number">-1</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error reading memory info!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">else</span>&#123;  <br>        page_size = atoi(strtok(buf, <span class="hljs-string">&quot; &quot;</span>));  <br>        total_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        free_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        largest_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        cached_page = atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>));  <br>        *total_size = (page_size * total_page) / <span class="hljs-number">1024</span>;  <br>        *free_size = (page_size * free_page) / <span class="hljs-number">1024</span>;  <br>        *cached_size = (page_size * cached_page) / <span class="hljs-number">1024</span>;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-keyword">int</span> total_size, free_size, cached_size; <span class="hljs-comment">//Info of memory  </span><br>  <br>    get_memory(&amp;total_size, &amp;free_size, &amp;cached_size);  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;Total: %dK, Free: %dK, Cached: %dK\n&quot;</span>, total_size, free_size, cached_size);  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>CPU占用率的获取方式相对较为复杂。首先我们需要从proc目录下的kinfo文件中获取进程和任务的总数量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PROCPATH <span class="hljs-meta-string">&quot;/proc/kinfo&quot;</span></span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nr_procs, nr_tasks;  <br><span class="hljs-keyword">int</span> nr_total; <span class="hljs-comment">//Number of process + task  </span><br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getkinfo</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> fd; <span class="hljs-comment">//File descriptor of kinfo  </span><br>    <span class="hljs-keyword">int</span> bufsize; <span class="hljs-comment">//Actual buffer size  </span><br>    <span class="hljs-keyword">char</span> buf[MAXBUF], pathbuf[MAXBUF]; <span class="hljs-comment">//Buffer for file reading  </span><br>  <br>    fd = open(PROCPATH, O_RDONLY);  <br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>) &#123;  <br>        print_message(<span class="hljs-string">&quot;Reading kinfo file error!&quot;</span>);  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>    bufsize = read(fd, buf, <span class="hljs-keyword">sizeof</span>(buf)); <span class="hljs-comment">//Read process info  </span><br>    <span class="hljs-keyword">if</span>(bufsize == <span class="hljs-number">-1</span>)&#123;  <br>        print_message(<span class="hljs-string">&quot;Error reading total process info!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">else</span> &#123;  <br>        nr_procs = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) atoi(strtok(buf, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//Number of process  </span><br>        nr_tasks = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>) atoi(strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-comment">//Number of tasks  </span><br>        close(fd);  <br>        nr_total = (<span class="hljs-keyword">int</span>) (nr_procs + nr_tasks);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们需要遍历整个proc目录以获取各个进程的具体信息。对于一个进程号为PID的进程，其信息被保存在/proc/PID/psinfo的文件下，该文件中的前13个参数分别为版本号、类型<strong>（T - Task，S - System，U - User）</strong>、端点、进程名字、进程状态<strong>（S - Sleep，W - Wait，Zombie - Z，R - Run，T - Stop）</strong>、阻塞状态、动态优先级、滴答、高周期、低周期、内存、有效用户和静态优先级。为了方便起见我们定义一个结构体用于保存每个进程的各项参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *cputimenames[] = &#123; <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;ipc&quot;</span>, <span class="hljs-string">&quot;kernelcall&quot;</span> &#125;; <span class="hljs-comment">//CPU cycle types  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CPUTIMENAMES (sizeof(cputimenames)/sizeof(cputimenames[0]))  </span><br>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> &#123;</span>  <br>    <span class="hljs-keyword">int</span> p_flags;  <br>    <span class="hljs-keyword">int</span> p_endpoint;  <br>    <span class="hljs-keyword">pid_t</span> p_pid;  <br>    <span class="hljs-keyword">uint64_t</span> p_cpucycles[CPUTIMENAMES];  <br>    <span class="hljs-keyword">int</span> p_priority;  <br>    <span class="hljs-keyword">int</span> p_blocked;  <br>    <span class="hljs-keyword">time_t</span> p_user_time;  <br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> p_memory;  <br>    <span class="hljs-keyword">uid_t</span> p_effuid;  <br>    <span class="hljs-keyword">int</span> p_nice;  <br>    <span class="hljs-keyword">char</span> p_name[<span class="hljs-number">17</span>];  <br>&#125;;<br></code></pre></td></tr></table></figure><p>并定义一组宏方便后续对各项参数的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INFOPATH <span class="hljs-meta-string">&quot;/proc&quot;</span>  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CPUTIME(m, i) (m &amp; (1L &lt;&lt; (i)))  </span><br>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  USED       0x1  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  IS_TASK    0x2  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  IS_SYSTEM  0x4  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  BLOCKED    0x8  </span><br>  <br><span class="hljs-comment">/* Process types. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_TASK   <span class="hljs-meta-string">&#x27;T&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_SYSTEM <span class="hljs-meta-string">&#x27;S&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_USER   <span class="hljs-meta-string">&#x27;U&#x27;</span>  </span><br>  <br><span class="hljs-comment">/* General process states. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_SLEEP <span class="hljs-meta-string">&#x27;S&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_WAIT  <span class="hljs-meta-string">&#x27;W&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_ZOMBIE    <span class="hljs-meta-string">&#x27;Z&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_RUN   <span class="hljs-meta-string">&#x27;R&#x27;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STATE_STOP  <span class="hljs-meta-string">&#x27;T&#x27;</span>  </span><br>  <br><span class="hljs-comment">/* Kernel tasks. These all run in the same address space. */</span>  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ASYNCM  ((int) -5) <span class="hljs-comment">/* notifies about finished async sends */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IDLE    ((int) -4) <span class="hljs-comment">/* runs when no one else can run */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLOCK   ((int) -3) <span class="hljs-comment">/* alarms and other clock functions */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYSTEM  ((int) -2) <span class="hljs-comment">/* request system functionality */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KERNEL  ((int) -1) <span class="hljs-comment">/* pseudo-process for IPC and scheduling */</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HARDWARE     KERNEL <span class="hljs-comment">/* for hardware interrupt handlers */</span></span><br></code></pre></td></tr></table></figure><p>由于每个进程中保存的信息均为自该程序启动之时到当前时间戳的统计信息，因此为了获取即时的占用信息，我们需要在极短的时间内对每个进程信息文件读取两次，并通过计算差值的方式来获得即时的占用信息。为此我们分别申明两个结构体用于存储两次读取到的信息，并在主函数中读取两次进程信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">proc</span> = <span class="hljs-title">NULL</span>, *<span class="hljs-title">prev_proc</span> = <span class="hljs-title">NULL</span>;</span>  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_file</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span>;  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_dir</span><span class="hljs-params">()</span></span>;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_procs</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span>  <br>    <span class="hljs-keyword">int</span> i;  <br>  <br>    p = prev_proc;  <br>    prev_proc = proc;  <br>    proc = p;  <br>  <br>    <span class="hljs-keyword">if</span> (proc == <span class="hljs-literal">NULL</span>) &#123;  <br>        proc = <span class="hljs-built_in">malloc</span>(nr_total * <span class="hljs-keyword">sizeof</span>(proc[<span class="hljs-number">0</span>])); <span class="hljs-comment">//Allocate a new process structure  </span><br>        <span class="hljs-comment">//Allocate failed  </span><br>        <span class="hljs-keyword">if</span> (proc == <span class="hljs-literal">NULL</span>) &#123;  <br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Out of memory!\n&quot;</span>);  <br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//Initialize all the entry ranging in the total process+task num  </span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nr_total; i++)  <br>        proc[i].p_flags = <span class="hljs-number">0</span>;  <br>  <br>    parse_dir();  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    getkinfo();  <br>    get_procs();  <br>    <span class="hljs-keyword">if</span> (prev_proc == <span class="hljs-literal">NULL</span>)  <br>        get_procs();  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>&#125;<br></code></pre></td></tr></table></figure><p>一个进程的CPU占用时间可以从两次读取到的CPU周期之差得到，不过需要注意的是，MINIX进程信息文件中保存的分别是周期的高32位及低32位，我们需要首先将他们拼接成一个完整的64位整数才能进行后续的计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">uint64_t</span> <span class="hljs-title">make_cycle</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> lo, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> hi)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">uint64_t</span>)hi &lt;&lt; <span class="hljs-number">32</span>) | (<span class="hljs-keyword">uint64_t</span>)lo;  <br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以来实现遍历proc目录的函数了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_file</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">char</span> path[MAXBUF], name[<span class="hljs-number">256</span>], type, state;  <br>    <span class="hljs-keyword">int</span> version, endpt, effuid;  <br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cycles_hi, cycles_lo;  <br>    FILE *fp;  <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span>  <br>    <span class="hljs-keyword">int</span> i;  <br>  <br>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;/proc/%d/psinfo&quot;</span>, pid);  <br>  <br>    <span class="hljs-keyword">if</span> ((fp = fopen(path, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)  <br>        <span class="hljs-keyword">return</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d&quot;</span>, &amp;version) != <span class="hljs-number">1</span>) &#123;  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %c %d&quot;</span>, &amp;type, &amp;endpt) != <span class="hljs-number">2</span>) &#123;  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    slot++;  <br>  <br>    <span class="hljs-keyword">if</span>(slot &lt; <span class="hljs-number">0</span> || slot &gt;= nr_total) &#123;  <br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Unreasonable endpoint number %d\n&quot;</span>, endpt);  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    p = &amp;proc[slot];  <br>  <br>    <span class="hljs-keyword">if</span> (type == TYPE_TASK)  <br>        p-&gt;p_flags |= IS_TASK;  <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == TYPE_SYSTEM)  <br>        p-&gt;p_flags |= IS_SYSTEM;  <br>  <br>    p-&gt;p_endpoint = endpt;  <br>    p-&gt;p_pid = pid;  <br>  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %255s %c %d %d %lu %*u %lu %lu&quot;</span>,  <br>               name, &amp;state, &amp;p-&gt;p_blocked, &amp;p-&gt;p_priority,  <br>               &amp;p-&gt;p_user_time, &amp;cycles_hi, &amp;cycles_lo) != <span class="hljs-number">7</span>) &#123;  <br>  <br>        fclose(fp);  <br>        <span class="hljs-keyword">return</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-built_in">strncpy</span>(p-&gt;p_name, name, <span class="hljs-keyword">sizeof</span>(p-&gt;p_name)<span class="hljs-number">-1</span>);  <br>    p-&gt;p_name[<span class="hljs-keyword">sizeof</span>(p-&gt;p_name)<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (state != STATE_RUN)  <br>        p-&gt;p_flags |= BLOCKED;  <br>    p-&gt;p_cpucycles[<span class="hljs-number">0</span>] = make_cycle(cycles_lo, cycles_hi);  <br>    p-&gt;p_memory = <span class="hljs-number">0L</span>;  <br>  <br>    <span class="hljs-keyword">if</span> (!(p-&gt;p_flags &amp; IS_TASK)) &#123;  <br>        <span class="hljs-keyword">int</span> j;  <br>        <span class="hljs-keyword">if</span> ((j=<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu %*u %*u %*c %*d %*u %u %*u %d %*c %*d %*u&quot;</span>,  <br>                      &amp;p-&gt;p_memory, &amp;effuid, &amp;p-&gt;p_nice)) != <span class="hljs-number">3</span>) &#123;  <br>  <br>            fclose(fp);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>  <br>        p-&gt;p_effuid = effuid;  <br>    &#125; <span class="hljs-keyword">else</span> p-&gt;p_effuid = <span class="hljs-number">0</span>;  <br>  <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; CPUTIMENAMES; i++) &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu %lu&quot;</span>,  <br>                  &amp;cycles_hi, &amp;cycles_lo) == <span class="hljs-number">2</span>) &#123;  <br>            p-&gt;p_cpucycles[i] = make_cycle(cycles_lo, cycles_hi);  <br>        &#125; <span class="hljs-keyword">else</span>  &#123;  <br>            p-&gt;p_cpucycles[i] = <span class="hljs-number">0</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> ((p-&gt;p_flags &amp; IS_TASK)) &#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot; %lu&quot;</span>, &amp;p-&gt;p_memory) != <span class="hljs-number">1</span>) &#123;  <br>            p-&gt;p_memory = <span class="hljs-number">0</span>;  <br>        &#125;  <br>    &#125;  <br>  <br>    p-&gt;p_flags |= USED;  <br>  <br>    fclose(fp);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">parse_dir</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    DIR *p_dir; <span class="hljs-comment">//Pointer of directory  </span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> *<span class="hljs-title">p_ent</span>;</span> <span class="hljs-comment">//Info of the directory  </span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//Name of sub directory(PID)  </span><br>    <span class="hljs-keyword">char</span> *end;  <br>  <br>    <span class="hljs-keyword">if</span> ((p_dir = opendir(INFOPATH)) == <span class="hljs-literal">NULL</span>) &#123;  <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//Traverse the directory  </span><br>    <span class="hljs-keyword">for</span> (p_ent = readdir(p_dir); p_ent != <span class="hljs-literal">NULL</span>; p_ent = readdir(p_dir)) &#123;  <br>        pid = strtol(p_ent-&gt;d_name, &amp;end, <span class="hljs-number">10</span>); <span class="hljs-comment">//Get the name of sub directory  </span><br>  <br>        <span class="hljs-keyword">if</span> (!end[<span class="hljs-number">0</span>] &amp;&amp; pid != <span class="hljs-number">0</span>)  <br>            parse_file(pid);  <br>    &#125;  <br>  <br>    closedir(p_dir);  <br>&#125;<br></code></pre></td></tr></table></figure><p>到此，我们已经将所需要的进程信息结构化存储至了结构体中，接下来我们来计算CPU占用率。CPU的总使用时间为用户进程、系统进程及空闲进程的占用时间之和，由此可知要得到CPU占用率，我们只要统计出总使用时间、用户进程占用时间和系统进程占用时间即可。对于每个进程，我们可以利用其CPU周期之差算出其滴答：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">uint64_t</span> <span class="hljs-title">cputicks</span><span class="hljs-params">(struct proc *p1, struct proc *p2, <span class="hljs-keyword">int</span> timemode)</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-keyword">int</span> i;  <br>    <span class="hljs-keyword">uint64_t</span> t = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; CPUTIMENAMES; i++) &#123;  <br>        <span class="hljs-keyword">if</span>(!CPUTIME(timemode, i))  <br>            <span class="hljs-keyword">continue</span>;  <br>        <span class="hljs-keyword">if</span>(p1-&gt;p_endpoint == p2-&gt;p_endpoint) &#123;  <br>            t = t + p2-&gt;p_cpucycles[i] - p1-&gt;p_cpucycles[i];  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            t = t + p2-&gt;p_cpucycles[i];  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> t;  <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们遍历所有的有效进程，再结合进程类型及进程状态，即可得到所要的三个信息，再通过用户进程占用时间加系统进程占用时间与CPU总使用时间做比值，即可得到最终的CPU占用率：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">print_procs</span><span class="hljs-params">(struct proc *proc1, struct proc *proc2, <span class="hljs-keyword">int</span> cputimemode)</span> </span>&#123;  <br>    <span class="hljs-keyword">int</span> p, nprocs;  <br>    <span class="hljs-keyword">uint64_t</span> systemticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">uint64_t</span> userticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">uint64_t</span> total_ticks = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tp</span> *<span class="hljs-title">tick_procs</span> = <span class="hljs-title">NULL</span>;</span>  <br>  <br>    <span class="hljs-keyword">if</span> (tick_procs == <span class="hljs-literal">NULL</span>) &#123;  <br>        tick_procs = <span class="hljs-built_in">malloc</span>(nr_total * <span class="hljs-keyword">sizeof</span>(tick_procs[<span class="hljs-number">0</span>]));  <br>  <br>        <span class="hljs-keyword">if</span> (tick_procs == <span class="hljs-literal">NULL</span>) &#123;  <br>            <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;Out of memory!\n&quot;</span>);  <br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">for</span> (p = nprocs = <span class="hljs-number">0</span>; p &lt; nr_total; p++) &#123;  <br>        <span class="hljs-keyword">uint64_t</span> uticks;  <br>        <span class="hljs-keyword">if</span> (!(proc2[p].p_flags &amp; USED))  <br>            <span class="hljs-keyword">continue</span>;  <br>        tick_procs[nprocs].p = proc2 + p;  <br>        tick_procs[nprocs].ticks = cputicks(&amp;proc1[p], &amp;proc2[p], cputimemode);  <br>        uticks = cputicks(&amp;proc1[p], &amp;proc2[p], <span class="hljs-number">1</span>);  <br>        total_ticks = total_ticks + uticks;  <br>        <span class="hljs-keyword">if</span>(!(proc2[p].p_flags &amp; IS_TASK)) &#123;  <br>            <span class="hljs-keyword">if</span>(proc2[p].p_flags &amp; IS_SYSTEM)  <br>                systemticks = systemticks + tick_procs[nprocs].ticks;  <br>            <span class="hljs-keyword">else</span>  <br>                userticks = userticks + tick_procs[nprocs].ticks;  <br>        &#125;  <br>  <br>        nprocs++;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">if</span> (total_ticks == <span class="hljs-number">0</span>)  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100.0</span> * (systemticks + userticks) / total_ticks;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">perform_top</span><span class="hljs-params">()</span></span>&#123;  <br>    <span class="hljs-comment">//Other codes omitted  </span><br>    <span class="hljs-keyword">float</span> idle = print_procs(prev_proc, proc, <span class="hljs-number">1</span>);  <br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>, <span class="hljs-string">&quot;CPU Usage: %f%%\n&quot;</span>, idle);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果">运行结果</h3><p>我们使用实验要求中的测试用例在MINIX环境下对Shell进行测试：</p><img src="/2021/03/02/os/os-exp-shell/run_1.png" class="" title="run_1"><img src="/2021/03/02/os/os-exp-shell/run_2.png" class="" title="run_2"><img src="/2021/03/02/os/os-exp-shell/run_3.png" class="" title="run_3"><p>可以发现，程序的行为均与预期相同。除此之外，我们再结合多重管道、输出重定向及后台运行符对Shell进行更为复杂的测试：</p><img src="/2021/03/02/os/os-exp-shell/run_4.png" class="" title="run_4"><p>Shell同样可以正确的解析命令并执行相应的操作。</p><h2 id="总结">总结</h2><p>在本实验中，我们从零开始在MINIX环境下完整实现了一个基本的Shell终端，这其中综合了系统调用、文件管理、进程管理及I/O交互的大量理论知识。通过该实验，极大的加深了我们对这些系统知识的理解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目的&quot;&gt;目的&lt;/h2&gt;
&lt;p&gt;在MINIX环境下通过系统调用实现一个基本的Shell。&lt;/p&gt;
&lt;h2 id=&quot;内容与设计思想&quot;&gt;内容与设计思想&lt;/h2&gt;
&lt;p&gt;Shell能解析的命令行如下:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;带参数的程序运行功能。&lt;/</summary>
      
    
    
    
    <category term="操作系统" scheme="http://gonggongjohn.me/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Operating-System" scheme="http://gonggongjohn.me/tags/Operating-System/"/>
    
  </entry>
  
  <entry>
    <title>实数集不可数的证明</title>
    <link href="http://gonggongjohn.me/2021/02/27/math-analysis/real-number-uncountability/"/>
    <id>http://gonggongjohn.me/2021/02/27/math-analysis/real-number-uncountability/</id>
    <published>2021-02-27T14:37:37.000Z</published>
    <updated>2021-02-27T14:38:48.142Z</updated>
    
    <content type="html"><![CDATA[<p>实数集是不可数集这一结论的证明是近代集合论研究的一大重要标志。随着近代分析学的发展，这一结论可以从许多不同的角度推导而出。这些方法融合了许多重要的分析思想及数学技巧，在此进行一个简单的整理和总结。</p><a id="more"></a><blockquote><p><strong>Theorem:</strong> 实数集 <span class="math display">\[\mathbb{R}\]</span> 不可数</p></blockquote><h2 id="对角线法">对角线法</h2><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则区间 <span class="math display">\[[0,1] \subset \mathbb{R}\]</span> 必然可数</p><p>因此必然可以使用十进制表示法将 <span class="math display">\[[0,1]\]</span> 中的每一个数一一列出： <span class="math display">\[r_1 = 0.d_{11} d_{12} d_{13} d_{14} ... \\r_2 = 0.d_{21} d_{22} d_{23} d_{24} ... \\r_3 = 0.d_{31} d_{32} d_{33} d_{34} ... \\r_4 = 0.d_{41} d_{42} d_{43} d_{44} ... \\...\]</span> 其中 <span class="math display">\[d_{ij} \in \{0, 1, 2, ..., 9\}\]</span></p><p>现构造一新的实数 <span class="math display">\[r = 0.d_1 d_2 d_3 d_4 ...\]</span>，使得 <span class="math display">\[d_i = \left\{\begin{aligned}4, \ if \ d_{ii} \neq 4 \\5, \ if \ d_{ii} = 4\end{aligned}\right.\]</span> 显然 <span class="math display">\[r \in [0, 1]\]</span></p><p>而由于对任意 <span class="math display">\[i \in \mathbb{N}^+\]</span>，<span class="math display">\[r\]</span> 与 <span class="math display">\[r_i\]</span> 的第 <span class="math display">\[i\]</span> 位数字均不相同，因此 <span class="math display">\[r \neq r_i\]</span></p><p>由此我们构造出了一个未被列出的实数，这与 <span class="math display">\[[0,1]\]</span> 中的每一个数均可被列出矛盾</p><p>故 <span class="math display">\[[0,1]\]</span> 为不可数集，进而可知 <span class="math display">\[\mathbb{R}\]</span> 为不可数集。</p><h2 id="区间套法">区间套法</h2><blockquote><p><strong>Lemma:</strong> 若 <span class="math display">\[\{[a_n, b_n]\}\]</span> 形成一闭区间套，则存在唯一的实数 <span class="math display">\[\xi\]</span> 属于所有的闭区间 <span class="math display">\[[a_n, b_n]\]</span>，且 <span class="math display">\[\xi = \lim_\limits{n \to \infty} a_n = \lim_\limits{n \to \infty} b_n\]</span></p></blockquote><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则区间 <span class="math display">\[[0,1] \subset \mathbb{R}\]</span> 必然可数</p><p>因此我们可将 <span class="math display">\[[0,1]\]</span> 写为一数列 <span class="math display">\[r_1, r_2, ...,r_n,...\]</span></p><p>现将 <span class="math display">\[[0,1]\]</span> 三等分，则必存在某个区间 <span class="math display">\[[a_1, b_1] \subset [0,1]\]</span>，使得 <span class="math display">\[r_1 \notin [a_1, b_1]\]</span></p><p>接着继续将 <span class="math display">\[[a_1, b_1]\]</span> 三等分，则必存在某一子区间 <span class="math display">\[[a_2, b_2] \subset [a_1, b_1]\]</span>，使得 <span class="math display">\[r_2 \notin [a_2, b_2]\]</span></p><p>如此进行下去，可得一闭区间套 <span class="math display">\[\{[a_n, b_n]\}\]</span>，且满足对任意 <span class="math display">\[i \in \mathbb{N^+}\]</span>，有 <span class="math display">\[r_i \notin [a_i, b_i]\]</span></p><p>故由<strong>闭区间套定理</strong>可知，存在 <span class="math display">\[\xi \in \mathbb{R}\]</span>，使得对任意 <span class="math display">\[n \in \mathbb{N^+}\]</span>，有 <span class="math display">\[\xi \in [a_n, b_n]\]</span></p><p>于是存在 <span class="math display">\[\xi \in [0,1]\]</span>，使得对任意 <span class="math display">\[i \in \mathbb{R}^+\]</span>，有 <span class="math display">\[\xi \neq r_i\]</span>，与 <span class="math display">\[[0,1]\]</span> 中每一个数均可被列出矛盾</p><p>故 <span class="math display">\[[0,1]\]</span> 为不可数集，进而可知 <span class="math display">\[\mathbb{R}\]</span> 为不可数集。</p><h2 id="外测度法">外测度法</h2><p>对于 <span class="math display">\[\mathbb{R}\]</span> 上的任意闭区间 <span class="math display">\[I=[a,b]\]</span>，其体积 <span class="math display">\[V(I)=b-a\]</span></p><p>故由外测度定义 <span class="math display">\[m(S) = \inf \{ \sum_{i=1}^\infty V(I_i) \big| S \subset \bigcup_{i \in \mathbb{N}} I_i \}\]</span> 可知 <span class="math display">\[m(I) = b-a\]</span></p><p>而对任意可数集 <span class="math display">\[S\]</span>，<span class="math display">\[m(S) = 0\]</span></p><p>因此 <span class="math display">\[\mathbb{R}\]</span> 不可数</p><h2 id="baire纲定理">Baire纲定理</h2><blockquote><p>Lemma: 设 <span class="math display">\[(X, d)\]</span> 是一个完备的度量空间，则</p><ol type="1"><li>若 <span class="math display">\[(F_n)_{n=0}^\infty\]</span> 是一列无处稠密的闭集，则它的并的内部是空的</li><li>若 <span class="math display">\[(O_n))_{n=0}^\infty\]</span> 是一列在 <span class="math display">\[X\]</span> 中稠密的开集，则它的交在也 <span class="math display">\[X\]</span> 中稠密</li></ol></blockquote><p>Baire纲定理指出，一个完备的度量空间不能写成可数个无处稠密的集合的并</p><p>由于 <span class="math display">\[\mathbb{R}\]</span> 是完备的，且在其上有自然度量 <span class="math display">\[d(x,y) = |x-y|\]</span>，因此其为一个完备的度量空间</p><p>若 <span class="math display">\[\mathbb{R}\]</span> 可数，则其可以表示为可数个单点集的并，而单点集的闭包即为它本身，也即是无处稠密的</p><p>这与Baire纲定理矛盾，因此 <span class="math display">\[\mathbb{R}\]</span> 必不可数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;实数集是不可数集这一结论的证明是近代集合论研究的一大重要标志。随着近代分析学的发展，这一结论可以从许多不同的角度推导而出。这些方法融合了许多重要的分析思想及数学技巧，在此进行一个简单的整理和总结。&lt;/p&gt;</summary>
    
    
    
    <category term="分析学" scheme="http://gonggongjohn.me/categories/%E5%88%86%E6%9E%90%E5%AD%A6/"/>
    
    
    <category term="Mathematics" scheme="http://gonggongjohn.me/tags/Mathematics/"/>
    
    <category term="Analysis" scheme="http://gonggongjohn.me/tags/Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Shell Lab实验记录</title>
    <link href="http://gonggongjohn.me/2021/01/29/computer-system/csapp-shlab/"/>
    <id>http://gonggongjohn.me/2021/01/29/computer-system/csapp-shlab/</id>
    <published>2021-01-29T15:48:59.000Z</published>
    <updated>2021-01-29T17:30:27.575Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说就是用C语言以及各种系统调用实现一个简单的Unix Shell，说的更直白点就是把CSAPP书上第八章提到的关于Shell的内容全部实现一遍，因此最快的办法应该就是先搭一个基本的框架出来，然后跟着trace的要求把功能一个个补齐。</p><a id="more"></a><h2 id="概览">概览</h2><p>首先我们来看一下Lab的具体要求和操作流程。</p><p>在Lab下的<strong>tsh.c</strong>文件里给出了一个Shell的基本框架，我们的任务就是要完成如下几个函数的具体实现：</p><ul><li><p><strong>eval</strong>：解析并执行用户输入的命令</p></li><li><p><strong>builtin_cmd</strong>：识别并解析Shell的内置函数</p></li><li><p><strong>do_bgfg</strong>：内置函数bg和fg的功能实现</p></li><li><p><strong>waitfg</strong>：等待前台任务完成</p></li><li><p><strong>sigchld_handler</strong>：SIGCHLD信号处理</p></li><li><p><strong>sigint_handler</strong>：SIGINT信号处理</p></li><li><p><strong>sigstp_handler</strong>：SIGSTP信号处理</p></li></ul><p>其中，内置函数包括如下几个：</p><ul><li><strong>quit</strong>：结束当前的Shell进程</li><li><strong>jobs</strong>：列出所有当前的后台任务</li><li><strong>bg &lt;jobs&gt;</strong>：向被挂起的前台任务发送SIGCONT信号，并将其转到后台运行</li><li><strong>fg &lt;jobs&gt;</strong>：向被挂起的后台任务发送SIGCONT信号，并将其转到前台运行</li></ul><p>任务要求我们必须回收所有的僵尸孩子进程，并对相应的信号给出正确的反馈。</p><p>为了方便起见，tsh.c文件中提供了一些已封装完成的函数可供我们使用：（仅列出了需要使用到的函数）</p><ul><li><strong>parseline</strong>：解析命令行字符串</li><li><strong>addjob</strong>：向任务列表添加任务</li><li><strong>deletejob</strong>：从任务列表移除任务</li><li><strong>listjobs</strong>：输出任务列表中所有任务的信息</li><li><strong>fgpid</strong>：获取当前前台任务的PID</li><li><strong>getjobpid/getjobjid</strong>：使用PID/Job ID获取任务实例</li><li><strong>pid2jid</strong>：PID号转Job ID号</li><li><strong>unix_error</strong>：发送错误信息并退出</li></ul><p>Lab设计了16个Trace任务用于测试给出的Shell，我们可以使用Lab中提供的<strong>sdriver.pl</strong>工具测试我们的Shell代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> ./sdriver.pl -t traceXX.txt -s ./tsh -a <span class="hljs-string">&quot;-p&quot;</span>  <span class="hljs-comment"># XX代表要使用的trace编号</span></span><br></code></pre></td></tr></table></figure><p>作为参考，我们可以将每个Trace的输出结果与tshref.out中的相应内容进行比对以验证功能是否正确。</p><h2 id="基本功能">基本功能</h2><h3 id="eval及builtin_cmd">eval及builtin_cmd</h3><p>我们先从eval和builtin_cmd函数入手。对于eval函数，其基本的逻辑如下：</p><ul><li>使用parseline函数解析命令行</li><li>边界判断（判断输入命令是否为空或仅有一个&amp;符号）</li><li>判断是否为内置函数，若是，则直接执行并返回</li><li>创建子进程并执行命令</li><li>将任务加入任务列表</li><li>若为前台任务，则等待其执行完成；否则输出信息并返回</li></ul><p>于是我们可以快速写出其对应的代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *argv[MAXARGS]; <span class="hljs-comment">//参数列表</span><br>    <span class="hljs-keyword">int</span> bg; <span class="hljs-comment">//前后台标识符</span><br>    <span class="hljs-keyword">pid_t</span> pid; <span class="hljs-comment">//最近创建子任务的PID号</span><br>  <span class="hljs-comment">//解析命令行</span><br>    bg = parseline(cmdline, argv);<br>  <span class="hljs-comment">//特判</span><br>    <span class="hljs-keyword">if</span>(argv[<span class="hljs-number">0</span>] == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;&amp;&quot;</span>))<br>        <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">//内置函数判断</span><br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>      <span class="hljs-comment">//创建子进程</span><br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-comment">//执行任务</span><br>            <span class="hljs-keyword">if</span>(execve(argv[<span class="hljs-number">0</span>], argv, environ) &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: Command not found.\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>      <span class="hljs-comment">//将任务加入任务列表</span><br>        <span class="hljs-keyword">if</span>(bg)<br>    addjob(jobs, pid, BG, cmdline);<br>        <span class="hljs-keyword">else</span><br>          addjob(jobs, pid, FG, cmdline);<br>      <span class="hljs-comment">//前后台任务处理</span><br>        <span class="hljs-keyword">if</span>(bg)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, pid2jid(pid), pid, cmdline);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            waitfg(pid);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>builtin_cmd函数的功能仅为判断命令是否为内置函数并调用对应的函数，因此其实现更为简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">builtin_cmd</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">//处理quit指令</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;quit&quot;</span>))&#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  <span class="hljs-comment">//处理jobs指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;jobs&quot;</span>))&#123;<br>        listjobs(jobs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">//处理bg指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;bg&quot;</span>))&#123;<br>        do_bgfg(argv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>  <span class="hljs-comment">//处理fg指令</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>        do_bgfg(argv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do_bgfg">do_bgfg</h3><p>随后我们来处理内置函数bg和fg的实现。当用户输入bg或fg时，需要切换指定任务的运行状态。首先我们来看一下job实例的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> &#123;</span>              <br>    <span class="hljs-keyword">pid_t</span> pid;              <span class="hljs-comment">// 任务PID</span><br>    <span class="hljs-keyword">int</span> jid;                <span class="hljs-comment">// 任务Job ID</span><br>    <span class="hljs-keyword">int</span> state;              <span class="hljs-comment">// 任务状态：UNDEF（未定义）, BG（后台）, FG（前台）, or ST（停止）</span><br>    <span class="hljs-keyword">char</span> cmdline[MAXLINE];  <span class="hljs-comment">// 命令行字符串</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此可知我们只需要切换job实例中的state变量即可。这一逻辑可以通过下面这段代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>job-&gt;state = FG; <span class="hljs-comment">//转为前台任务</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>job-&gt;state = BG; <span class="hljs-comment">//转为后台任务</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此我们需要根据用户的输入获取到对应的job实例。用户可以通过PID或Job ID来指定要操作的任务，不过根据题目要求，我们需要讨论所有的输入情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> jid;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>;</span><br><span class="hljs-keyword">pid_t</span> pid;<br><span class="hljs-comment">//无参数的情况</span><br><span class="hljs-keyword">if</span>(argv[<span class="hljs-number">1</span>] == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//输入Job ID的情况</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;%%%d&quot;</span>, &amp;jid) &gt; <span class="hljs-number">0</span>)&#123;<br>job = getjobjid(jobs, jid);<br><span class="hljs-keyword">if</span>(job == <span class="hljs-literal">NULL</span> || job-&gt;state == UNDEF)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: No such job\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入PID的情况</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sscanf</span>(argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;%d&quot;</span>, &amp;pid) &gt; <span class="hljs-number">0</span>)&#123;<br>job = getjobpid(jobs, pid);<br><span class="hljs-keyword">if</span>(job == <span class="hljs-literal">NULL</span> || job-&gt;state == UNDEF)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%s): No such process\n&quot;</span>, argv[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//输入其他字符的情况</span><br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s: argument must be a PID or %%jobid\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们需要向任务发送SIGCONT信号。需要注意的是，我们需要向任务及其子任务同时发送信号，因此我们需要在创建任务时将其自身和后续的子任务打包到一个独立的进程组中，这可以通过<strong>setpgid</strong>函数来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>            setpgid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">//将自身及子进程放入一个以自身PID为组号的进程组中</span><br>            ...<br>        &#125;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就可以使用<strong>kill</strong>函数向整个进程组发送信号了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">kill(-pid, SIGCONT); <span class="hljs-comment">//向pid进程组发送SIGCONT信号</span><br></code></pre></td></tr></table></figure><p>随后的行为和eval中类似，只需分情况处理前台或后台任务即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(argv[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;fg&quot;</span>))&#123;<br>waitfg(pid);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[%d] (%d) %s&quot;</span>, job-&gt;jid, pid, job-&gt;cmdline);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="waitfg">waitfg</h3><p>waitfg的作用基本就是<strong>在前台任务终止前锁住Shell进程的指令执行</strong>。我们可以使用<strong>while+pause</strong>语句来快速实现这一功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(pid == fgpid(jobs))&#123;<br>        pause();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="信号处理">信号处理</h2><h3 id="sigint及sigtstp">SIGINT及SIGTSTP</h3><p>首先我们来处理SIGINT和SIGTSTP信号。这两种信号的处理方式完全一致，均为向前台任务的整个进程组发送相应的信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">pid_t</span> pid = fgpid(jobs);<br><span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>    kill(-pid, sig);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于这一过程中可能会由于出现另外的异常而改变errno的值，因此我们需要在刚进入函数时保存errno的值，再在函数返回前将其恢复：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> old_errno = errno;<br>...<br>errno = old_errno; <br></code></pre></td></tr></table></figure><h3 id="sigchld">SIGCHLD</h3><p>按照实验要求，共有三种可能的情况会触发SIGCHLD信号：</p><ul><li>子任务正常结束</li><li>前台任务被信号终止</li><li>前台任务被信号暂停</li></ul><p>因此我们需要分情况处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sigchld_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> old_errno = errno;<br><span class="hljs-keyword">pid_t</span> pid;<br><span class="hljs-keyword">int</span> state; <span class="hljs-comment">//子进程结束状态码</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">job_t</span> *<span class="hljs-title">job</span>;</span><br><span class="hljs-comment">//对所有已终止或暂停的子进程进行操作</span><br><span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>, &amp;state, WNOHANG | WUNTRACED)) &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//正常退出的情况</span><br><span class="hljs-keyword">if</span>(WIFEXITED(state))&#123;<br>deletejob(jobs, pid);<br>&#125;<br>    <span class="hljs-comment">//被信号终止的情况</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSIGNALED(state))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>, pid2jid(pid), pid, WTERMSIG(state));<br>deletejob(jobs, pid);<br>&#125;<br>    <span class="hljs-comment">//被信号暂停的情况</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(WIFSTOPPED(state))&#123;<br>job = getjobpid(jobs, pid);<br>job-&gt;state = ST; <span class="hljs-comment">//将子进程设置为暂停状态</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>, job-&gt;jid, pid, WSTOPSIG(state));<br>&#125;<br>&#125;<br>  errno = old_errno;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，我们需要备份errno以防止破坏其他的操作。</p><h2 id="调度排查">调度排查</h2><p>现在我们的程序已经能够通过绝大部分的Trace任务，但由于<strong>进程调度机制</strong>的存在，某些操作的执行顺序可能并不会如我们所愿，这样在某些情况下可能会导致<strong>竞争</strong>或<strong>死锁</strong>的问题，因此我们需要排查这些情况并解决。</p><p>首先在任务的添加和删除时，由于要修改全局变量jobs，我们不希望有其他信号处理函数打断这一过程导致jobs被修改，因此在执行这些函数时我们要屏蔽所有的信号接收：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>    ...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>    sigfillset(&amp;mask_all);<br>    sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>    ...<br>    <span class="hljs-keyword">if</span>(bg)<br>addjob(jobs, pid, BG, cmdline);<br>    <span class="hljs-keyword">else</span><br>        addjob(jobs, pid, FG, cmdline);<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>...<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sigchld_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>...<br>sigfillset(&amp;mask_all);<br><span class="hljs-keyword">while</span>((pid = waitpid(<span class="hljs-number">-1</span>, &amp;state, WNOHANG | WUNTRACED)) &gt; <span class="hljs-number">0</span>)&#123;<br>sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>...<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>&#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，在修改任务状态时我们也需要屏蔽所有信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">do_bgfg</span><span class="hljs-params">(<span class="hljs-keyword">char</span> **argv)</span> </span><br><span class="hljs-function"></span>&#123;<br>    ...<br><span class="hljs-keyword">sigset_t</span> mask_all, mask_prev;<br>  ...<br>sigfillset(&amp;mask_all);<br>sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;mask_prev);<br>...<br>sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，我们继续检查eval函数，发现如果子进程在addjob函数被执行前便已终止，则sigchld_handler中的deletejob便无法正确删除相应的任务，因此我们需要在addjob被执行前屏蔽SIGCHLD信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>    ...<br>    <span class="hljs-keyword">sigset_t</span> mask_one, mask_prev;<br>    ...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        sigemptyset(&amp;mask_one);<br>sigaddset(&amp;mask_one, SIGCHLD);<br>sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;mask_prev);<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而，这一操作可能会使得子进程也无法接收到SIGCHLD信号，因此我们需要在创建子进程后恢复信号的接收：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">eval</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *cmdline)</span> </span><br><span class="hljs-function"></span>&#123;<br>...<br>    <span class="hljs-keyword">if</span>(!builtin_cmd(argv))&#123;<br>        <span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">0</span>)&#123;<br>            sigprocmask(SIG_SETMASK, &amp;mask_prev, <span class="hljs-literal">NULL</span>);<br>            ...<br>        &#125;<br>...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，我们考察waitfg函数，发现经过上面的修改后Shell进程已无法正确接受SIGCHLD指令。此时尽管我们可以暂时放开SIGCHLD信号的接收，但如果程序刚放开信号进程调度程序便调度至子进程并运行至子进程退出，则pause指令永远无法正确接收到SIGCHLD信号，此时便会出现死锁的情况。因此我们需要使用<strong>sigsuspend</strong>函数来代替以保证其不会被打断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">waitfg</span><span class="hljs-params">(<span class="hljs-keyword">pid_t</span> pid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">sigset_t</span> empty_mask;<br>    sigemptyset(&amp;empty_mask);<br><br>    <span class="hljs-keyword">while</span>(pid == fgpid(jobs))&#123;<br>        sigsuspend(&amp;empty_mask);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单来说就是用C语言以及各种系统调用实现一个简单的Unix Shell，说的更直白点就是把CSAPP书上第八章提到的关于Shell的内容全部实现一遍，因此最快的办法应该就是先搭一个基本的框架出来，然后跟着trace的要求把功能一个个补齐。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="http://gonggongjohn.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Computer-Science" scheme="http://gonggongjohn.me/tags/Computer-Science/"/>
    
    <category term="Computer-System" scheme="http://gonggongjohn.me/tags/Computer-System/"/>
    
  </entry>
  
</feed>
